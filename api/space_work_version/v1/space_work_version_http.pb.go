// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: space_work_version/v1/space_work_version.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSpaceWorkVersionCreateSpaceWorkVersion = "/api.space_work_version.v1.space_work_version/CreateSpaceWorkVersion"
const OperationSpaceWorkVersionDelSpaceWorkVersion = "/api.space_work_version.v1.space_work_version/DelSpaceWorkVersion"
const OperationSpaceWorkVersionModifySpaceWorkVersionName = "/api.space_work_version.v1.space_work_version/ModifySpaceWorkVersionName"
const OperationSpaceWorkVersionSetSpaceWorkVersionOrder = "/api.space_work_version.v1.space_work_version/SetSpaceWorkVersionOrder"
const OperationSpaceWorkVersionSetSpaceWorkVersionRanking = "/api.space_work_version.v1.space_work_version/SetSpaceWorkVersionRanking"
const OperationSpaceWorkVersionSpaceWorkVersionById = "/api.space_work_version.v1.space_work_version/SpaceWorkVersionById"
const OperationSpaceWorkVersionSpaceWorkVersionList = "/api.space_work_version.v1.space_work_version/SpaceWorkVersionList"
const OperationSpaceWorkVersionSpaceWorkVersionRelationCount = "/api.space_work_version.v1.space_work_version/SpaceWorkVersionRelationCount"

type SpaceWorkVersionHTTPServer interface {
	CreateSpaceWorkVersion(context.Context, *CreateSpaceWorkVersionRequest) (*CreateSpaceWorkVersionReply, error)
	DelSpaceWorkVersion(context.Context, *DelSpaceWorkVersionRequest) (*DelSpaceWorkVersionReply, error)
	ModifySpaceWorkVersionName(context.Context, *ModifySpaceWorkVersionNameRequest) (*ModifySpaceWorkVersionNameReply, error)
	SetSpaceWorkVersionOrder(context.Context, *SetWorkVersionOrderRequest) (*SetWorkVersionOrderReply, error)
	SetSpaceWorkVersionRanking(context.Context, *SetSpaceWorkVersionRankingRequest) (*SetSpaceWorkVersionRankingReply, error)
	SpaceWorkVersionById(context.Context, *SpaceWorkVersionByIdRequest) (*SpaceWorkVersionByIdReply, error)
	SpaceWorkVersionList(context.Context, *SpaceWorkVersionListRequest) (*SpaceWorkVersionListReply, error)
	SpaceWorkVersionRelationCount(context.Context, *SpaceWorkVersionRelationCountRequest) (*SpaceWorkVersionRelationCountReply, error)
}

func RegisterSpaceWorkVersionHTTPServer(s *http.Server, srv SpaceWorkVersionHTTPServer) {
	r := s.Route("/")
	r.POST("/my/space/work_version/create", _SpaceWorkVersion_CreateSpaceWorkVersion0_HTTP_Handler(srv))
	r.POST("/my/space/work_version/list", _SpaceWorkVersion_SpaceWorkVersionList0_HTTP_Handler(srv))
	r.POST("/my/space/work_version/by_id", _SpaceWorkVersion_SpaceWorkVersionById0_HTTP_Handler(srv))
	r.POST("/my/space/work_version/modify/name", _SpaceWorkVersion_ModifySpaceWorkVersionName0_HTTP_Handler(srv))
	r.POST("/my/space/work_version/del", _SpaceWorkVersion_DelSpaceWorkVersion0_HTTP_Handler(srv))
	r.POST("/my/space/work_version/set_order", _SpaceWorkVersion_SetSpaceWorkVersionOrder0_HTTP_Handler(srv))
	r.POST("/my/space/work_version/relation_count", _SpaceWorkVersion_SpaceWorkVersionRelationCount0_HTTP_Handler(srv))
	r.POST("/my/space/work_version/ranking/set", _SpaceWorkVersion_SetSpaceWorkVersionRanking0_HTTP_Handler(srv))
}

func _SpaceWorkVersion_CreateSpaceWorkVersion0_HTTP_Handler(srv SpaceWorkVersionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSpaceWorkVersionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkVersionCreateSpaceWorkVersion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSpaceWorkVersion(ctx, req.(*CreateSpaceWorkVersionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSpaceWorkVersionReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkVersion_SpaceWorkVersionList0_HTTP_Handler(srv SpaceWorkVersionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceWorkVersionListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkVersionSpaceWorkVersionList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpaceWorkVersionList(ctx, req.(*SpaceWorkVersionListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceWorkVersionListReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkVersion_SpaceWorkVersionById0_HTTP_Handler(srv SpaceWorkVersionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceWorkVersionByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkVersionSpaceWorkVersionById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpaceWorkVersionById(ctx, req.(*SpaceWorkVersionByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceWorkVersionByIdReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkVersion_ModifySpaceWorkVersionName0_HTTP_Handler(srv SpaceWorkVersionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifySpaceWorkVersionNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkVersionModifySpaceWorkVersionName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifySpaceWorkVersionName(ctx, req.(*ModifySpaceWorkVersionNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifySpaceWorkVersionNameReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkVersion_DelSpaceWorkVersion0_HTTP_Handler(srv SpaceWorkVersionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelSpaceWorkVersionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkVersionDelSpaceWorkVersion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelSpaceWorkVersion(ctx, req.(*DelSpaceWorkVersionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelSpaceWorkVersionReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkVersion_SetSpaceWorkVersionOrder0_HTTP_Handler(srv SpaceWorkVersionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetWorkVersionOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkVersionSetSpaceWorkVersionOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceWorkVersionOrder(ctx, req.(*SetWorkVersionOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetWorkVersionOrderReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkVersion_SpaceWorkVersionRelationCount0_HTTP_Handler(srv SpaceWorkVersionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceWorkVersionRelationCountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkVersionSpaceWorkVersionRelationCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpaceWorkVersionRelationCount(ctx, req.(*SpaceWorkVersionRelationCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceWorkVersionRelationCountReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkVersion_SetSpaceWorkVersionRanking0_HTTP_Handler(srv SpaceWorkVersionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSpaceWorkVersionRankingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkVersionSetSpaceWorkVersionRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceWorkVersionRanking(ctx, req.(*SetSpaceWorkVersionRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSpaceWorkVersionRankingReply)
		return ctx.Result(200, reply)
	}
}

type SpaceWorkVersionHTTPClient interface {
	CreateSpaceWorkVersion(ctx context.Context, req *CreateSpaceWorkVersionRequest, opts ...http.CallOption) (rsp *CreateSpaceWorkVersionReply, err error)
	DelSpaceWorkVersion(ctx context.Context, req *DelSpaceWorkVersionRequest, opts ...http.CallOption) (rsp *DelSpaceWorkVersionReply, err error)
	ModifySpaceWorkVersionName(ctx context.Context, req *ModifySpaceWorkVersionNameRequest, opts ...http.CallOption) (rsp *ModifySpaceWorkVersionNameReply, err error)
	SetSpaceWorkVersionOrder(ctx context.Context, req *SetWorkVersionOrderRequest, opts ...http.CallOption) (rsp *SetWorkVersionOrderReply, err error)
	SetSpaceWorkVersionRanking(ctx context.Context, req *SetSpaceWorkVersionRankingRequest, opts ...http.CallOption) (rsp *SetSpaceWorkVersionRankingReply, err error)
	SpaceWorkVersionById(ctx context.Context, req *SpaceWorkVersionByIdRequest, opts ...http.CallOption) (rsp *SpaceWorkVersionByIdReply, err error)
	SpaceWorkVersionList(ctx context.Context, req *SpaceWorkVersionListRequest, opts ...http.CallOption) (rsp *SpaceWorkVersionListReply, err error)
	SpaceWorkVersionRelationCount(ctx context.Context, req *SpaceWorkVersionRelationCountRequest, opts ...http.CallOption) (rsp *SpaceWorkVersionRelationCountReply, err error)
}

type SpaceWorkVersionHTTPClientImpl struct {
	cc *http.Client
}

func NewSpaceWorkVersionHTTPClient(client *http.Client) SpaceWorkVersionHTTPClient {
	return &SpaceWorkVersionHTTPClientImpl{client}
}

func (c *SpaceWorkVersionHTTPClientImpl) CreateSpaceWorkVersion(ctx context.Context, in *CreateSpaceWorkVersionRequest, opts ...http.CallOption) (*CreateSpaceWorkVersionReply, error) {
	var out CreateSpaceWorkVersionReply
	pattern := "/my/space/work_version/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkVersionCreateSpaceWorkVersion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkVersionHTTPClientImpl) DelSpaceWorkVersion(ctx context.Context, in *DelSpaceWorkVersionRequest, opts ...http.CallOption) (*DelSpaceWorkVersionReply, error) {
	var out DelSpaceWorkVersionReply
	pattern := "/my/space/work_version/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkVersionDelSpaceWorkVersion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkVersionHTTPClientImpl) ModifySpaceWorkVersionName(ctx context.Context, in *ModifySpaceWorkVersionNameRequest, opts ...http.CallOption) (*ModifySpaceWorkVersionNameReply, error) {
	var out ModifySpaceWorkVersionNameReply
	pattern := "/my/space/work_version/modify/name"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkVersionModifySpaceWorkVersionName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkVersionHTTPClientImpl) SetSpaceWorkVersionOrder(ctx context.Context, in *SetWorkVersionOrderRequest, opts ...http.CallOption) (*SetWorkVersionOrderReply, error) {
	var out SetWorkVersionOrderReply
	pattern := "/my/space/work_version/set_order"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkVersionSetSpaceWorkVersionOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkVersionHTTPClientImpl) SetSpaceWorkVersionRanking(ctx context.Context, in *SetSpaceWorkVersionRankingRequest, opts ...http.CallOption) (*SetSpaceWorkVersionRankingReply, error) {
	var out SetSpaceWorkVersionRankingReply
	pattern := "/my/space/work_version/ranking/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkVersionSetSpaceWorkVersionRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkVersionHTTPClientImpl) SpaceWorkVersionById(ctx context.Context, in *SpaceWorkVersionByIdRequest, opts ...http.CallOption) (*SpaceWorkVersionByIdReply, error) {
	var out SpaceWorkVersionByIdReply
	pattern := "/my/space/work_version/by_id"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkVersionSpaceWorkVersionById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkVersionHTTPClientImpl) SpaceWorkVersionList(ctx context.Context, in *SpaceWorkVersionListRequest, opts ...http.CallOption) (*SpaceWorkVersionListReply, error) {
	var out SpaceWorkVersionListReply
	pattern := "/my/space/work_version/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkVersionSpaceWorkVersionList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkVersionHTTPClientImpl) SpaceWorkVersionRelationCount(ctx context.Context, in *SpaceWorkVersionRelationCountRequest, opts ...http.CallOption) (*SpaceWorkVersionRelationCountReply, error) {
	var out SpaceWorkVersionRelationCountReply
	pattern := "/my/space/work_version/relation_count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkVersionSpaceWorkVersionRelationCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
