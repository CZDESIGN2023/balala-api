// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: space_work_version/v1/space_work_version.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SpaceWorkVersion_CreateSpaceWorkVersion_FullMethodName        = "/api.space_work_version.v1.space_work_version/CreateSpaceWorkVersion"
	SpaceWorkVersion_SpaceWorkVersionList_FullMethodName          = "/api.space_work_version.v1.space_work_version/SpaceWorkVersionList"
	SpaceWorkVersion_SpaceWorkVersionById_FullMethodName          = "/api.space_work_version.v1.space_work_version/SpaceWorkVersionById"
	SpaceWorkVersion_ModifySpaceWorkVersionName_FullMethodName    = "/api.space_work_version.v1.space_work_version/ModifySpaceWorkVersionName"
	SpaceWorkVersion_DelSpaceWorkVersion_FullMethodName           = "/api.space_work_version.v1.space_work_version/DelSpaceWorkVersion"
	SpaceWorkVersion_SetSpaceWorkVersionOrder_FullMethodName      = "/api.space_work_version.v1.space_work_version/SetSpaceWorkVersionOrder"
	SpaceWorkVersion_SpaceWorkVersionRelationCount_FullMethodName = "/api.space_work_version.v1.space_work_version/SpaceWorkVersionRelationCount"
	SpaceWorkVersion_SetSpaceWorkVersionRanking_FullMethodName    = "/api.space_work_version.v1.space_work_version/SetSpaceWorkVersionRanking"
)

// SpaceWorkVersionClient is the client API for SpaceWorkVersion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpaceWorkVersionClient interface {
	CreateSpaceWorkVersion(ctx context.Context, in *CreateSpaceWorkVersionRequest, opts ...grpc.CallOption) (*CreateSpaceWorkVersionReply, error)
	SpaceWorkVersionList(ctx context.Context, in *SpaceWorkVersionListRequest, opts ...grpc.CallOption) (*SpaceWorkVersionListReply, error)
	SpaceWorkVersionById(ctx context.Context, in *SpaceWorkVersionByIdRequest, opts ...grpc.CallOption) (*SpaceWorkVersionByIdReply, error)
	ModifySpaceWorkVersionName(ctx context.Context, in *ModifySpaceWorkVersionNameRequest, opts ...grpc.CallOption) (*ModifySpaceWorkVersionNameReply, error)
	DelSpaceWorkVersion(ctx context.Context, in *DelSpaceWorkVersionRequest, opts ...grpc.CallOption) (*DelSpaceWorkVersionReply, error)
	SetSpaceWorkVersionOrder(ctx context.Context, in *SetWorkVersionOrderRequest, opts ...grpc.CallOption) (*SetWorkVersionOrderReply, error)
	SpaceWorkVersionRelationCount(ctx context.Context, in *SpaceWorkVersionRelationCountRequest, opts ...grpc.CallOption) (*SpaceWorkVersionRelationCountReply, error)
	SetSpaceWorkVersionRanking(ctx context.Context, in *SetSpaceWorkVersionRankingRequest, opts ...grpc.CallOption) (*SetSpaceWorkVersionRankingReply, error)
}

type spaceWorkVersionClient struct {
	cc grpc.ClientConnInterface
}

func NewSpaceWorkVersionClient(cc grpc.ClientConnInterface) SpaceWorkVersionClient {
	return &spaceWorkVersionClient{cc}
}

func (c *spaceWorkVersionClient) CreateSpaceWorkVersion(ctx context.Context, in *CreateSpaceWorkVersionRequest, opts ...grpc.CallOption) (*CreateSpaceWorkVersionReply, error) {
	out := new(CreateSpaceWorkVersionReply)
	err := c.cc.Invoke(ctx, SpaceWorkVersion_CreateSpaceWorkVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceWorkVersionClient) SpaceWorkVersionList(ctx context.Context, in *SpaceWorkVersionListRequest, opts ...grpc.CallOption) (*SpaceWorkVersionListReply, error) {
	out := new(SpaceWorkVersionListReply)
	err := c.cc.Invoke(ctx, SpaceWorkVersion_SpaceWorkVersionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceWorkVersionClient) SpaceWorkVersionById(ctx context.Context, in *SpaceWorkVersionByIdRequest, opts ...grpc.CallOption) (*SpaceWorkVersionByIdReply, error) {
	out := new(SpaceWorkVersionByIdReply)
	err := c.cc.Invoke(ctx, SpaceWorkVersion_SpaceWorkVersionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceWorkVersionClient) ModifySpaceWorkVersionName(ctx context.Context, in *ModifySpaceWorkVersionNameRequest, opts ...grpc.CallOption) (*ModifySpaceWorkVersionNameReply, error) {
	out := new(ModifySpaceWorkVersionNameReply)
	err := c.cc.Invoke(ctx, SpaceWorkVersion_ModifySpaceWorkVersionName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceWorkVersionClient) DelSpaceWorkVersion(ctx context.Context, in *DelSpaceWorkVersionRequest, opts ...grpc.CallOption) (*DelSpaceWorkVersionReply, error) {
	out := new(DelSpaceWorkVersionReply)
	err := c.cc.Invoke(ctx, SpaceWorkVersion_DelSpaceWorkVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceWorkVersionClient) SetSpaceWorkVersionOrder(ctx context.Context, in *SetWorkVersionOrderRequest, opts ...grpc.CallOption) (*SetWorkVersionOrderReply, error) {
	out := new(SetWorkVersionOrderReply)
	err := c.cc.Invoke(ctx, SpaceWorkVersion_SetSpaceWorkVersionOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceWorkVersionClient) SpaceWorkVersionRelationCount(ctx context.Context, in *SpaceWorkVersionRelationCountRequest, opts ...grpc.CallOption) (*SpaceWorkVersionRelationCountReply, error) {
	out := new(SpaceWorkVersionRelationCountReply)
	err := c.cc.Invoke(ctx, SpaceWorkVersion_SpaceWorkVersionRelationCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceWorkVersionClient) SetSpaceWorkVersionRanking(ctx context.Context, in *SetSpaceWorkVersionRankingRequest, opts ...grpc.CallOption) (*SetSpaceWorkVersionRankingReply, error) {
	out := new(SetSpaceWorkVersionRankingReply)
	err := c.cc.Invoke(ctx, SpaceWorkVersion_SetSpaceWorkVersionRanking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceWorkVersionServer is the server API for SpaceWorkVersion service.
// All implementations must embed UnimplementedSpaceWorkVersionServer
// for forward compatibility
type SpaceWorkVersionServer interface {
	CreateSpaceWorkVersion(context.Context, *CreateSpaceWorkVersionRequest) (*CreateSpaceWorkVersionReply, error)
	SpaceWorkVersionList(context.Context, *SpaceWorkVersionListRequest) (*SpaceWorkVersionListReply, error)
	SpaceWorkVersionById(context.Context, *SpaceWorkVersionByIdRequest) (*SpaceWorkVersionByIdReply, error)
	ModifySpaceWorkVersionName(context.Context, *ModifySpaceWorkVersionNameRequest) (*ModifySpaceWorkVersionNameReply, error)
	DelSpaceWorkVersion(context.Context, *DelSpaceWorkVersionRequest) (*DelSpaceWorkVersionReply, error)
	SetSpaceWorkVersionOrder(context.Context, *SetWorkVersionOrderRequest) (*SetWorkVersionOrderReply, error)
	SpaceWorkVersionRelationCount(context.Context, *SpaceWorkVersionRelationCountRequest) (*SpaceWorkVersionRelationCountReply, error)
	SetSpaceWorkVersionRanking(context.Context, *SetSpaceWorkVersionRankingRequest) (*SetSpaceWorkVersionRankingReply, error)
	mustEmbedUnimplementedSpaceWorkVersionServer()
}

// UnimplementedSpaceWorkVersionServer must be embedded to have forward compatible implementations.
type UnimplementedSpaceWorkVersionServer struct {
}

func (UnimplementedSpaceWorkVersionServer) CreateSpaceWorkVersion(context.Context, *CreateSpaceWorkVersionRequest) (*CreateSpaceWorkVersionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpaceWorkVersion not implemented")
}
func (UnimplementedSpaceWorkVersionServer) SpaceWorkVersionList(context.Context, *SpaceWorkVersionListRequest) (*SpaceWorkVersionListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceWorkVersionList not implemented")
}
func (UnimplementedSpaceWorkVersionServer) SpaceWorkVersionById(context.Context, *SpaceWorkVersionByIdRequest) (*SpaceWorkVersionByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceWorkVersionById not implemented")
}
func (UnimplementedSpaceWorkVersionServer) ModifySpaceWorkVersionName(context.Context, *ModifySpaceWorkVersionNameRequest) (*ModifySpaceWorkVersionNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySpaceWorkVersionName not implemented")
}
func (UnimplementedSpaceWorkVersionServer) DelSpaceWorkVersion(context.Context, *DelSpaceWorkVersionRequest) (*DelSpaceWorkVersionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSpaceWorkVersion not implemented")
}
func (UnimplementedSpaceWorkVersionServer) SetSpaceWorkVersionOrder(context.Context, *SetWorkVersionOrderRequest) (*SetWorkVersionOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpaceWorkVersionOrder not implemented")
}
func (UnimplementedSpaceWorkVersionServer) SpaceWorkVersionRelationCount(context.Context, *SpaceWorkVersionRelationCountRequest) (*SpaceWorkVersionRelationCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceWorkVersionRelationCount not implemented")
}
func (UnimplementedSpaceWorkVersionServer) SetSpaceWorkVersionRanking(context.Context, *SetSpaceWorkVersionRankingRequest) (*SetSpaceWorkVersionRankingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpaceWorkVersionRanking not implemented")
}
func (UnimplementedSpaceWorkVersionServer) mustEmbedUnimplementedSpaceWorkVersionServer() {}

// UnsafeSpaceWorkVersionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpaceWorkVersionServer will
// result in compilation errors.
type UnsafeSpaceWorkVersionServer interface {
	mustEmbedUnimplementedSpaceWorkVersionServer()
}

func RegisterSpaceWorkVersionServer(s grpc.ServiceRegistrar, srv SpaceWorkVersionServer) {
	s.RegisterService(&SpaceWorkVersion_ServiceDesc, srv)
}

func _SpaceWorkVersion_CreateSpaceWorkVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceWorkVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceWorkVersionServer).CreateSpaceWorkVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceWorkVersion_CreateSpaceWorkVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceWorkVersionServer).CreateSpaceWorkVersion(ctx, req.(*CreateSpaceWorkVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceWorkVersion_SpaceWorkVersionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceWorkVersionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceWorkVersionServer).SpaceWorkVersionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceWorkVersion_SpaceWorkVersionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceWorkVersionServer).SpaceWorkVersionList(ctx, req.(*SpaceWorkVersionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceWorkVersion_SpaceWorkVersionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceWorkVersionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceWorkVersionServer).SpaceWorkVersionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceWorkVersion_SpaceWorkVersionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceWorkVersionServer).SpaceWorkVersionById(ctx, req.(*SpaceWorkVersionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceWorkVersion_ModifySpaceWorkVersionName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySpaceWorkVersionNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceWorkVersionServer).ModifySpaceWorkVersionName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceWorkVersion_ModifySpaceWorkVersionName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceWorkVersionServer).ModifySpaceWorkVersionName(ctx, req.(*ModifySpaceWorkVersionNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceWorkVersion_DelSpaceWorkVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSpaceWorkVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceWorkVersionServer).DelSpaceWorkVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceWorkVersion_DelSpaceWorkVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceWorkVersionServer).DelSpaceWorkVersion(ctx, req.(*DelSpaceWorkVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceWorkVersion_SetSpaceWorkVersionOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWorkVersionOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceWorkVersionServer).SetSpaceWorkVersionOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceWorkVersion_SetSpaceWorkVersionOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceWorkVersionServer).SetSpaceWorkVersionOrder(ctx, req.(*SetWorkVersionOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceWorkVersion_SpaceWorkVersionRelationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceWorkVersionRelationCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceWorkVersionServer).SpaceWorkVersionRelationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceWorkVersion_SpaceWorkVersionRelationCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceWorkVersionServer).SpaceWorkVersionRelationCount(ctx, req.(*SpaceWorkVersionRelationCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceWorkVersion_SetSpaceWorkVersionRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSpaceWorkVersionRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceWorkVersionServer).SetSpaceWorkVersionRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceWorkVersion_SetSpaceWorkVersionRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceWorkVersionServer).SetSpaceWorkVersionRanking(ctx, req.(*SetSpaceWorkVersionRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpaceWorkVersion_ServiceDesc is the grpc.ServiceDesc for SpaceWorkVersion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpaceWorkVersion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.space_work_version.v1.space_work_version",
	HandlerType: (*SpaceWorkVersionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpaceWorkVersion",
			Handler:    _SpaceWorkVersion_CreateSpaceWorkVersion_Handler,
		},
		{
			MethodName: "SpaceWorkVersionList",
			Handler:    _SpaceWorkVersion_SpaceWorkVersionList_Handler,
		},
		{
			MethodName: "SpaceWorkVersionById",
			Handler:    _SpaceWorkVersion_SpaceWorkVersionById_Handler,
		},
		{
			MethodName: "ModifySpaceWorkVersionName",
			Handler:    _SpaceWorkVersion_ModifySpaceWorkVersionName_Handler,
		},
		{
			MethodName: "DelSpaceWorkVersion",
			Handler:    _SpaceWorkVersion_DelSpaceWorkVersion_Handler,
		},
		{
			MethodName: "SetSpaceWorkVersionOrder",
			Handler:    _SpaceWorkVersion_SetSpaceWorkVersionOrder_Handler,
		},
		{
			MethodName: "SpaceWorkVersionRelationCount",
			Handler:    _SpaceWorkVersion_SpaceWorkVersionRelationCount_Handler,
		},
		{
			MethodName: "SetSpaceWorkVersionRanking",
			Handler:    _SpaceWorkVersion_SetSpaceWorkVersionRanking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "space_work_version/v1/space_work_version.proto",
}
