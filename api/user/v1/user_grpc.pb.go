// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: user/v1/user.proto

package v1

import (
	context "context"
	comm "go-cs/api/comm"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_GetUser_FullMethodName                = "/api.user.v1.User/GetUser"
	User_CheckUserName_FullMethodName          = "/api.user.v1.User/CheckUserName"
	User_SearchUserList_FullMethodName         = "/api.user.v1.User/SearchUserList"
	User_ListUser_FullMethodName               = "/api.user.v1.User/ListUser"
	User_RegUser_FullMethodName                = "/api.user.v1.User/RegUser"
	User_SetMyAvatar_FullMethodName            = "/api.user.v1.User/SetMyAvatar"
	User_GetMyUserInfo_FullMethodName          = "/api.user.v1.User/GetMyUserInfo"
	User_SetMyNickName_FullMethodName          = "/api.user.v1.User/SetMyNickName"
	User_ChangeMyPwd_FullMethodName            = "/api.user.v1.User/ChangeMyPwd"
	User_GetMySpaceMemberInfo_FullMethodName   = "/api.user.v1.User/GetMySpaceMemberInfo"
	User_Bind_FullMethodName                   = "/api.user.v1.User/Bind"
	User_Unbind_FullMethodName                 = "/api.user.v1.User/Unbind"
	User_Cancel_FullMethodName                 = "/api.user.v1.User/Cancel"
	User_SetSpaceNotify_FullMethodName         = "/api.user.v1.User/SetSpaceNotify"
	User_SetSpaceOrder_FullMethodName          = "/api.user.v1.User/SetSpaceOrder"
	User_MyPendingWorkItem_FullMethodName      = "/api.user.v1.User/MyPendingWorkItem"
	User_MyRelatedComment_FullMethodName       = "/api.user.v1.User/MyRelatedComment"
	User_MyRelatedCommentByIds_FullMethodName  = "/api.user.v1.User/MyRelatedCommentByIds"
	User_NotifyCount_FullMethodName            = "/api.user.v1.User/NotifyCount"
	User_GetTempConfig_FullMethodName          = "/api.user.v1.User/GetTempConfig"
	User_SetTempConfig_FullMethodName          = "/api.user.v1.User/SetTempConfig"
	User_DelTempConfig_FullMethodName          = "/api.user.v1.User/DelTempConfig"
	User_AllSpaceProfile_FullMethodName        = "/api.user.v1.User/AllSpaceProfile"
	User_GetUserConfig_FullMethodName          = "/api.user.v1.User/GetUserConfig"
	User_SetUserConfig_FullMethodName          = "/api.user.v1.User/SetUserConfig"
	User_SetThirdPlatformNotify_FullMethodName = "/api.user.v1.User/SetThirdPlatformNotify"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	CheckUserName(ctx context.Context, in *CheckUserNameRequest, opts ...grpc.CallOption) (*CheckUserNameReply, error)
	SearchUserList(ctx context.Context, in *SearchUserListRequest, opts ...grpc.CallOption) (*SearchUserListReply, error)
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserReply, error)
	RegUser(ctx context.Context, in *RegUserRequest, opts ...grpc.CallOption) (*comm.CommonReply, error)
	SetMyAvatar(ctx context.Context, in *SetMyAvatarRequest, opts ...grpc.CallOption) (*SetMyAvatarReply, error)
	GetMyUserInfo(ctx context.Context, in *GetMyUserInfoRequest, opts ...grpc.CallOption) (*GetMyUserInfoReply, error)
	SetMyNickName(ctx context.Context, in *SetMyNickNameRquest, opts ...grpc.CallOption) (*SetMyNickNameReply, error)
	ChangeMyPwd(ctx context.Context, in *ChangeMyPwdRequest, opts ...grpc.CallOption) (*ChangeMyPwdReply, error)
	GetMySpaceMemberInfo(ctx context.Context, in *GetMySpaceMemberInfoRequest, opts ...grpc.CallOption) (*GetMySpaceMemberInfoReply, error)
	Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindReply, error)
	Unbind(ctx context.Context, in *UnbindRequest, opts ...grpc.CallOption) (*UnbindReply, error)
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelReply, error)
	SetSpaceNotify(ctx context.Context, in *SetSpaceNotifyRequest, opts ...grpc.CallOption) (*SetSpaceNotifyReply, error)
	SetSpaceOrder(ctx context.Context, in *SetSpaceOrderRequest, opts ...grpc.CallOption) (*SetSpaceOrderReply, error)
	MyPendingWorkItem(ctx context.Context, in *MyPendingWorkItemRequest, opts ...grpc.CallOption) (*MyPendingWorkItemReply, error)
	MyRelatedComment(ctx context.Context, in *MyRelatedCommentRequest, opts ...grpc.CallOption) (*MyRelatedCommentReply, error)
	MyRelatedCommentByIds(ctx context.Context, in *MyRelatedCommentByIdsRequest, opts ...grpc.CallOption) (*MyRelatedCommentByIdsReply, error)
	NotifyCount(ctx context.Context, in *NotifyCountRequest, opts ...grpc.CallOption) (*NotifyCountReply, error)
	GetTempConfig(ctx context.Context, in *GetTempConfigRequest, opts ...grpc.CallOption) (*GetTempConfigReply, error)
	SetTempConfig(ctx context.Context, in *SetTempConfigRequest, opts ...grpc.CallOption) (*SetTempConfigReply, error)
	DelTempConfig(ctx context.Context, in *DelTempConfigRequest, opts ...grpc.CallOption) (*DelTempConfigReply, error)
	AllSpaceProfile(ctx context.Context, in *AllSpaceProfileRequest, opts ...grpc.CallOption) (*AllSpaceProfileReply, error)
	GetUserConfig(ctx context.Context, in *GetUserConfigRequest, opts ...grpc.CallOption) (*GetUserConfigReply, error)
	SetUserConfig(ctx context.Context, in *SetUserConfigRequest, opts ...grpc.CallOption) (*SetUserConfigReply, error)
	SetThirdPlatformNotify(ctx context.Context, in *SetThirdPlatformNotifyRequest, opts ...grpc.CallOption) (*SetThirdPlatformNotifyReply, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, User_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckUserName(ctx context.Context, in *CheckUserNameRequest, opts ...grpc.CallOption) (*CheckUserNameReply, error) {
	out := new(CheckUserNameReply)
	err := c.cc.Invoke(ctx, User_CheckUserName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchUserList(ctx context.Context, in *SearchUserListRequest, opts ...grpc.CallOption) (*SearchUserListReply, error) {
	out := new(SearchUserListReply)
	err := c.cc.Invoke(ctx, User_SearchUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserReply, error) {
	out := new(ListUserReply)
	err := c.cc.Invoke(ctx, User_ListUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RegUser(ctx context.Context, in *RegUserRequest, opts ...grpc.CallOption) (*comm.CommonReply, error) {
	out := new(comm.CommonReply)
	err := c.cc.Invoke(ctx, User_RegUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetMyAvatar(ctx context.Context, in *SetMyAvatarRequest, opts ...grpc.CallOption) (*SetMyAvatarReply, error) {
	out := new(SetMyAvatarReply)
	err := c.cc.Invoke(ctx, User_SetMyAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetMyUserInfo(ctx context.Context, in *GetMyUserInfoRequest, opts ...grpc.CallOption) (*GetMyUserInfoReply, error) {
	out := new(GetMyUserInfoReply)
	err := c.cc.Invoke(ctx, User_GetMyUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetMyNickName(ctx context.Context, in *SetMyNickNameRquest, opts ...grpc.CallOption) (*SetMyNickNameReply, error) {
	out := new(SetMyNickNameReply)
	err := c.cc.Invoke(ctx, User_SetMyNickName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ChangeMyPwd(ctx context.Context, in *ChangeMyPwdRequest, opts ...grpc.CallOption) (*ChangeMyPwdReply, error) {
	out := new(ChangeMyPwdReply)
	err := c.cc.Invoke(ctx, User_ChangeMyPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetMySpaceMemberInfo(ctx context.Context, in *GetMySpaceMemberInfoRequest, opts ...grpc.CallOption) (*GetMySpaceMemberInfoReply, error) {
	out := new(GetMySpaceMemberInfoReply)
	err := c.cc.Invoke(ctx, User_GetMySpaceMemberInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindReply, error) {
	out := new(BindReply)
	err := c.cc.Invoke(ctx, User_Bind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Unbind(ctx context.Context, in *UnbindRequest, opts ...grpc.CallOption) (*UnbindReply, error) {
	out := new(UnbindReply)
	err := c.cc.Invoke(ctx, User_Unbind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelReply, error) {
	out := new(CancelReply)
	err := c.cc.Invoke(ctx, User_Cancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetSpaceNotify(ctx context.Context, in *SetSpaceNotifyRequest, opts ...grpc.CallOption) (*SetSpaceNotifyReply, error) {
	out := new(SetSpaceNotifyReply)
	err := c.cc.Invoke(ctx, User_SetSpaceNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetSpaceOrder(ctx context.Context, in *SetSpaceOrderRequest, opts ...grpc.CallOption) (*SetSpaceOrderReply, error) {
	out := new(SetSpaceOrderReply)
	err := c.cc.Invoke(ctx, User_SetSpaceOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) MyPendingWorkItem(ctx context.Context, in *MyPendingWorkItemRequest, opts ...grpc.CallOption) (*MyPendingWorkItemReply, error) {
	out := new(MyPendingWorkItemReply)
	err := c.cc.Invoke(ctx, User_MyPendingWorkItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) MyRelatedComment(ctx context.Context, in *MyRelatedCommentRequest, opts ...grpc.CallOption) (*MyRelatedCommentReply, error) {
	out := new(MyRelatedCommentReply)
	err := c.cc.Invoke(ctx, User_MyRelatedComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) MyRelatedCommentByIds(ctx context.Context, in *MyRelatedCommentByIdsRequest, opts ...grpc.CallOption) (*MyRelatedCommentByIdsReply, error) {
	out := new(MyRelatedCommentByIdsReply)
	err := c.cc.Invoke(ctx, User_MyRelatedCommentByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) NotifyCount(ctx context.Context, in *NotifyCountRequest, opts ...grpc.CallOption) (*NotifyCountReply, error) {
	out := new(NotifyCountReply)
	err := c.cc.Invoke(ctx, User_NotifyCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetTempConfig(ctx context.Context, in *GetTempConfigRequest, opts ...grpc.CallOption) (*GetTempConfigReply, error) {
	out := new(GetTempConfigReply)
	err := c.cc.Invoke(ctx, User_GetTempConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetTempConfig(ctx context.Context, in *SetTempConfigRequest, opts ...grpc.CallOption) (*SetTempConfigReply, error) {
	out := new(SetTempConfigReply)
	err := c.cc.Invoke(ctx, User_SetTempConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelTempConfig(ctx context.Context, in *DelTempConfigRequest, opts ...grpc.CallOption) (*DelTempConfigReply, error) {
	out := new(DelTempConfigReply)
	err := c.cc.Invoke(ctx, User_DelTempConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AllSpaceProfile(ctx context.Context, in *AllSpaceProfileRequest, opts ...grpc.CallOption) (*AllSpaceProfileReply, error) {
	out := new(AllSpaceProfileReply)
	err := c.cc.Invoke(ctx, User_AllSpaceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserConfig(ctx context.Context, in *GetUserConfigRequest, opts ...grpc.CallOption) (*GetUserConfigReply, error) {
	out := new(GetUserConfigReply)
	err := c.cc.Invoke(ctx, User_GetUserConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetUserConfig(ctx context.Context, in *SetUserConfigRequest, opts ...grpc.CallOption) (*SetUserConfigReply, error) {
	out := new(SetUserConfigReply)
	err := c.cc.Invoke(ctx, User_SetUserConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetThirdPlatformNotify(ctx context.Context, in *SetThirdPlatformNotifyRequest, opts ...grpc.CallOption) (*SetThirdPlatformNotifyReply, error) {
	out := new(SetThirdPlatformNotifyReply)
	err := c.cc.Invoke(ctx, User_SetThirdPlatformNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	CheckUserName(context.Context, *CheckUserNameRequest) (*CheckUserNameReply, error)
	SearchUserList(context.Context, *SearchUserListRequest) (*SearchUserListReply, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserReply, error)
	RegUser(context.Context, *RegUserRequest) (*comm.CommonReply, error)
	SetMyAvatar(context.Context, *SetMyAvatarRequest) (*SetMyAvatarReply, error)
	GetMyUserInfo(context.Context, *GetMyUserInfoRequest) (*GetMyUserInfoReply, error)
	SetMyNickName(context.Context, *SetMyNickNameRquest) (*SetMyNickNameReply, error)
	ChangeMyPwd(context.Context, *ChangeMyPwdRequest) (*ChangeMyPwdReply, error)
	GetMySpaceMemberInfo(context.Context, *GetMySpaceMemberInfoRequest) (*GetMySpaceMemberInfoReply, error)
	Bind(context.Context, *BindRequest) (*BindReply, error)
	Unbind(context.Context, *UnbindRequest) (*UnbindReply, error)
	Cancel(context.Context, *CancelRequest) (*CancelReply, error)
	SetSpaceNotify(context.Context, *SetSpaceNotifyRequest) (*SetSpaceNotifyReply, error)
	SetSpaceOrder(context.Context, *SetSpaceOrderRequest) (*SetSpaceOrderReply, error)
	MyPendingWorkItem(context.Context, *MyPendingWorkItemRequest) (*MyPendingWorkItemReply, error)
	MyRelatedComment(context.Context, *MyRelatedCommentRequest) (*MyRelatedCommentReply, error)
	MyRelatedCommentByIds(context.Context, *MyRelatedCommentByIdsRequest) (*MyRelatedCommentByIdsReply, error)
	NotifyCount(context.Context, *NotifyCountRequest) (*NotifyCountReply, error)
	GetTempConfig(context.Context, *GetTempConfigRequest) (*GetTempConfigReply, error)
	SetTempConfig(context.Context, *SetTempConfigRequest) (*SetTempConfigReply, error)
	DelTempConfig(context.Context, *DelTempConfigRequest) (*DelTempConfigReply, error)
	AllSpaceProfile(context.Context, *AllSpaceProfileRequest) (*AllSpaceProfileReply, error)
	GetUserConfig(context.Context, *GetUserConfigRequest) (*GetUserConfigReply, error)
	SetUserConfig(context.Context, *SetUserConfigRequest) (*SetUserConfigReply, error)
	SetThirdPlatformNotify(context.Context, *SetThirdPlatformNotifyRequest) (*SetThirdPlatformNotifyReply, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetUser(context.Context, *GetUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServer) CheckUserName(context.Context, *CheckUserNameRequest) (*CheckUserNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserName not implemented")
}
func (UnimplementedUserServer) SearchUserList(context.Context, *SearchUserListRequest) (*SearchUserListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserList not implemented")
}
func (UnimplementedUserServer) ListUser(context.Context, *ListUserRequest) (*ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedUserServer) RegUser(context.Context, *RegUserRequest) (*comm.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegUser not implemented")
}
func (UnimplementedUserServer) SetMyAvatar(context.Context, *SetMyAvatarRequest) (*SetMyAvatarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyAvatar not implemented")
}
func (UnimplementedUserServer) GetMyUserInfo(context.Context, *GetMyUserInfoRequest) (*GetMyUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyUserInfo not implemented")
}
func (UnimplementedUserServer) SetMyNickName(context.Context, *SetMyNickNameRquest) (*SetMyNickNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyNickName not implemented")
}
func (UnimplementedUserServer) ChangeMyPwd(context.Context, *ChangeMyPwdRequest) (*ChangeMyPwdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMyPwd not implemented")
}
func (UnimplementedUserServer) GetMySpaceMemberInfo(context.Context, *GetMySpaceMemberInfoRequest) (*GetMySpaceMemberInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMySpaceMemberInfo not implemented")
}
func (UnimplementedUserServer) Bind(context.Context, *BindRequest) (*BindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (UnimplementedUserServer) Unbind(context.Context, *UnbindRequest) (*UnbindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbind not implemented")
}
func (UnimplementedUserServer) Cancel(context.Context, *CancelRequest) (*CancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedUserServer) SetSpaceNotify(context.Context, *SetSpaceNotifyRequest) (*SetSpaceNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpaceNotify not implemented")
}
func (UnimplementedUserServer) SetSpaceOrder(context.Context, *SetSpaceOrderRequest) (*SetSpaceOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpaceOrder not implemented")
}
func (UnimplementedUserServer) MyPendingWorkItem(context.Context, *MyPendingWorkItemRequest) (*MyPendingWorkItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyPendingWorkItem not implemented")
}
func (UnimplementedUserServer) MyRelatedComment(context.Context, *MyRelatedCommentRequest) (*MyRelatedCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyRelatedComment not implemented")
}
func (UnimplementedUserServer) MyRelatedCommentByIds(context.Context, *MyRelatedCommentByIdsRequest) (*MyRelatedCommentByIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyRelatedCommentByIds not implemented")
}
func (UnimplementedUserServer) NotifyCount(context.Context, *NotifyCountRequest) (*NotifyCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyCount not implemented")
}
func (UnimplementedUserServer) GetTempConfig(context.Context, *GetTempConfigRequest) (*GetTempConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTempConfig not implemented")
}
func (UnimplementedUserServer) SetTempConfig(context.Context, *SetTempConfigRequest) (*SetTempConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTempConfig not implemented")
}
func (UnimplementedUserServer) DelTempConfig(context.Context, *DelTempConfigRequest) (*DelTempConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTempConfig not implemented")
}
func (UnimplementedUserServer) AllSpaceProfile(context.Context, *AllSpaceProfileRequest) (*AllSpaceProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllSpaceProfile not implemented")
}
func (UnimplementedUserServer) GetUserConfig(context.Context, *GetUserConfigRequest) (*GetUserConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserConfig not implemented")
}
func (UnimplementedUserServer) SetUserConfig(context.Context, *SetUserConfigRequest) (*SetUserConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserConfig not implemented")
}
func (UnimplementedUserServer) SetThirdPlatformNotify(context.Context, *SetThirdPlatformNotifyRequest) (*SetThirdPlatformNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetThirdPlatformNotify not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CheckUserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckUserName(ctx, req.(*CheckUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SearchUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchUserList(ctx, req.(*SearchUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RegUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RegUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RegUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RegUser(ctx, req.(*RegUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetMyAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetMyAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SetMyAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetMyAvatar(ctx, req.(*SetMyAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetMyUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetMyUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetMyUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetMyUserInfo(ctx, req.(*GetMyUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetMyNickName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyNickNameRquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetMyNickName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SetMyNickName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetMyNickName(ctx, req.(*SetMyNickNameRquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ChangeMyPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMyPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ChangeMyPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ChangeMyPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ChangeMyPwd(ctx, req.(*ChangeMyPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetMySpaceMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMySpaceMemberInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetMySpaceMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetMySpaceMemberInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetMySpaceMemberInfo(ctx, req.(*GetMySpaceMemberInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Bind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Bind(ctx, req.(*BindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Unbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Unbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Unbind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Unbind(ctx, req.(*UnbindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetSpaceNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSpaceNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetSpaceNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SetSpaceNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetSpaceNotify(ctx, req.(*SetSpaceNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetSpaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSpaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetSpaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SetSpaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetSpaceOrder(ctx, req.(*SetSpaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_MyPendingWorkItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyPendingWorkItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).MyPendingWorkItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_MyPendingWorkItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).MyPendingWorkItem(ctx, req.(*MyPendingWorkItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_MyRelatedComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyRelatedCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).MyRelatedComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_MyRelatedComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).MyRelatedComment(ctx, req.(*MyRelatedCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_MyRelatedCommentByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyRelatedCommentByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).MyRelatedCommentByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_MyRelatedCommentByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).MyRelatedCommentByIds(ctx, req.(*MyRelatedCommentByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_NotifyCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).NotifyCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_NotifyCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).NotifyCount(ctx, req.(*NotifyCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetTempConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTempConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetTempConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetTempConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetTempConfig(ctx, req.(*GetTempConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetTempConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTempConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetTempConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SetTempConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetTempConfig(ctx, req.(*SetTempConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelTempConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTempConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelTempConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelTempConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelTempConfig(ctx, req.(*DelTempConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AllSpaceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllSpaceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AllSpaceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AllSpaceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AllSpaceProfile(ctx, req.(*AllSpaceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserConfig(ctx, req.(*GetUserConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SetUserConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetUserConfig(ctx, req.(*SetUserConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetThirdPlatformNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetThirdPlatformNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetThirdPlatformNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SetThirdPlatformNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetThirdPlatformNotify(ctx, req.(*SetThirdPlatformNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _User_GetUser_Handler,
		},
		{
			MethodName: "CheckUserName",
			Handler:    _User_CheckUserName_Handler,
		},
		{
			MethodName: "SearchUserList",
			Handler:    _User_SearchUserList_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _User_ListUser_Handler,
		},
		{
			MethodName: "RegUser",
			Handler:    _User_RegUser_Handler,
		},
		{
			MethodName: "SetMyAvatar",
			Handler:    _User_SetMyAvatar_Handler,
		},
		{
			MethodName: "GetMyUserInfo",
			Handler:    _User_GetMyUserInfo_Handler,
		},
		{
			MethodName: "SetMyNickName",
			Handler:    _User_SetMyNickName_Handler,
		},
		{
			MethodName: "ChangeMyPwd",
			Handler:    _User_ChangeMyPwd_Handler,
		},
		{
			MethodName: "GetMySpaceMemberInfo",
			Handler:    _User_GetMySpaceMemberInfo_Handler,
		},
		{
			MethodName: "Bind",
			Handler:    _User_Bind_Handler,
		},
		{
			MethodName: "Unbind",
			Handler:    _User_Unbind_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _User_Cancel_Handler,
		},
		{
			MethodName: "SetSpaceNotify",
			Handler:    _User_SetSpaceNotify_Handler,
		},
		{
			MethodName: "SetSpaceOrder",
			Handler:    _User_SetSpaceOrder_Handler,
		},
		{
			MethodName: "MyPendingWorkItem",
			Handler:    _User_MyPendingWorkItem_Handler,
		},
		{
			MethodName: "MyRelatedComment",
			Handler:    _User_MyRelatedComment_Handler,
		},
		{
			MethodName: "MyRelatedCommentByIds",
			Handler:    _User_MyRelatedCommentByIds_Handler,
		},
		{
			MethodName: "NotifyCount",
			Handler:    _User_NotifyCount_Handler,
		},
		{
			MethodName: "GetTempConfig",
			Handler:    _User_GetTempConfig_Handler,
		},
		{
			MethodName: "SetTempConfig",
			Handler:    _User_SetTempConfig_Handler,
		},
		{
			MethodName: "DelTempConfig",
			Handler:    _User_DelTempConfig_Handler,
		},
		{
			MethodName: "AllSpaceProfile",
			Handler:    _User_AllSpaceProfile_Handler,
		},
		{
			MethodName: "GetUserConfig",
			Handler:    _User_GetUserConfig_Handler,
		},
		{
			MethodName: "SetUserConfig",
			Handler:    _User_SetUserConfig_Handler,
		},
		{
			MethodName: "SetThirdPlatformNotify",
			Handler:    _User_SetThirdPlatformNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}
