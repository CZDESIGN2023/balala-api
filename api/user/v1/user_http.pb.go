// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: user/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	comm "go-cs/api/comm"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserAllSpaceProfile = "/api.user.v1.User/AllSpaceProfile"
const OperationUserBind = "/api.user.v1.User/Bind"
const OperationUserCancel = "/api.user.v1.User/Cancel"
const OperationUserChangeMyPwd = "/api.user.v1.User/ChangeMyPwd"
const OperationUserCheckUserName = "/api.user.v1.User/CheckUserName"
const OperationUserDelTempConfig = "/api.user.v1.User/DelTempConfig"
const OperationUserGetMySpaceMemberInfo = "/api.user.v1.User/GetMySpaceMemberInfo"
const OperationUserGetMyUserInfo = "/api.user.v1.User/GetMyUserInfo"
const OperationUserGetTempConfig = "/api.user.v1.User/GetTempConfig"
const OperationUserGetUser = "/api.user.v1.User/GetUser"
const OperationUserGetUserConfig = "/api.user.v1.User/GetUserConfig"
const OperationUserListUser = "/api.user.v1.User/ListUser"
const OperationUserMyPendingWorkItem = "/api.user.v1.User/MyPendingWorkItem"
const OperationUserMyRelatedComment = "/api.user.v1.User/MyRelatedComment"
const OperationUserMyRelatedCommentByIds = "/api.user.v1.User/MyRelatedCommentByIds"
const OperationUserNotifyCount = "/api.user.v1.User/NotifyCount"
const OperationUserRegUser = "/api.user.v1.User/RegUser"
const OperationUserSearchUserList = "/api.user.v1.User/SearchUserList"
const OperationUserSetMyAvatar = "/api.user.v1.User/SetMyAvatar"
const OperationUserSetMyNickName = "/api.user.v1.User/SetMyNickName"
const OperationUserSetSpaceNotify = "/api.user.v1.User/SetSpaceNotify"
const OperationUserSetSpaceOrder = "/api.user.v1.User/SetSpaceOrder"
const OperationUserSetTempConfig = "/api.user.v1.User/SetTempConfig"
const OperationUserSetThirdPlatformNotify = "/api.user.v1.User/SetThirdPlatformNotify"
const OperationUserSetUserConfig = "/api.user.v1.User/SetUserConfig"
const OperationUserUnbind = "/api.user.v1.User/Unbind"

type UserHTTPServer interface {
	AllSpaceProfile(context.Context, *AllSpaceProfileRequest) (*AllSpaceProfileReply, error)
	Bind(context.Context, *BindRequest) (*BindReply, error)
	Cancel(context.Context, *CancelRequest) (*CancelReply, error)
	ChangeMyPwd(context.Context, *ChangeMyPwdRequest) (*ChangeMyPwdReply, error)
	CheckUserName(context.Context, *CheckUserNameRequest) (*CheckUserNameReply, error)
	DelTempConfig(context.Context, *DelTempConfigRequest) (*DelTempConfigReply, error)
	GetMySpaceMemberInfo(context.Context, *GetMySpaceMemberInfoRequest) (*GetMySpaceMemberInfoReply, error)
	GetMyUserInfo(context.Context, *GetMyUserInfoRequest) (*GetMyUserInfoReply, error)
	GetTempConfig(context.Context, *GetTempConfigRequest) (*GetTempConfigReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	GetUserConfig(context.Context, *GetUserConfigRequest) (*GetUserConfigReply, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserReply, error)
	MyPendingWorkItem(context.Context, *MyPendingWorkItemRequest) (*MyPendingWorkItemReply, error)
	MyRelatedComment(context.Context, *MyRelatedCommentRequest) (*MyRelatedCommentReply, error)
	MyRelatedCommentByIds(context.Context, *MyRelatedCommentByIdsRequest) (*MyRelatedCommentByIdsReply, error)
	NotifyCount(context.Context, *NotifyCountRequest) (*NotifyCountReply, error)
	RegUser(context.Context, *RegUserRequest) (*comm.CommonReply, error)
	SearchUserList(context.Context, *SearchUserListRequest) (*SearchUserListReply, error)
	SetMyAvatar(context.Context, *SetMyAvatarRequest) (*SetMyAvatarReply, error)
	SetMyNickName(context.Context, *SetMyNickNameRquest) (*SetMyNickNameReply, error)
	SetSpaceNotify(context.Context, *SetSpaceNotifyRequest) (*SetSpaceNotifyReply, error)
	SetSpaceOrder(context.Context, *SetSpaceOrderRequest) (*SetSpaceOrderReply, error)
	SetTempConfig(context.Context, *SetTempConfigRequest) (*SetTempConfigReply, error)
	SetThirdPlatformNotify(context.Context, *SetThirdPlatformNotifyRequest) (*SetThirdPlatformNotifyReply, error)
	SetUserConfig(context.Context, *SetUserConfigRequest) (*SetUserConfigReply, error)
	Unbind(context.Context, *UnbindRequest) (*UnbindReply, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.GET("/user/get/{id}", _User_GetUser0_HTTP_Handler(srv))
	r.POST("/user/check_name", _User_CheckUserName0_HTTP_Handler(srv))
	r.POST("my/user/list/search", _User_SearchUserList0_HTTP_Handler(srv))
	r.GET("/user/list", _User_ListUser0_HTTP_Handler(srv))
	r.POST("/user/reg", _User_RegUser0_HTTP_Handler(srv))
	r.POST("/my/avatar/set", _User_SetMyAvatar0_HTTP_Handler(srv))
	r.POST("/my/info", _User_GetMyUserInfo0_HTTP_Handler(srv))
	r.POST("/my/nickname/set", _User_SetMyNickName0_HTTP_Handler(srv))
	r.POST("/my/pwd/change", _User_ChangeMyPwd0_HTTP_Handler(srv))
	r.POST("/my/space_memeber/info", _User_GetMySpaceMemberInfo0_HTTP_Handler(srv))
	r.POST("/my/bind", _User_Bind0_HTTP_Handler(srv))
	r.POST("/my/unbind", _User_Unbind0_HTTP_Handler(srv))
	r.POST("/my/cancel", _User_Cancel0_HTTP_Handler(srv))
	r.POST("/my/set_space_notify", _User_SetSpaceNotify0_HTTP_Handler(srv))
	r.POST("/my/set_space_order", _User_SetSpaceOrder0_HTTP_Handler(srv))
	r.POST("/my/pending_work_item", _User_MyPendingWorkItem0_HTTP_Handler(srv))
	r.POST("/my/related_comment_ids", _User_MyRelatedComment0_HTTP_Handler(srv))
	r.POST("/my/related_comment_by_ids", _User_MyRelatedCommentByIds0_HTTP_Handler(srv))
	r.POST("/my/notify_count", _User_NotifyCount0_HTTP_Handler(srv))
	r.POST("/my/get_temp_config", _User_GetTempConfig0_HTTP_Handler(srv))
	r.POST("/my/set_temp_config", _User_SetTempConfig0_HTTP_Handler(srv))
	r.POST("/my/del_temp_config", _User_DelTempConfig0_HTTP_Handler(srv))
	r.POST("/user/all_space_profile", _User_AllSpaceProfile0_HTTP_Handler(srv))
	r.POST("/my/get_user_config", _User_GetUserConfig0_HTTP_Handler(srv))
	r.POST("/my/set_user_config", _User_SetUserConfig0_HTTP_Handler(srv))
	r.POST("/my/set_third_platform_notify", _User_SetThirdPlatformNotify0_HTTP_Handler(srv))
}

func _User_GetUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_CheckUserName0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckUserNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCheckUserName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckUserName(ctx, req.(*CheckUserNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckUserNameReply)
		return ctx.Result(200, reply)
	}
}

func _User_SearchUserList0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchUserListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSearchUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchUserList(ctx, req.(*SearchUserListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchUserListReply)
		return ctx.Result(200, reply)
	}
}

func _User_ListUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserListUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*ListUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_RegUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRegUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegUser(ctx, req.(*RegUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*comm.CommonReply)
		return ctx.Result(200, reply)
	}
}

func _User_SetMyAvatar0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetMyAvatarRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSetMyAvatar)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetMyAvatar(ctx, req.(*SetMyAvatarRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetMyAvatarReply)
		return ctx.Result(200, reply)
	}
}

func _User_GetMyUserInfo0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMyUserInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetMyUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMyUserInfo(ctx, req.(*GetMyUserInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMyUserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _User_SetMyNickName0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetMyNickNameRquest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSetMyNickName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetMyNickName(ctx, req.(*SetMyNickNameRquest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetMyNickNameReply)
		return ctx.Result(200, reply)
	}
}

func _User_ChangeMyPwd0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangeMyPwdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserChangeMyPwd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeMyPwd(ctx, req.(*ChangeMyPwdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChangeMyPwdReply)
		return ctx.Result(200, reply)
	}
}

func _User_GetMySpaceMemberInfo0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMySpaceMemberInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetMySpaceMemberInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMySpaceMemberInfo(ctx, req.(*GetMySpaceMemberInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMySpaceMemberInfoReply)
		return ctx.Result(200, reply)
	}
}

func _User_Bind0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BindRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserBind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Bind(ctx, req.(*BindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BindReply)
		return ctx.Result(200, reply)
	}
}

func _User_Unbind0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnbindRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUnbind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Unbind(ctx, req.(*UnbindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnbindReply)
		return ctx.Result(200, reply)
	}
}

func _User_Cancel0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCancel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Cancel(ctx, req.(*CancelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelReply)
		return ctx.Result(200, reply)
	}
}

func _User_SetSpaceNotify0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSpaceNotifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSetSpaceNotify)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceNotify(ctx, req.(*SetSpaceNotifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSpaceNotifyReply)
		return ctx.Result(200, reply)
	}
}

func _User_SetSpaceOrder0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSpaceOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSetSpaceOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceOrder(ctx, req.(*SetSpaceOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSpaceOrderReply)
		return ctx.Result(200, reply)
	}
}

func _User_MyPendingWorkItem0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyPendingWorkItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserMyPendingWorkItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyPendingWorkItem(ctx, req.(*MyPendingWorkItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyPendingWorkItemReply)
		return ctx.Result(200, reply)
	}
}

func _User_MyRelatedComment0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyRelatedCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserMyRelatedComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyRelatedComment(ctx, req.(*MyRelatedCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyRelatedCommentReply)
		return ctx.Result(200, reply)
	}
}

func _User_MyRelatedCommentByIds0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyRelatedCommentByIdsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserMyRelatedCommentByIds)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyRelatedCommentByIds(ctx, req.(*MyRelatedCommentByIdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyRelatedCommentByIdsReply)
		return ctx.Result(200, reply)
	}
}

func _User_NotifyCount0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NotifyCountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserNotifyCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.NotifyCount(ctx, req.(*NotifyCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NotifyCountReply)
		return ctx.Result(200, reply)
	}
}

func _User_GetTempConfig0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTempConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetTempConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTempConfig(ctx, req.(*GetTempConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTempConfigReply)
		return ctx.Result(200, reply)
	}
}

func _User_SetTempConfig0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetTempConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSetTempConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetTempConfig(ctx, req.(*SetTempConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetTempConfigReply)
		return ctx.Result(200, reply)
	}
}

func _User_DelTempConfig0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelTempConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDelTempConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelTempConfig(ctx, req.(*DelTempConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelTempConfigReply)
		return ctx.Result(200, reply)
	}
}

func _User_AllSpaceProfile0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AllSpaceProfileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAllSpaceProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AllSpaceProfile(ctx, req.(*AllSpaceProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllSpaceProfileReply)
		return ctx.Result(200, reply)
	}
}

func _User_GetUserConfig0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUserConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserConfig(ctx, req.(*GetUserConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserConfigReply)
		return ctx.Result(200, reply)
	}
}

func _User_SetUserConfig0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSetUserConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserConfig(ctx, req.(*SetUserConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetUserConfigReply)
		return ctx.Result(200, reply)
	}
}

func _User_SetThirdPlatformNotify0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetThirdPlatformNotifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSetThirdPlatformNotify)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetThirdPlatformNotify(ctx, req.(*SetThirdPlatformNotifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetThirdPlatformNotifyReply)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	AllSpaceProfile(ctx context.Context, req *AllSpaceProfileRequest, opts ...http.CallOption) (rsp *AllSpaceProfileReply, err error)
	Bind(ctx context.Context, req *BindRequest, opts ...http.CallOption) (rsp *BindReply, err error)
	Cancel(ctx context.Context, req *CancelRequest, opts ...http.CallOption) (rsp *CancelReply, err error)
	ChangeMyPwd(ctx context.Context, req *ChangeMyPwdRequest, opts ...http.CallOption) (rsp *ChangeMyPwdReply, err error)
	CheckUserName(ctx context.Context, req *CheckUserNameRequest, opts ...http.CallOption) (rsp *CheckUserNameReply, err error)
	DelTempConfig(ctx context.Context, req *DelTempConfigRequest, opts ...http.CallOption) (rsp *DelTempConfigReply, err error)
	GetMySpaceMemberInfo(ctx context.Context, req *GetMySpaceMemberInfoRequest, opts ...http.CallOption) (rsp *GetMySpaceMemberInfoReply, err error)
	GetMyUserInfo(ctx context.Context, req *GetMyUserInfoRequest, opts ...http.CallOption) (rsp *GetMyUserInfoReply, err error)
	GetTempConfig(ctx context.Context, req *GetTempConfigRequest, opts ...http.CallOption) (rsp *GetTempConfigReply, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *GetUserReply, err error)
	GetUserConfig(ctx context.Context, req *GetUserConfigRequest, opts ...http.CallOption) (rsp *GetUserConfigReply, err error)
	ListUser(ctx context.Context, req *ListUserRequest, opts ...http.CallOption) (rsp *ListUserReply, err error)
	MyPendingWorkItem(ctx context.Context, req *MyPendingWorkItemRequest, opts ...http.CallOption) (rsp *MyPendingWorkItemReply, err error)
	MyRelatedComment(ctx context.Context, req *MyRelatedCommentRequest, opts ...http.CallOption) (rsp *MyRelatedCommentReply, err error)
	MyRelatedCommentByIds(ctx context.Context, req *MyRelatedCommentByIdsRequest, opts ...http.CallOption) (rsp *MyRelatedCommentByIdsReply, err error)
	NotifyCount(ctx context.Context, req *NotifyCountRequest, opts ...http.CallOption) (rsp *NotifyCountReply, err error)
	RegUser(ctx context.Context, req *RegUserRequest, opts ...http.CallOption) (rsp *comm.CommonReply, err error)
	SearchUserList(ctx context.Context, req *SearchUserListRequest, opts ...http.CallOption) (rsp *SearchUserListReply, err error)
	SetMyAvatar(ctx context.Context, req *SetMyAvatarRequest, opts ...http.CallOption) (rsp *SetMyAvatarReply, err error)
	SetMyNickName(ctx context.Context, req *SetMyNickNameRquest, opts ...http.CallOption) (rsp *SetMyNickNameReply, err error)
	SetSpaceNotify(ctx context.Context, req *SetSpaceNotifyRequest, opts ...http.CallOption) (rsp *SetSpaceNotifyReply, err error)
	SetSpaceOrder(ctx context.Context, req *SetSpaceOrderRequest, opts ...http.CallOption) (rsp *SetSpaceOrderReply, err error)
	SetTempConfig(ctx context.Context, req *SetTempConfigRequest, opts ...http.CallOption) (rsp *SetTempConfigReply, err error)
	SetThirdPlatformNotify(ctx context.Context, req *SetThirdPlatformNotifyRequest, opts ...http.CallOption) (rsp *SetThirdPlatformNotifyReply, err error)
	SetUserConfig(ctx context.Context, req *SetUserConfigRequest, opts ...http.CallOption) (rsp *SetUserConfigReply, err error)
	Unbind(ctx context.Context, req *UnbindRequest, opts ...http.CallOption) (rsp *UnbindReply, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) AllSpaceProfile(ctx context.Context, in *AllSpaceProfileRequest, opts ...http.CallOption) (*AllSpaceProfileReply, error) {
	var out AllSpaceProfileReply
	pattern := "/user/all_space_profile"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAllSpaceProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) Bind(ctx context.Context, in *BindRequest, opts ...http.CallOption) (*BindReply, error) {
	var out BindReply
	pattern := "/my/bind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserBind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) Cancel(ctx context.Context, in *CancelRequest, opts ...http.CallOption) (*CancelReply, error) {
	var out CancelReply
	pattern := "/my/cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserCancel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) ChangeMyPwd(ctx context.Context, in *ChangeMyPwdRequest, opts ...http.CallOption) (*ChangeMyPwdReply, error) {
	var out ChangeMyPwdReply
	pattern := "/my/pwd/change"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserChangeMyPwd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) CheckUserName(ctx context.Context, in *CheckUserNameRequest, opts ...http.CallOption) (*CheckUserNameReply, error) {
	var out CheckUserNameReply
	pattern := "/user/check_name"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserCheckUserName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) DelTempConfig(ctx context.Context, in *DelTempConfigRequest, opts ...http.CallOption) (*DelTempConfigReply, error) {
	var out DelTempConfigReply
	pattern := "/my/del_temp_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserDelTempConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetMySpaceMemberInfo(ctx context.Context, in *GetMySpaceMemberInfoRequest, opts ...http.CallOption) (*GetMySpaceMemberInfoReply, error) {
	var out GetMySpaceMemberInfoReply
	pattern := "/my/space_memeber/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserGetMySpaceMemberInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetMyUserInfo(ctx context.Context, in *GetMyUserInfoRequest, opts ...http.CallOption) (*GetMyUserInfoReply, error) {
	var out GetMyUserInfoReply
	pattern := "/my/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserGetMyUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetTempConfig(ctx context.Context, in *GetTempConfigRequest, opts ...http.CallOption) (*GetTempConfigReply, error) {
	var out GetTempConfigReply
	pattern := "/my/get_temp_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserGetTempConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/user/get/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetUserConfig(ctx context.Context, in *GetUserConfigRequest, opts ...http.CallOption) (*GetUserConfigReply, error) {
	var out GetUserConfigReply
	pattern := "/my/get_user_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserGetUserConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) ListUser(ctx context.Context, in *ListUserRequest, opts ...http.CallOption) (*ListUserReply, error) {
	var out ListUserReply
	pattern := "/user/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) MyPendingWorkItem(ctx context.Context, in *MyPendingWorkItemRequest, opts ...http.CallOption) (*MyPendingWorkItemReply, error) {
	var out MyPendingWorkItemReply
	pattern := "/my/pending_work_item"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserMyPendingWorkItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) MyRelatedComment(ctx context.Context, in *MyRelatedCommentRequest, opts ...http.CallOption) (*MyRelatedCommentReply, error) {
	var out MyRelatedCommentReply
	pattern := "/my/related_comment_ids"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserMyRelatedComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) MyRelatedCommentByIds(ctx context.Context, in *MyRelatedCommentByIdsRequest, opts ...http.CallOption) (*MyRelatedCommentByIdsReply, error) {
	var out MyRelatedCommentByIdsReply
	pattern := "/my/related_comment_by_ids"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserMyRelatedCommentByIds))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) NotifyCount(ctx context.Context, in *NotifyCountRequest, opts ...http.CallOption) (*NotifyCountReply, error) {
	var out NotifyCountReply
	pattern := "/my/notify_count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserNotifyCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) RegUser(ctx context.Context, in *RegUserRequest, opts ...http.CallOption) (*comm.CommonReply, error) {
	var out comm.CommonReply
	pattern := "/user/reg"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRegUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SearchUserList(ctx context.Context, in *SearchUserListRequest, opts ...http.CallOption) (*SearchUserListReply, error) {
	var out SearchUserListReply
	pattern := "my/user/list/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSearchUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetMyAvatar(ctx context.Context, in *SetMyAvatarRequest, opts ...http.CallOption) (*SetMyAvatarReply, error) {
	var out SetMyAvatarReply
	pattern := "/my/avatar/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSetMyAvatar))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetMyNickName(ctx context.Context, in *SetMyNickNameRquest, opts ...http.CallOption) (*SetMyNickNameReply, error) {
	var out SetMyNickNameReply
	pattern := "/my/nickname/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSetMyNickName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetSpaceNotify(ctx context.Context, in *SetSpaceNotifyRequest, opts ...http.CallOption) (*SetSpaceNotifyReply, error) {
	var out SetSpaceNotifyReply
	pattern := "/my/set_space_notify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSetSpaceNotify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetSpaceOrder(ctx context.Context, in *SetSpaceOrderRequest, opts ...http.CallOption) (*SetSpaceOrderReply, error) {
	var out SetSpaceOrderReply
	pattern := "/my/set_space_order"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSetSpaceOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetTempConfig(ctx context.Context, in *SetTempConfigRequest, opts ...http.CallOption) (*SetTempConfigReply, error) {
	var out SetTempConfigReply
	pattern := "/my/set_temp_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSetTempConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetThirdPlatformNotify(ctx context.Context, in *SetThirdPlatformNotifyRequest, opts ...http.CallOption) (*SetThirdPlatformNotifyReply, error) {
	var out SetThirdPlatformNotifyReply
	pattern := "/my/set_third_platform_notify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSetThirdPlatformNotify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetUserConfig(ctx context.Context, in *SetUserConfigRequest, opts ...http.CallOption) (*SetUserConfigReply, error) {
	var out SetUserConfigReply
	pattern := "/my/set_user_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSetUserConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) Unbind(ctx context.Context, in *UnbindRequest, opts ...http.CallOption) (*UnbindReply, error) {
	var out UnbindReply
	pattern := "/my/unbind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUnbind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
