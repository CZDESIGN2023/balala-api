// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: work_item_status/v1/work_item_status.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWorkItemStatusCreateSpaceWorkItemStatus = "/api.work_item_status.v1.WorkItemStatus/CreateSpaceWorkItemStatus"
const OperationWorkItemStatusDelSpaceWorkItemStatus = "/api.work_item_status.v1.WorkItemStatus/DelSpaceWorkItemStatus"
const OperationWorkItemStatusGetTemplateRelationCount = "/api.work_item_status.v1.WorkItemStatus/GetTemplateRelationCount"
const OperationWorkItemStatusGetWorkItemRelationCount = "/api.work_item_status.v1.WorkItemStatus/GetWorkItemRelationCount"
const OperationWorkItemStatusQSpaceWorkItemStatusById = "/api.work_item_status.v1.WorkItemStatus/QSpaceWorkItemStatusById"
const OperationWorkItemStatusQSpaceWorkItemStatusList = "/api.work_item_status.v1.WorkItemStatus/QSpaceWorkItemStatusList"
const OperationWorkItemStatusSetSpaceWorkItemStatusName = "/api.work_item_status.v1.WorkItemStatus/SetSpaceWorkItemStatusName"
const OperationWorkItemStatusSetSpaceWorkItemStatusRanking = "/api.work_item_status.v1.WorkItemStatus/SetSpaceWorkItemStatusRanking"

type WorkItemStatusHTTPServer interface {
	CreateSpaceWorkItemStatus(context.Context, *CreateSpaceWorkItemStatusRequest) (*CreateSpaceWorkItemStatusReply, error)
	DelSpaceWorkItemStatus(context.Context, *DelSpaceWorkItemStatusRequest) (*DelSpaceWorkItemStatusReply, error)
	GetTemplateRelationCount(context.Context, *GetTemplateRelationCountRequest) (*GetTemplateRelationCountReply, error)
	GetWorkItemRelationCount(context.Context, *GetWorkItemRelationCountRequest) (*GetWorkItemRelationCountReply, error)
	QSpaceWorkItemStatusById(context.Context, *QSpaceWorkItemStatusByIdRequest) (*QSpaceWorkItemStatusByIdReply, error)
	QSpaceWorkItemStatusList(context.Context, *SpaceWorkItemStatusListRequest) (*SpaceWorkItemStatusListReply, error)
	SetSpaceWorkItemStatusName(context.Context, *SetSpaceWorkItemStatusNameRequest) (*SetSpaceWorkItemStatusNameReply, error)
	SetSpaceWorkItemStatusRanking(context.Context, *SetSpaceWorkItemStatusRankingRequest) (*SetSpaceWorkItemStatusRankingReply, error)
}

func RegisterWorkItemStatusHTTPServer(s *http.Server, srv WorkItemStatusHTTPServer) {
	r := s.Route("/")
	r.POST("/my/space/work_item_status/list", _WorkItemStatus_QSpaceWorkItemStatusList0_HTTP_Handler(srv))
	r.POST("/my/space/work_item_status/ranking/set", _WorkItemStatus_SetSpaceWorkItemStatusRanking0_HTTP_Handler(srv))
	r.POST("/my/space/work_item_status/name/set", _WorkItemStatus_SetSpaceWorkItemStatusName0_HTTP_Handler(srv))
	r.POST("/my/space/work_item_status/del", _WorkItemStatus_DelSpaceWorkItemStatus0_HTTP_Handler(srv))
	r.POST("/my/space/work_item_status/create", _WorkItemStatus_CreateSpaceWorkItemStatus0_HTTP_Handler(srv))
	r.POST("/my/space/work_item_status/by_id", _WorkItemStatus_QSpaceWorkItemStatusById0_HTTP_Handler(srv))
	r.POST("/my/space/work_item_status/work_item_relation_count", _WorkItemStatus_GetWorkItemRelationCount2_HTTP_Handler(srv))
	r.POST("/my/space/work_item_status/template_relation_count", _WorkItemStatus_GetTemplateRelationCount1_HTTP_Handler(srv))
}

func _WorkItemStatus_QSpaceWorkItemStatusList0_HTTP_Handler(srv WorkItemStatusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceWorkItemStatusListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkItemStatusQSpaceWorkItemStatusList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QSpaceWorkItemStatusList(ctx, req.(*SpaceWorkItemStatusListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceWorkItemStatusListReply)
		return ctx.Result(200, reply)
	}
}

func _WorkItemStatus_SetSpaceWorkItemStatusRanking0_HTTP_Handler(srv WorkItemStatusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSpaceWorkItemStatusRankingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkItemStatusSetSpaceWorkItemStatusRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceWorkItemStatusRanking(ctx, req.(*SetSpaceWorkItemStatusRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSpaceWorkItemStatusRankingReply)
		return ctx.Result(200, reply)
	}
}

func _WorkItemStatus_SetSpaceWorkItemStatusName0_HTTP_Handler(srv WorkItemStatusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSpaceWorkItemStatusNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkItemStatusSetSpaceWorkItemStatusName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceWorkItemStatusName(ctx, req.(*SetSpaceWorkItemStatusNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSpaceWorkItemStatusNameReply)
		return ctx.Result(200, reply)
	}
}

func _WorkItemStatus_DelSpaceWorkItemStatus0_HTTP_Handler(srv WorkItemStatusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelSpaceWorkItemStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkItemStatusDelSpaceWorkItemStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelSpaceWorkItemStatus(ctx, req.(*DelSpaceWorkItemStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelSpaceWorkItemStatusReply)
		return ctx.Result(200, reply)
	}
}

func _WorkItemStatus_CreateSpaceWorkItemStatus0_HTTP_Handler(srv WorkItemStatusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSpaceWorkItemStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkItemStatusCreateSpaceWorkItemStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSpaceWorkItemStatus(ctx, req.(*CreateSpaceWorkItemStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSpaceWorkItemStatusReply)
		return ctx.Result(200, reply)
	}
}

func _WorkItemStatus_QSpaceWorkItemStatusById0_HTTP_Handler(srv WorkItemStatusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QSpaceWorkItemStatusByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkItemStatusQSpaceWorkItemStatusById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QSpaceWorkItemStatusById(ctx, req.(*QSpaceWorkItemStatusByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QSpaceWorkItemStatusByIdReply)
		return ctx.Result(200, reply)
	}
}

func _WorkItemStatus_GetWorkItemRelationCount2_HTTP_Handler(srv WorkItemStatusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWorkItemRelationCountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkItemStatusGetWorkItemRelationCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWorkItemRelationCount(ctx, req.(*GetWorkItemRelationCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWorkItemRelationCountReply)
		return ctx.Result(200, reply)
	}
}

func _WorkItemStatus_GetTemplateRelationCount1_HTTP_Handler(srv WorkItemStatusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTemplateRelationCountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkItemStatusGetTemplateRelationCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTemplateRelationCount(ctx, req.(*GetTemplateRelationCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTemplateRelationCountReply)
		return ctx.Result(200, reply)
	}
}

type WorkItemStatusHTTPClient interface {
	CreateSpaceWorkItemStatus(ctx context.Context, req *CreateSpaceWorkItemStatusRequest, opts ...http.CallOption) (rsp *CreateSpaceWorkItemStatusReply, err error)
	DelSpaceWorkItemStatus(ctx context.Context, req *DelSpaceWorkItemStatusRequest, opts ...http.CallOption) (rsp *DelSpaceWorkItemStatusReply, err error)
	GetTemplateRelationCount(ctx context.Context, req *GetTemplateRelationCountRequest, opts ...http.CallOption) (rsp *GetTemplateRelationCountReply, err error)
	GetWorkItemRelationCount(ctx context.Context, req *GetWorkItemRelationCountRequest, opts ...http.CallOption) (rsp *GetWorkItemRelationCountReply, err error)
	QSpaceWorkItemStatusById(ctx context.Context, req *QSpaceWorkItemStatusByIdRequest, opts ...http.CallOption) (rsp *QSpaceWorkItemStatusByIdReply, err error)
	QSpaceWorkItemStatusList(ctx context.Context, req *SpaceWorkItemStatusListRequest, opts ...http.CallOption) (rsp *SpaceWorkItemStatusListReply, err error)
	SetSpaceWorkItemStatusName(ctx context.Context, req *SetSpaceWorkItemStatusNameRequest, opts ...http.CallOption) (rsp *SetSpaceWorkItemStatusNameReply, err error)
	SetSpaceWorkItemStatusRanking(ctx context.Context, req *SetSpaceWorkItemStatusRankingRequest, opts ...http.CallOption) (rsp *SetSpaceWorkItemStatusRankingReply, err error)
}

type WorkItemStatusHTTPClientImpl struct {
	cc *http.Client
}

func NewWorkItemStatusHTTPClient(client *http.Client) WorkItemStatusHTTPClient {
	return &WorkItemStatusHTTPClientImpl{client}
}

func (c *WorkItemStatusHTTPClientImpl) CreateSpaceWorkItemStatus(ctx context.Context, in *CreateSpaceWorkItemStatusRequest, opts ...http.CallOption) (*CreateSpaceWorkItemStatusReply, error) {
	var out CreateSpaceWorkItemStatusReply
	pattern := "/my/space/work_item_status/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkItemStatusCreateSpaceWorkItemStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkItemStatusHTTPClientImpl) DelSpaceWorkItemStatus(ctx context.Context, in *DelSpaceWorkItemStatusRequest, opts ...http.CallOption) (*DelSpaceWorkItemStatusReply, error) {
	var out DelSpaceWorkItemStatusReply
	pattern := "/my/space/work_item_status/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkItemStatusDelSpaceWorkItemStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkItemStatusHTTPClientImpl) GetTemplateRelationCount(ctx context.Context, in *GetTemplateRelationCountRequest, opts ...http.CallOption) (*GetTemplateRelationCountReply, error) {
	var out GetTemplateRelationCountReply
	pattern := "/my/space/work_item_status/template_relation_count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkItemStatusGetTemplateRelationCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkItemStatusHTTPClientImpl) GetWorkItemRelationCount(ctx context.Context, in *GetWorkItemRelationCountRequest, opts ...http.CallOption) (*GetWorkItemRelationCountReply, error) {
	var out GetWorkItemRelationCountReply
	pattern := "/my/space/work_item_status/work_item_relation_count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkItemStatusGetWorkItemRelationCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkItemStatusHTTPClientImpl) QSpaceWorkItemStatusById(ctx context.Context, in *QSpaceWorkItemStatusByIdRequest, opts ...http.CallOption) (*QSpaceWorkItemStatusByIdReply, error) {
	var out QSpaceWorkItemStatusByIdReply
	pattern := "/my/space/work_item_status/by_id"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkItemStatusQSpaceWorkItemStatusById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkItemStatusHTTPClientImpl) QSpaceWorkItemStatusList(ctx context.Context, in *SpaceWorkItemStatusListRequest, opts ...http.CallOption) (*SpaceWorkItemStatusListReply, error) {
	var out SpaceWorkItemStatusListReply
	pattern := "/my/space/work_item_status/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkItemStatusQSpaceWorkItemStatusList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkItemStatusHTTPClientImpl) SetSpaceWorkItemStatusName(ctx context.Context, in *SetSpaceWorkItemStatusNameRequest, opts ...http.CallOption) (*SetSpaceWorkItemStatusNameReply, error) {
	var out SetSpaceWorkItemStatusNameReply
	pattern := "/my/space/work_item_status/name/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkItemStatusSetSpaceWorkItemStatusName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkItemStatusHTTPClientImpl) SetSpaceWorkItemStatusRanking(ctx context.Context, in *SetSpaceWorkItemStatusRankingRequest, opts ...http.CallOption) (*SetSpaceWorkItemStatusRankingReply, error) {
	var out SetSpaceWorkItemStatusRankingReply
	pattern := "/my/space/work_item_status/ranking/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkItemStatusSetSpaceWorkItemStatusRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
