// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: space_tag/v1/space_tag.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSpaceTagCreateSpaceTag = "/api.space.v1.space_tag/CreateSpaceTag"
const OperationSpaceTagDelSpaceTag = "/api.space.v1.space_tag/DelSpaceTag"
const OperationSpaceTagGetSpaceTagListV2 = "/api.space.v1.space_tag/GetSpaceTagListV2"
const OperationSpaceTagModifySpaceTagName = "/api.space.v1.space_tag/ModifySpaceTagName"
const OperationSpaceTagSetSpaceTagOrder = "/api.space.v1.space_tag/SetSpaceTagOrder"

type SpaceTagHTTPServer interface {
	CreateSpaceTag(context.Context, *CreateSpaceTagRequest) (*CreateSpaceTagReply, error)
	DelSpaceTag(context.Context, *DelSpaceTagRequest) (*DelSpaceTagReply, error)
	GetSpaceTagListV2(context.Context, *GetSpaceTagListRequestV2) (*GetSpaceTagListReplyV2, error)
	ModifySpaceTagName(context.Context, *ModifySpaceTagNameRequest) (*ModifySpaceTagNameReply, error)
	SetSpaceTagOrder(context.Context, *SetSpaceTagOrderRequest) (*SetSpaceTagOrderReply, error)
}

func RegisterSpaceTagHTTPServer(s *http.Server, srv SpaceTagHTTPServer) {
	r := s.Route("/")
	r.POST("/my/space/tag/create", _SpaceTag_CreateSpaceTag0_HTTP_Handler(srv))
	r.POST("/my/space/tag/modify/name", _SpaceTag_ModifySpaceTagName0_HTTP_Handler(srv))
	r.POST("/my/space/tag/del", _SpaceTag_DelSpaceTag0_HTTP_Handler(srv))
	r.POST("/v2/my/space/tag/list", _SpaceTag_GetSpaceTagListV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/tag/set_order", _SpaceTag_SetSpaceTagOrder0_HTTP_Handler(srv))
}

func _SpaceTag_CreateSpaceTag0_HTTP_Handler(srv SpaceTagHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSpaceTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceTagCreateSpaceTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSpaceTag(ctx, req.(*CreateSpaceTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSpaceTagReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceTag_ModifySpaceTagName0_HTTP_Handler(srv SpaceTagHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifySpaceTagNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceTagModifySpaceTagName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifySpaceTagName(ctx, req.(*ModifySpaceTagNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifySpaceTagNameReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceTag_DelSpaceTag0_HTTP_Handler(srv SpaceTagHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelSpaceTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceTagDelSpaceTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelSpaceTag(ctx, req.(*DelSpaceTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelSpaceTagReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceTag_GetSpaceTagListV20_HTTP_Handler(srv SpaceTagHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSpaceTagListRequestV2
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceTagGetSpaceTagListV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSpaceTagListV2(ctx, req.(*GetSpaceTagListRequestV2))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSpaceTagListReplyV2)
		return ctx.Result(200, reply)
	}
}

func _SpaceTag_SetSpaceTagOrder0_HTTP_Handler(srv SpaceTagHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSpaceTagOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceTagSetSpaceTagOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceTagOrder(ctx, req.(*SetSpaceTagOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSpaceTagOrderReply)
		return ctx.Result(200, reply)
	}
}

type SpaceTagHTTPClient interface {
	CreateSpaceTag(ctx context.Context, req *CreateSpaceTagRequest, opts ...http.CallOption) (rsp *CreateSpaceTagReply, err error)
	DelSpaceTag(ctx context.Context, req *DelSpaceTagRequest, opts ...http.CallOption) (rsp *DelSpaceTagReply, err error)
	GetSpaceTagListV2(ctx context.Context, req *GetSpaceTagListRequestV2, opts ...http.CallOption) (rsp *GetSpaceTagListReplyV2, err error)
	ModifySpaceTagName(ctx context.Context, req *ModifySpaceTagNameRequest, opts ...http.CallOption) (rsp *ModifySpaceTagNameReply, err error)
	SetSpaceTagOrder(ctx context.Context, req *SetSpaceTagOrderRequest, opts ...http.CallOption) (rsp *SetSpaceTagOrderReply, err error)
}

type SpaceTagHTTPClientImpl struct {
	cc *http.Client
}

func NewSpaceTagHTTPClient(client *http.Client) SpaceTagHTTPClient {
	return &SpaceTagHTTPClientImpl{client}
}

func (c *SpaceTagHTTPClientImpl) CreateSpaceTag(ctx context.Context, in *CreateSpaceTagRequest, opts ...http.CallOption) (*CreateSpaceTagReply, error) {
	var out CreateSpaceTagReply
	pattern := "/my/space/tag/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceTagCreateSpaceTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceTagHTTPClientImpl) DelSpaceTag(ctx context.Context, in *DelSpaceTagRequest, opts ...http.CallOption) (*DelSpaceTagReply, error) {
	var out DelSpaceTagReply
	pattern := "/my/space/tag/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceTagDelSpaceTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceTagHTTPClientImpl) GetSpaceTagListV2(ctx context.Context, in *GetSpaceTagListRequestV2, opts ...http.CallOption) (*GetSpaceTagListReplyV2, error) {
	var out GetSpaceTagListReplyV2
	pattern := "/v2/my/space/tag/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceTagGetSpaceTagListV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceTagHTTPClientImpl) ModifySpaceTagName(ctx context.Context, in *ModifySpaceTagNameRequest, opts ...http.CallOption) (*ModifySpaceTagNameReply, error) {
	var out ModifySpaceTagNameReply
	pattern := "/my/space/tag/modify/name"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceTagModifySpaceTagName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceTagHTTPClientImpl) SetSpaceTagOrder(ctx context.Context, in *SetSpaceTagOrderRequest, opts ...http.CallOption) (*SetSpaceTagOrderReply, error) {
	var out SetSpaceTagOrderReply
	pattern := "/v2/my/space/tag/set_order"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceTagSetSpaceTagOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
