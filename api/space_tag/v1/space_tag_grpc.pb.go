// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: space_tag/v1/space_tag.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SpaceTag_CreateSpaceTag_FullMethodName     = "/api.space.v1.space_tag/CreateSpaceTag"
	SpaceTag_ModifySpaceTagName_FullMethodName = "/api.space.v1.space_tag/ModifySpaceTagName"
	SpaceTag_DelSpaceTag_FullMethodName        = "/api.space.v1.space_tag/DelSpaceTag"
	SpaceTag_GetSpaceTagListV2_FullMethodName  = "/api.space.v1.space_tag/GetSpaceTagListV2"
	SpaceTag_SetSpaceTagOrder_FullMethodName   = "/api.space.v1.space_tag/SetSpaceTagOrder"
)

// SpaceTagClient is the client API for SpaceTag service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpaceTagClient interface {
	CreateSpaceTag(ctx context.Context, in *CreateSpaceTagRequest, opts ...grpc.CallOption) (*CreateSpaceTagReply, error)
	ModifySpaceTagName(ctx context.Context, in *ModifySpaceTagNameRequest, opts ...grpc.CallOption) (*ModifySpaceTagNameReply, error)
	DelSpaceTag(ctx context.Context, in *DelSpaceTagRequest, opts ...grpc.CallOption) (*DelSpaceTagReply, error)
	GetSpaceTagListV2(ctx context.Context, in *GetSpaceTagListRequestV2, opts ...grpc.CallOption) (*GetSpaceTagListReplyV2, error)
	SetSpaceTagOrder(ctx context.Context, in *SetSpaceTagOrderRequest, opts ...grpc.CallOption) (*SetSpaceTagOrderReply, error)
}

type spaceTagClient struct {
	cc grpc.ClientConnInterface
}

func NewSpaceTagClient(cc grpc.ClientConnInterface) SpaceTagClient {
	return &spaceTagClient{cc}
}

func (c *spaceTagClient) CreateSpaceTag(ctx context.Context, in *CreateSpaceTagRequest, opts ...grpc.CallOption) (*CreateSpaceTagReply, error) {
	out := new(CreateSpaceTagReply)
	err := c.cc.Invoke(ctx, SpaceTag_CreateSpaceTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceTagClient) ModifySpaceTagName(ctx context.Context, in *ModifySpaceTagNameRequest, opts ...grpc.CallOption) (*ModifySpaceTagNameReply, error) {
	out := new(ModifySpaceTagNameReply)
	err := c.cc.Invoke(ctx, SpaceTag_ModifySpaceTagName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceTagClient) DelSpaceTag(ctx context.Context, in *DelSpaceTagRequest, opts ...grpc.CallOption) (*DelSpaceTagReply, error) {
	out := new(DelSpaceTagReply)
	err := c.cc.Invoke(ctx, SpaceTag_DelSpaceTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceTagClient) GetSpaceTagListV2(ctx context.Context, in *GetSpaceTagListRequestV2, opts ...grpc.CallOption) (*GetSpaceTagListReplyV2, error) {
	out := new(GetSpaceTagListReplyV2)
	err := c.cc.Invoke(ctx, SpaceTag_GetSpaceTagListV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceTagClient) SetSpaceTagOrder(ctx context.Context, in *SetSpaceTagOrderRequest, opts ...grpc.CallOption) (*SetSpaceTagOrderReply, error) {
	out := new(SetSpaceTagOrderReply)
	err := c.cc.Invoke(ctx, SpaceTag_SetSpaceTagOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceTagServer is the server API for SpaceTag service.
// All implementations must embed UnimplementedSpaceTagServer
// for forward compatibility
type SpaceTagServer interface {
	CreateSpaceTag(context.Context, *CreateSpaceTagRequest) (*CreateSpaceTagReply, error)
	ModifySpaceTagName(context.Context, *ModifySpaceTagNameRequest) (*ModifySpaceTagNameReply, error)
	DelSpaceTag(context.Context, *DelSpaceTagRequest) (*DelSpaceTagReply, error)
	GetSpaceTagListV2(context.Context, *GetSpaceTagListRequestV2) (*GetSpaceTagListReplyV2, error)
	SetSpaceTagOrder(context.Context, *SetSpaceTagOrderRequest) (*SetSpaceTagOrderReply, error)
	mustEmbedUnimplementedSpaceTagServer()
}

// UnimplementedSpaceTagServer must be embedded to have forward compatible implementations.
type UnimplementedSpaceTagServer struct {
}

func (UnimplementedSpaceTagServer) CreateSpaceTag(context.Context, *CreateSpaceTagRequest) (*CreateSpaceTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpaceTag not implemented")
}
func (UnimplementedSpaceTagServer) ModifySpaceTagName(context.Context, *ModifySpaceTagNameRequest) (*ModifySpaceTagNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySpaceTagName not implemented")
}
func (UnimplementedSpaceTagServer) DelSpaceTag(context.Context, *DelSpaceTagRequest) (*DelSpaceTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSpaceTag not implemented")
}
func (UnimplementedSpaceTagServer) GetSpaceTagListV2(context.Context, *GetSpaceTagListRequestV2) (*GetSpaceTagListReplyV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceTagListV2 not implemented")
}
func (UnimplementedSpaceTagServer) SetSpaceTagOrder(context.Context, *SetSpaceTagOrderRequest) (*SetSpaceTagOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpaceTagOrder not implemented")
}
func (UnimplementedSpaceTagServer) mustEmbedUnimplementedSpaceTagServer() {}

// UnsafeSpaceTagServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpaceTagServer will
// result in compilation errors.
type UnsafeSpaceTagServer interface {
	mustEmbedUnimplementedSpaceTagServer()
}

func RegisterSpaceTagServer(s grpc.ServiceRegistrar, srv SpaceTagServer) {
	s.RegisterService(&SpaceTag_ServiceDesc, srv)
}

func _SpaceTag_CreateSpaceTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceTagServer).CreateSpaceTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceTag_CreateSpaceTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceTagServer).CreateSpaceTag(ctx, req.(*CreateSpaceTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceTag_ModifySpaceTagName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySpaceTagNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceTagServer).ModifySpaceTagName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceTag_ModifySpaceTagName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceTagServer).ModifySpaceTagName(ctx, req.(*ModifySpaceTagNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceTag_DelSpaceTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSpaceTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceTagServer).DelSpaceTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceTag_DelSpaceTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceTagServer).DelSpaceTag(ctx, req.(*DelSpaceTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceTag_GetSpaceTagListV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceTagListRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceTagServer).GetSpaceTagListV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceTag_GetSpaceTagListV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceTagServer).GetSpaceTagListV2(ctx, req.(*GetSpaceTagListRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceTag_SetSpaceTagOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSpaceTagOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceTagServer).SetSpaceTagOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceTag_SetSpaceTagOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceTagServer).SetSpaceTagOrder(ctx, req.(*SetSpaceTagOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpaceTag_ServiceDesc is the grpc.ServiceDesc for SpaceTag service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpaceTag_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.space.v1.space_tag",
	HandlerType: (*SpaceTagServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpaceTag",
			Handler:    _SpaceTag_CreateSpaceTag_Handler,
		},
		{
			MethodName: "ModifySpaceTagName",
			Handler:    _SpaceTag_ModifySpaceTagName_Handler,
		},
		{
			MethodName: "DelSpaceTag",
			Handler:    _SpaceTag_DelSpaceTag_Handler,
		},
		{
			MethodName: "GetSpaceTagListV2",
			Handler:    _SpaceTag_GetSpaceTagListV2_Handler,
		},
		{
			MethodName: "SetSpaceTagOrder",
			Handler:    _SpaceTag_SetSpaceTagOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "space_tag/v1/space_tag.proto",
}
