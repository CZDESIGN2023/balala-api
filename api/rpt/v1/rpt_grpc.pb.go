// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: rpt/v1/rpt.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Rpt_SearchRptVersionWitem_FullMethodName    = "/api.rpt.v1.rpt/SearchRptVersionWitem"
	Rpt_SearchRptMemberWitem_FullMethodName     = "/api.rpt.v1.rpt/SearchRptMemberWitem"
	Rpt_DashboardRptSpaceWitem_FullMethodName   = "/api.rpt.v1.rpt/DashboardRptSpaceWitem"
	Rpt_DashboardRptMemberWitem_FullMethodName  = "/api.rpt.v1.rpt/DashboardRptMemberWitem"
	Rpt_DashboardSpaceList_FullMethodName       = "/api.rpt.v1.rpt/DashboardSpaceList"
	Rpt_DashboardSpaceIncrWitem_FullMethodName  = "/api.rpt.v1.rpt/DashboardSpaceIncrWitem"
	Rpt_DashboardMemberIncrWitem_FullMethodName = "/api.rpt.v1.rpt/DashboardMemberIncrWitem"
)

// RptClient is the client API for Rpt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RptClient interface {
	SearchRptVersionWitem(ctx context.Context, in *SearchRptVersionWitemRequest, opts ...grpc.CallOption) (*SearchRptVersionWitemReply, error)
	SearchRptMemberWitem(ctx context.Context, in *SearchRptMemberWitemRequest, opts ...grpc.CallOption) (*SearchRptMemberWitemReply, error)
	DashboardRptSpaceWitem(ctx context.Context, in *DashboardRptSpaceWitemRequest, opts ...grpc.CallOption) (*DashboardRptSpaceWitemReply, error)
	DashboardRptMemberWitem(ctx context.Context, in *DashboardRptMemberWitemRequest, opts ...grpc.CallOption) (*DashboardRptMemberWitemReply, error)
	DashboardSpaceList(ctx context.Context, in *DashboardSpaceListRequest, opts ...grpc.CallOption) (*DashboardSpaceListReply, error)
	DashboardSpaceIncrWitem(ctx context.Context, in *DashboardSpaceIncrWitemRequest, opts ...grpc.CallOption) (*DashboardSpaceIncrWitemReply, error)
	DashboardMemberIncrWitem(ctx context.Context, in *DashboardMemberIncrWitemRequest, opts ...grpc.CallOption) (*DashboardMemberIncrWitemReply, error)
}

type rptClient struct {
	cc grpc.ClientConnInterface
}

func NewRptClient(cc grpc.ClientConnInterface) RptClient {
	return &rptClient{cc}
}

func (c *rptClient) SearchRptVersionWitem(ctx context.Context, in *SearchRptVersionWitemRequest, opts ...grpc.CallOption) (*SearchRptVersionWitemReply, error) {
	out := new(SearchRptVersionWitemReply)
	err := c.cc.Invoke(ctx, Rpt_SearchRptVersionWitem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rptClient) SearchRptMemberWitem(ctx context.Context, in *SearchRptMemberWitemRequest, opts ...grpc.CallOption) (*SearchRptMemberWitemReply, error) {
	out := new(SearchRptMemberWitemReply)
	err := c.cc.Invoke(ctx, Rpt_SearchRptMemberWitem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rptClient) DashboardRptSpaceWitem(ctx context.Context, in *DashboardRptSpaceWitemRequest, opts ...grpc.CallOption) (*DashboardRptSpaceWitemReply, error) {
	out := new(DashboardRptSpaceWitemReply)
	err := c.cc.Invoke(ctx, Rpt_DashboardRptSpaceWitem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rptClient) DashboardRptMemberWitem(ctx context.Context, in *DashboardRptMemberWitemRequest, opts ...grpc.CallOption) (*DashboardRptMemberWitemReply, error) {
	out := new(DashboardRptMemberWitemReply)
	err := c.cc.Invoke(ctx, Rpt_DashboardRptMemberWitem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rptClient) DashboardSpaceList(ctx context.Context, in *DashboardSpaceListRequest, opts ...grpc.CallOption) (*DashboardSpaceListReply, error) {
	out := new(DashboardSpaceListReply)
	err := c.cc.Invoke(ctx, Rpt_DashboardSpaceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rptClient) DashboardSpaceIncrWitem(ctx context.Context, in *DashboardSpaceIncrWitemRequest, opts ...grpc.CallOption) (*DashboardSpaceIncrWitemReply, error) {
	out := new(DashboardSpaceIncrWitemReply)
	err := c.cc.Invoke(ctx, Rpt_DashboardSpaceIncrWitem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rptClient) DashboardMemberIncrWitem(ctx context.Context, in *DashboardMemberIncrWitemRequest, opts ...grpc.CallOption) (*DashboardMemberIncrWitemReply, error) {
	out := new(DashboardMemberIncrWitemReply)
	err := c.cc.Invoke(ctx, Rpt_DashboardMemberIncrWitem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RptServer is the server API for Rpt service.
// All implementations must embed UnimplementedRptServer
// for forward compatibility
type RptServer interface {
	SearchRptVersionWitem(context.Context, *SearchRptVersionWitemRequest) (*SearchRptVersionWitemReply, error)
	SearchRptMemberWitem(context.Context, *SearchRptMemberWitemRequest) (*SearchRptMemberWitemReply, error)
	DashboardRptSpaceWitem(context.Context, *DashboardRptSpaceWitemRequest) (*DashboardRptSpaceWitemReply, error)
	DashboardRptMemberWitem(context.Context, *DashboardRptMemberWitemRequest) (*DashboardRptMemberWitemReply, error)
	DashboardSpaceList(context.Context, *DashboardSpaceListRequest) (*DashboardSpaceListReply, error)
	DashboardSpaceIncrWitem(context.Context, *DashboardSpaceIncrWitemRequest) (*DashboardSpaceIncrWitemReply, error)
	DashboardMemberIncrWitem(context.Context, *DashboardMemberIncrWitemRequest) (*DashboardMemberIncrWitemReply, error)
	mustEmbedUnimplementedRptServer()
}

// UnimplementedRptServer must be embedded to have forward compatible implementations.
type UnimplementedRptServer struct {
}

func (UnimplementedRptServer) SearchRptVersionWitem(context.Context, *SearchRptVersionWitemRequest) (*SearchRptVersionWitemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRptVersionWitem not implemented")
}
func (UnimplementedRptServer) SearchRptMemberWitem(context.Context, *SearchRptMemberWitemRequest) (*SearchRptMemberWitemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRptMemberWitem not implemented")
}
func (UnimplementedRptServer) DashboardRptSpaceWitem(context.Context, *DashboardRptSpaceWitemRequest) (*DashboardRptSpaceWitemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashboardRptSpaceWitem not implemented")
}
func (UnimplementedRptServer) DashboardRptMemberWitem(context.Context, *DashboardRptMemberWitemRequest) (*DashboardRptMemberWitemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashboardRptMemberWitem not implemented")
}
func (UnimplementedRptServer) DashboardSpaceList(context.Context, *DashboardSpaceListRequest) (*DashboardSpaceListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashboardSpaceList not implemented")
}
func (UnimplementedRptServer) DashboardSpaceIncrWitem(context.Context, *DashboardSpaceIncrWitemRequest) (*DashboardSpaceIncrWitemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashboardSpaceIncrWitem not implemented")
}
func (UnimplementedRptServer) DashboardMemberIncrWitem(context.Context, *DashboardMemberIncrWitemRequest) (*DashboardMemberIncrWitemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DashboardMemberIncrWitem not implemented")
}
func (UnimplementedRptServer) mustEmbedUnimplementedRptServer() {}

// UnsafeRptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RptServer will
// result in compilation errors.
type UnsafeRptServer interface {
	mustEmbedUnimplementedRptServer()
}

func RegisterRptServer(s grpc.ServiceRegistrar, srv RptServer) {
	s.RegisterService(&Rpt_ServiceDesc, srv)
}

func _Rpt_SearchRptVersionWitem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRptVersionWitemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RptServer).SearchRptVersionWitem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpt_SearchRptVersionWitem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RptServer).SearchRptVersionWitem(ctx, req.(*SearchRptVersionWitemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpt_SearchRptMemberWitem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRptMemberWitemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RptServer).SearchRptMemberWitem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpt_SearchRptMemberWitem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RptServer).SearchRptMemberWitem(ctx, req.(*SearchRptMemberWitemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpt_DashboardRptSpaceWitem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardRptSpaceWitemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RptServer).DashboardRptSpaceWitem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpt_DashboardRptSpaceWitem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RptServer).DashboardRptSpaceWitem(ctx, req.(*DashboardRptSpaceWitemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpt_DashboardRptMemberWitem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardRptMemberWitemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RptServer).DashboardRptMemberWitem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpt_DashboardRptMemberWitem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RptServer).DashboardRptMemberWitem(ctx, req.(*DashboardRptMemberWitemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpt_DashboardSpaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardSpaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RptServer).DashboardSpaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpt_DashboardSpaceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RptServer).DashboardSpaceList(ctx, req.(*DashboardSpaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpt_DashboardSpaceIncrWitem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardSpaceIncrWitemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RptServer).DashboardSpaceIncrWitem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpt_DashboardSpaceIncrWitem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RptServer).DashboardSpaceIncrWitem(ctx, req.(*DashboardSpaceIncrWitemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpt_DashboardMemberIncrWitem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardMemberIncrWitemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RptServer).DashboardMemberIncrWitem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpt_DashboardMemberIncrWitem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RptServer).DashboardMemberIncrWitem(ctx, req.(*DashboardMemberIncrWitemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rpt_ServiceDesc is the grpc.ServiceDesc for Rpt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rpt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.rpt.v1.rpt",
	HandlerType: (*RptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchRptVersionWitem",
			Handler:    _Rpt_SearchRptVersionWitem_Handler,
		},
		{
			MethodName: "SearchRptMemberWitem",
			Handler:    _Rpt_SearchRptMemberWitem_Handler,
		},
		{
			MethodName: "DashboardRptSpaceWitem",
			Handler:    _Rpt_DashboardRptSpaceWitem_Handler,
		},
		{
			MethodName: "DashboardRptMemberWitem",
			Handler:    _Rpt_DashboardRptMemberWitem_Handler,
		},
		{
			MethodName: "DashboardSpaceList",
			Handler:    _Rpt_DashboardSpaceList_Handler,
		},
		{
			MethodName: "DashboardSpaceIncrWitem",
			Handler:    _Rpt_DashboardSpaceIncrWitem_Handler,
		},
		{
			MethodName: "DashboardMemberIncrWitem",
			Handler:    _Rpt_DashboardMemberIncrWitem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpt/v1/rpt.proto",
}
