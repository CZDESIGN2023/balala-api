// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: rpt/v1/rpt.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRptDashboardMemberIncrWitem = "/api.rpt.v1.rpt/DashboardMemberIncrWitem"
const OperationRptDashboardRptMemberWitem = "/api.rpt.v1.rpt/DashboardRptMemberWitem"
const OperationRptDashboardRptSpaceWitem = "/api.rpt.v1.rpt/DashboardRptSpaceWitem"
const OperationRptDashboardSpaceIncrWitem = "/api.rpt.v1.rpt/DashboardSpaceIncrWitem"
const OperationRptDashboardSpaceList = "/api.rpt.v1.rpt/DashboardSpaceList"
const OperationRptSearchRptMemberWitem = "/api.rpt.v1.rpt/SearchRptMemberWitem"
const OperationRptSearchRptVersionWitem = "/api.rpt.v1.rpt/SearchRptVersionWitem"

type RptHTTPServer interface {
	DashboardMemberIncrWitem(context.Context, *DashboardMemberIncrWitemRequest) (*DashboardMemberIncrWitemReply, error)
	DashboardRptMemberWitem(context.Context, *DashboardRptMemberWitemRequest) (*DashboardRptMemberWitemReply, error)
	DashboardRptSpaceWitem(context.Context, *DashboardRptSpaceWitemRequest) (*DashboardRptSpaceWitemReply, error)
	DashboardSpaceIncrWitem(context.Context, *DashboardSpaceIncrWitemRequest) (*DashboardSpaceIncrWitemReply, error)
	DashboardSpaceList(context.Context, *DashboardSpaceListRequest) (*DashboardSpaceListReply, error)
	SearchRptMemberWitem(context.Context, *SearchRptMemberWitemRequest) (*SearchRptMemberWitemReply, error)
	SearchRptVersionWitem(context.Context, *SearchRptVersionWitemRequest) (*SearchRptVersionWitemReply, error)
}

func RegisterRptHTTPServer(s *http.Server, srv RptHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/my/rpt/space/verion_witem", _Rpt_SearchRptVersionWitem0_HTTP_Handler(srv))
	r.POST("/v1/my/rpt/space/member_witem", _Rpt_SearchRptMemberWitem0_HTTP_Handler(srv))
	r.POST("/v1/my/rpt/dashboard/space_witem", _Rpt_DashboardRptSpaceWitem0_HTTP_Handler(srv))
	r.POST("/v1/my/rpt/dashboard/member_witem", _Rpt_DashboardRptMemberWitem0_HTTP_Handler(srv))
	r.POST("/v1/my/rpt/dashboard/space_list", _Rpt_DashboardSpaceList0_HTTP_Handler(srv))
	r.POST("/v1/my/rpt/dashboard/space_incr_witem", _Rpt_DashboardSpaceIncrWitem0_HTTP_Handler(srv))
	r.POST("/v1/my/rpt/dashboard/member_incr_witem", _Rpt_DashboardMemberIncrWitem0_HTTP_Handler(srv))
}

func _Rpt_SearchRptVersionWitem0_HTTP_Handler(srv RptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchRptVersionWitemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRptSearchRptVersionWitem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchRptVersionWitem(ctx, req.(*SearchRptVersionWitemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchRptVersionWitemReply)
		return ctx.Result(200, reply)
	}
}

func _Rpt_SearchRptMemberWitem0_HTTP_Handler(srv RptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchRptMemberWitemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRptSearchRptMemberWitem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchRptMemberWitem(ctx, req.(*SearchRptMemberWitemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchRptMemberWitemReply)
		return ctx.Result(200, reply)
	}
}

func _Rpt_DashboardRptSpaceWitem0_HTTP_Handler(srv RptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DashboardRptSpaceWitemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRptDashboardRptSpaceWitem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DashboardRptSpaceWitem(ctx, req.(*DashboardRptSpaceWitemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DashboardRptSpaceWitemReply)
		return ctx.Result(200, reply)
	}
}

func _Rpt_DashboardRptMemberWitem0_HTTP_Handler(srv RptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DashboardRptMemberWitemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRptDashboardRptMemberWitem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DashboardRptMemberWitem(ctx, req.(*DashboardRptMemberWitemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DashboardRptMemberWitemReply)
		return ctx.Result(200, reply)
	}
}

func _Rpt_DashboardSpaceList0_HTTP_Handler(srv RptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DashboardSpaceListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRptDashboardSpaceList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DashboardSpaceList(ctx, req.(*DashboardSpaceListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DashboardSpaceListReply)
		return ctx.Result(200, reply)
	}
}

func _Rpt_DashboardSpaceIncrWitem0_HTTP_Handler(srv RptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DashboardSpaceIncrWitemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRptDashboardSpaceIncrWitem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DashboardSpaceIncrWitem(ctx, req.(*DashboardSpaceIncrWitemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DashboardSpaceIncrWitemReply)
		return ctx.Result(200, reply)
	}
}

func _Rpt_DashboardMemberIncrWitem0_HTTP_Handler(srv RptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DashboardMemberIncrWitemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRptDashboardMemberIncrWitem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DashboardMemberIncrWitem(ctx, req.(*DashboardMemberIncrWitemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DashboardMemberIncrWitemReply)
		return ctx.Result(200, reply)
	}
}

type RptHTTPClient interface {
	DashboardMemberIncrWitem(ctx context.Context, req *DashboardMemberIncrWitemRequest, opts ...http.CallOption) (rsp *DashboardMemberIncrWitemReply, err error)
	DashboardRptMemberWitem(ctx context.Context, req *DashboardRptMemberWitemRequest, opts ...http.CallOption) (rsp *DashboardRptMemberWitemReply, err error)
	DashboardRptSpaceWitem(ctx context.Context, req *DashboardRptSpaceWitemRequest, opts ...http.CallOption) (rsp *DashboardRptSpaceWitemReply, err error)
	DashboardSpaceIncrWitem(ctx context.Context, req *DashboardSpaceIncrWitemRequest, opts ...http.CallOption) (rsp *DashboardSpaceIncrWitemReply, err error)
	DashboardSpaceList(ctx context.Context, req *DashboardSpaceListRequest, opts ...http.CallOption) (rsp *DashboardSpaceListReply, err error)
	SearchRptMemberWitem(ctx context.Context, req *SearchRptMemberWitemRequest, opts ...http.CallOption) (rsp *SearchRptMemberWitemReply, err error)
	SearchRptVersionWitem(ctx context.Context, req *SearchRptVersionWitemRequest, opts ...http.CallOption) (rsp *SearchRptVersionWitemReply, err error)
}

type RptHTTPClientImpl struct {
	cc *http.Client
}

func NewRptHTTPClient(client *http.Client) RptHTTPClient {
	return &RptHTTPClientImpl{client}
}

func (c *RptHTTPClientImpl) DashboardMemberIncrWitem(ctx context.Context, in *DashboardMemberIncrWitemRequest, opts ...http.CallOption) (*DashboardMemberIncrWitemReply, error) {
	var out DashboardMemberIncrWitemReply
	pattern := "/v1/my/rpt/dashboard/member_incr_witem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRptDashboardMemberIncrWitem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RptHTTPClientImpl) DashboardRptMemberWitem(ctx context.Context, in *DashboardRptMemberWitemRequest, opts ...http.CallOption) (*DashboardRptMemberWitemReply, error) {
	var out DashboardRptMemberWitemReply
	pattern := "/v1/my/rpt/dashboard/member_witem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRptDashboardRptMemberWitem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RptHTTPClientImpl) DashboardRptSpaceWitem(ctx context.Context, in *DashboardRptSpaceWitemRequest, opts ...http.CallOption) (*DashboardRptSpaceWitemReply, error) {
	var out DashboardRptSpaceWitemReply
	pattern := "/v1/my/rpt/dashboard/space_witem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRptDashboardRptSpaceWitem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RptHTTPClientImpl) DashboardSpaceIncrWitem(ctx context.Context, in *DashboardSpaceIncrWitemRequest, opts ...http.CallOption) (*DashboardSpaceIncrWitemReply, error) {
	var out DashboardSpaceIncrWitemReply
	pattern := "/v1/my/rpt/dashboard/space_incr_witem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRptDashboardSpaceIncrWitem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RptHTTPClientImpl) DashboardSpaceList(ctx context.Context, in *DashboardSpaceListRequest, opts ...http.CallOption) (*DashboardSpaceListReply, error) {
	var out DashboardSpaceListReply
	pattern := "/v1/my/rpt/dashboard/space_list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRptDashboardSpaceList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RptHTTPClientImpl) SearchRptMemberWitem(ctx context.Context, in *SearchRptMemberWitemRequest, opts ...http.CallOption) (*SearchRptMemberWitemReply, error) {
	var out SearchRptMemberWitemReply
	pattern := "/v1/my/rpt/space/member_witem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRptSearchRptMemberWitem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RptHTTPClientImpl) SearchRptVersionWitem(ctx context.Context, in *SearchRptVersionWitemRequest, opts ...http.CallOption) (*SearchRptVersionWitemReply, error) {
	var out SearchRptVersionWitemReply
	pattern := "/v1/my/rpt/space/verion_witem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRptSearchRptVersionWitem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
