// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: space/v1/space.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSpaceCopy = "/api.space.v1.space/Copy"
const OperationSpaceCreateMemberCategory = "/api.space.v1.space/CreateMemberCategory"
const OperationSpaceCreateSpace = "/api.space.v1.space/CreateSpace"
const OperationSpaceDelSpace = "/api.space.v1.space/DelSpace"
const OperationSpaceDelTempConfig = "/api.space.v1.space/DelTempConfig"
const OperationSpaceDeleteMemberCategory = "/api.space.v1.space/DeleteMemberCategory"
const OperationSpaceGetMemberCategoryDetailList = "/api.space.v1.space/GetMemberCategoryDetailList"
const OperationSpaceGetSpaceInfo = "/api.space.v1.space/GetSpaceInfo"
const OperationSpaceGetTempConfig = "/api.space.v1.space/GetTempConfig"
const OperationSpaceGetWorkItemTypes = "/api.space.v1.space/GetWorkItemTypes"
const OperationSpaceModifyMemberCategoryInfo = "/api.space.v1.space/ModifyMemberCategoryInfo"
const OperationSpaceQuitMySpace = "/api.space.v1.space/QuitMySpace"
const OperationSpaceSearchWorkItem = "/api.space.v1.space/SearchWorkItem"
const OperationSpaceSetCommentDeletable = "/api.space.v1.space/SetCommentDeletable"
const OperationSpaceSetCommentDeletableWhenArchived = "/api.space.v1.space/SetCommentDeletableWhenArchived"
const OperationSpaceSetCommentShowPos = "/api.space.v1.space/SetCommentShowPos"
const OperationSpaceSetMemberToMemberCategory = "/api.space.v1.space/SetMemberToMemberCategory"
const OperationSpaceSetName = "/api.space.v1.space/SetName"
const OperationSpaceSetNotify = "/api.space.v1.space/SetNotify"
const OperationSpaceSetSpaceBaseInfo = "/api.space.v1.space/SetSpaceBaseInfo"
const OperationSpaceSetSpaceDescribe = "/api.space.v1.space/SetSpaceDescribe"
const OperationSpaceSetTempConfig = "/api.space.v1.space/SetTempConfig"
const OperationSpaceSetWorkingDay = "/api.space.v1.space/SetWorkingDay"
const OperationSpaceSortWorkItemType = "/api.space.v1.space/SortWorkItemType"
const OperationSpaceSpaceList = "/api.space.v1.space/SpaceList"
const OperationSpaceTransferSpaceOwnership = "/api.space.v1.space/TransferSpaceOwnership"

type SpaceHTTPServer interface {
	Copy(context.Context, *CopyRequest) (*CopyReply, error)
	CreateMemberCategory(context.Context, *CreateMemberCategoryRequest) (*CreateMemberCategoryReply, error)
	// CreateSpace 在space後初始化使用 (長連接模擬短連接請求)
	CreateSpace(context.Context, *CreateSpaceRequest) (*CreateSpaceReply, error)
	DelSpace(context.Context, *DelSpaceRequest) (*DelSpaceReply, error)
	DelTempConfig(context.Context, *DelTempConfigRequest) (*DelTempConfigReply, error)
	DeleteMemberCategory(context.Context, *DeleteMemberCategoryRequest) (*DeleteMemberCategoryReply, error)
	GetMemberCategoryDetailList(context.Context, *GetMemberCategoryDetailListRequest) (*GetMemberCategoryDetailListReply, error)
	GetSpaceInfo(context.Context, *GetSpaceInfoRequest) (*GetSpaceInfoReply, error)
	GetTempConfig(context.Context, *GetTempConfigRequest) (*GetTempConfigReply, error)
	GetWorkItemTypes(context.Context, *GetWorkItemTypesRequest) (*GetWorkItemTypesReply, error)
	ModifyMemberCategoryInfo(context.Context, *ModifyMemberCategoryRequest) (*ModifyMemberCategoryReply, error)
	QuitMySpace(context.Context, *QuitMySpaceRequest) (*QuitMySpaceReply, error)
	SearchWorkItem(context.Context, *SearchWorkItemRequest) (*SearchWorkItemReply, error)
	SetCommentDeletable(context.Context, *SetCommentDeletableRequest) (*SetCommentDeletableReply, error)
	SetCommentDeletableWhenArchived(context.Context, *SetCommentDeletableWhenArchivedRequest) (*SetCommentDeletableWhenArchivedReply, error)
	SetCommentShowPos(context.Context, *SetCommentShowPosRequest) (*SetCommentShowPosReply, error)
	SetMemberToMemberCategory(context.Context, *SetMemberToMemberCategoryRequest) (*SetMemberToMemberCategoryReply, error)
	SetName(context.Context, *SetNameRequest) (*SetNameReply, error)
	SetNotify(context.Context, *SetNotifyRequest) (*SetNotifyReply, error)
	SetSpaceBaseInfo(context.Context, *SetSpaceBaseInfoRequest) (*SetSpaceBaseInfoReply, error)
	SetSpaceDescribe(context.Context, *SetSpaceDescribeRequest) (*SetSpaceDescribeReply, error)
	SetTempConfig(context.Context, *SetTempConfigRequest) (*SetTempConfigReply, error)
	SetWorkingDay(context.Context, *SetWorkingDayRequest) (*SetWorkingDayReply, error)
	SortWorkItemType(context.Context, *SortWorkItemTypeRequest) (*SortWorkItemTypeReply, error)
	SpaceList(context.Context, *SpaceListRequest) (*SpaceListReply, error)
	TransferSpaceOwnership(context.Context, *TransferSpaceOwnershipRequest) (*TransferSpaceOwnershipReply, error)
}

func RegisterSpaceHTTPServer(s *http.Server, srv SpaceHTTPServer) {
	r := s.Route("/")
	r.POST("/my/space/create", _Space_CreateSpace0_HTTP_Handler(srv))
	r.POST("/my/space/set/describe", _Space_SetSpaceDescribe0_HTTP_Handler(srv))
	r.POST("/my/space/set/base_info", _Space_SetSpaceBaseInfo0_HTTP_Handler(srv))
	r.POST("/my/space/info", _Space_GetSpaceInfo0_HTTP_Handler(srv))
	r.POST("/my/space/list", _Space_SpaceList0_HTTP_Handler(srv))
	r.POST("/my/space/del", _Space_DelSpace0_HTTP_Handler(srv))
	r.POST("/my/space/quit", _Space_QuitMySpace0_HTTP_Handler(srv))
	r.POST("/my/space/transfer_ownership", _Space_TransferSpaceOwnership0_HTTP_Handler(srv))
	r.POST("/my/space/set_notify", _Space_SetNotify0_HTTP_Handler(srv))
	r.POST("/my/space/member_category/create", _Space_CreateMemberCategory0_HTTP_Handler(srv))
	r.POST("/my/space/member_category/modify_info", _Space_ModifyMemberCategoryInfo0_HTTP_Handler(srv))
	r.POST("/my/space/member_category/set_member", _Space_SetMemberToMemberCategory0_HTTP_Handler(srv))
	r.POST("/my/space/set_working_day", _Space_SetWorkingDay0_HTTP_Handler(srv))
	r.POST("/my/space/set_comment_deletable", _Space_SetCommentDeletable0_HTTP_Handler(srv))
	r.POST("/my/space/member_category/detail_list", _Space_GetMemberCategoryDetailList0_HTTP_Handler(srv))
	r.POST("/my/space/member_category/del", _Space_DeleteMemberCategory0_HTTP_Handler(srv))
	r.POST("/my/space/set/name", _Space_SetName0_HTTP_Handler(srv))
	r.POST("/my/space/search/work_item", _Space_SearchWorkItem0_HTTP_Handler(srv))
	r.POST("/my/space/work_item_type/sort", _Space_SortWorkItemType0_HTTP_Handler(srv))
	r.POST("/my/space/work_item_types", _Space_GetWorkItemTypes0_HTTP_Handler(srv))
	r.POST("/my/space/get_temp_config", _Space_GetTempConfig1_HTTP_Handler(srv))
	r.POST("/my/space/set_temp_config", _Space_SetTempConfig1_HTTP_Handler(srv))
	r.POST("/my/space/del_temp_config", _Space_DelTempConfig1_HTTP_Handler(srv))
	r.POST("/my/space/copy", _Space_Copy0_HTTP_Handler(srv))
	r.POST("/my/space/set_comment_deletable_when_archived", _Space_SetCommentDeletableWhenArchived0_HTTP_Handler(srv))
	r.POST("/my/space/set_comment_show_pos", _Space_SetCommentShowPos0_HTTP_Handler(srv))
}

func _Space_CreateSpace0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSpaceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceCreateSpace)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSpace(ctx, req.(*CreateSpaceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSpaceReply)
		return ctx.Result(200, reply)
	}
}

func _Space_SetSpaceDescribe0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSpaceDescribeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceSetSpaceDescribe)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceDescribe(ctx, req.(*SetSpaceDescribeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSpaceDescribeReply)
		return ctx.Result(200, reply)
	}
}

func _Space_SetSpaceBaseInfo0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSpaceBaseInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceSetSpaceBaseInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceBaseInfo(ctx, req.(*SetSpaceBaseInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSpaceBaseInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Space_GetSpaceInfo0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSpaceInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceGetSpaceInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSpaceInfo(ctx, req.(*GetSpaceInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSpaceInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Space_SpaceList0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceSpaceList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpaceList(ctx, req.(*SpaceListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceListReply)
		return ctx.Result(200, reply)
	}
}

func _Space_DelSpace0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelSpaceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceDelSpace)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelSpace(ctx, req.(*DelSpaceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelSpaceReply)
		return ctx.Result(200, reply)
	}
}

func _Space_QuitMySpace0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuitMySpaceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceQuitMySpace)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QuitMySpace(ctx, req.(*QuitMySpaceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuitMySpaceReply)
		return ctx.Result(200, reply)
	}
}

func _Space_TransferSpaceOwnership0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TransferSpaceOwnershipRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceTransferSpaceOwnership)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TransferSpaceOwnership(ctx, req.(*TransferSpaceOwnershipRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TransferSpaceOwnershipReply)
		return ctx.Result(200, reply)
	}
}

func _Space_SetNotify0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetNotifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceSetNotify)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetNotify(ctx, req.(*SetNotifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetNotifyReply)
		return ctx.Result(200, reply)
	}
}

func _Space_CreateMemberCategory0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMemberCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceCreateMemberCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMemberCategory(ctx, req.(*CreateMemberCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMemberCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Space_ModifyMemberCategoryInfo0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyMemberCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceModifyMemberCategoryInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyMemberCategoryInfo(ctx, req.(*ModifyMemberCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyMemberCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Space_SetMemberToMemberCategory0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetMemberToMemberCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceSetMemberToMemberCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetMemberToMemberCategory(ctx, req.(*SetMemberToMemberCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetMemberToMemberCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Space_SetWorkingDay0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetWorkingDayRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceSetWorkingDay)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetWorkingDay(ctx, req.(*SetWorkingDayRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetWorkingDayReply)
		return ctx.Result(200, reply)
	}
}

func _Space_SetCommentDeletable0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetCommentDeletableRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceSetCommentDeletable)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetCommentDeletable(ctx, req.(*SetCommentDeletableRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetCommentDeletableReply)
		return ctx.Result(200, reply)
	}
}

func _Space_GetMemberCategoryDetailList0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMemberCategoryDetailListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceGetMemberCategoryDetailList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMemberCategoryDetailList(ctx, req.(*GetMemberCategoryDetailListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMemberCategoryDetailListReply)
		return ctx.Result(200, reply)
	}
}

func _Space_DeleteMemberCategory0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMemberCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceDeleteMemberCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMemberCategory(ctx, req.(*DeleteMemberCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMemberCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Space_SetName0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceSetName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetName(ctx, req.(*SetNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetNameReply)
		return ctx.Result(200, reply)
	}
}

func _Space_SearchWorkItem0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchWorkItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceSearchWorkItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchWorkItem(ctx, req.(*SearchWorkItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchWorkItemReply)
		return ctx.Result(200, reply)
	}
}

func _Space_SortWorkItemType0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SortWorkItemTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceSortWorkItemType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SortWorkItemType(ctx, req.(*SortWorkItemTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SortWorkItemTypeReply)
		return ctx.Result(200, reply)
	}
}

func _Space_GetWorkItemTypes0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWorkItemTypesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceGetWorkItemTypes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWorkItemTypes(ctx, req.(*GetWorkItemTypesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWorkItemTypesReply)
		return ctx.Result(200, reply)
	}
}

func _Space_GetTempConfig1_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTempConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceGetTempConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTempConfig(ctx, req.(*GetTempConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTempConfigReply)
		return ctx.Result(200, reply)
	}
}

func _Space_SetTempConfig1_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetTempConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceSetTempConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetTempConfig(ctx, req.(*SetTempConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetTempConfigReply)
		return ctx.Result(200, reply)
	}
}

func _Space_DelTempConfig1_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelTempConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceDelTempConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelTempConfig(ctx, req.(*DelTempConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelTempConfigReply)
		return ctx.Result(200, reply)
	}
}

func _Space_Copy0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CopyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceCopy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Copy(ctx, req.(*CopyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CopyReply)
		return ctx.Result(200, reply)
	}
}

func _Space_SetCommentDeletableWhenArchived0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetCommentDeletableWhenArchivedRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceSetCommentDeletableWhenArchived)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetCommentDeletableWhenArchived(ctx, req.(*SetCommentDeletableWhenArchivedRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetCommentDeletableWhenArchivedReply)
		return ctx.Result(200, reply)
	}
}

func _Space_SetCommentShowPos0_HTTP_Handler(srv SpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetCommentShowPosRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceSetCommentShowPos)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetCommentShowPos(ctx, req.(*SetCommentShowPosRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetCommentShowPosReply)
		return ctx.Result(200, reply)
	}
}

type SpaceHTTPClient interface {
	Copy(ctx context.Context, req *CopyRequest, opts ...http.CallOption) (rsp *CopyReply, err error)
	CreateMemberCategory(ctx context.Context, req *CreateMemberCategoryRequest, opts ...http.CallOption) (rsp *CreateMemberCategoryReply, err error)
	CreateSpace(ctx context.Context, req *CreateSpaceRequest, opts ...http.CallOption) (rsp *CreateSpaceReply, err error)
	DelSpace(ctx context.Context, req *DelSpaceRequest, opts ...http.CallOption) (rsp *DelSpaceReply, err error)
	DelTempConfig(ctx context.Context, req *DelTempConfigRequest, opts ...http.CallOption) (rsp *DelTempConfigReply, err error)
	DeleteMemberCategory(ctx context.Context, req *DeleteMemberCategoryRequest, opts ...http.CallOption) (rsp *DeleteMemberCategoryReply, err error)
	GetMemberCategoryDetailList(ctx context.Context, req *GetMemberCategoryDetailListRequest, opts ...http.CallOption) (rsp *GetMemberCategoryDetailListReply, err error)
	GetSpaceInfo(ctx context.Context, req *GetSpaceInfoRequest, opts ...http.CallOption) (rsp *GetSpaceInfoReply, err error)
	GetTempConfig(ctx context.Context, req *GetTempConfigRequest, opts ...http.CallOption) (rsp *GetTempConfigReply, err error)
	GetWorkItemTypes(ctx context.Context, req *GetWorkItemTypesRequest, opts ...http.CallOption) (rsp *GetWorkItemTypesReply, err error)
	ModifyMemberCategoryInfo(ctx context.Context, req *ModifyMemberCategoryRequest, opts ...http.CallOption) (rsp *ModifyMemberCategoryReply, err error)
	QuitMySpace(ctx context.Context, req *QuitMySpaceRequest, opts ...http.CallOption) (rsp *QuitMySpaceReply, err error)
	SearchWorkItem(ctx context.Context, req *SearchWorkItemRequest, opts ...http.CallOption) (rsp *SearchWorkItemReply, err error)
	SetCommentDeletable(ctx context.Context, req *SetCommentDeletableRequest, opts ...http.CallOption) (rsp *SetCommentDeletableReply, err error)
	SetCommentDeletableWhenArchived(ctx context.Context, req *SetCommentDeletableWhenArchivedRequest, opts ...http.CallOption) (rsp *SetCommentDeletableWhenArchivedReply, err error)
	SetCommentShowPos(ctx context.Context, req *SetCommentShowPosRequest, opts ...http.CallOption) (rsp *SetCommentShowPosReply, err error)
	SetMemberToMemberCategory(ctx context.Context, req *SetMemberToMemberCategoryRequest, opts ...http.CallOption) (rsp *SetMemberToMemberCategoryReply, err error)
	SetName(ctx context.Context, req *SetNameRequest, opts ...http.CallOption) (rsp *SetNameReply, err error)
	SetNotify(ctx context.Context, req *SetNotifyRequest, opts ...http.CallOption) (rsp *SetNotifyReply, err error)
	SetSpaceBaseInfo(ctx context.Context, req *SetSpaceBaseInfoRequest, opts ...http.CallOption) (rsp *SetSpaceBaseInfoReply, err error)
	SetSpaceDescribe(ctx context.Context, req *SetSpaceDescribeRequest, opts ...http.CallOption) (rsp *SetSpaceDescribeReply, err error)
	SetTempConfig(ctx context.Context, req *SetTempConfigRequest, opts ...http.CallOption) (rsp *SetTempConfigReply, err error)
	SetWorkingDay(ctx context.Context, req *SetWorkingDayRequest, opts ...http.CallOption) (rsp *SetWorkingDayReply, err error)
	SortWorkItemType(ctx context.Context, req *SortWorkItemTypeRequest, opts ...http.CallOption) (rsp *SortWorkItemTypeReply, err error)
	SpaceList(ctx context.Context, req *SpaceListRequest, opts ...http.CallOption) (rsp *SpaceListReply, err error)
	TransferSpaceOwnership(ctx context.Context, req *TransferSpaceOwnershipRequest, opts ...http.CallOption) (rsp *TransferSpaceOwnershipReply, err error)
}

type SpaceHTTPClientImpl struct {
	cc *http.Client
}

func NewSpaceHTTPClient(client *http.Client) SpaceHTTPClient {
	return &SpaceHTTPClientImpl{client}
}

func (c *SpaceHTTPClientImpl) Copy(ctx context.Context, in *CopyRequest, opts ...http.CallOption) (*CopyReply, error) {
	var out CopyReply
	pattern := "/my/space/copy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceCopy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) CreateMemberCategory(ctx context.Context, in *CreateMemberCategoryRequest, opts ...http.CallOption) (*CreateMemberCategoryReply, error) {
	var out CreateMemberCategoryReply
	pattern := "/my/space/member_category/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceCreateMemberCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...http.CallOption) (*CreateSpaceReply, error) {
	var out CreateSpaceReply
	pattern := "/my/space/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceCreateSpace))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) DelSpace(ctx context.Context, in *DelSpaceRequest, opts ...http.CallOption) (*DelSpaceReply, error) {
	var out DelSpaceReply
	pattern := "/my/space/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceDelSpace))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) DelTempConfig(ctx context.Context, in *DelTempConfigRequest, opts ...http.CallOption) (*DelTempConfigReply, error) {
	var out DelTempConfigReply
	pattern := "/my/space/del_temp_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceDelTempConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) DeleteMemberCategory(ctx context.Context, in *DeleteMemberCategoryRequest, opts ...http.CallOption) (*DeleteMemberCategoryReply, error) {
	var out DeleteMemberCategoryReply
	pattern := "/my/space/member_category/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceDeleteMemberCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) GetMemberCategoryDetailList(ctx context.Context, in *GetMemberCategoryDetailListRequest, opts ...http.CallOption) (*GetMemberCategoryDetailListReply, error) {
	var out GetMemberCategoryDetailListReply
	pattern := "/my/space/member_category/detail_list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceGetMemberCategoryDetailList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) GetSpaceInfo(ctx context.Context, in *GetSpaceInfoRequest, opts ...http.CallOption) (*GetSpaceInfoReply, error) {
	var out GetSpaceInfoReply
	pattern := "/my/space/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceGetSpaceInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) GetTempConfig(ctx context.Context, in *GetTempConfigRequest, opts ...http.CallOption) (*GetTempConfigReply, error) {
	var out GetTempConfigReply
	pattern := "/my/space/get_temp_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceGetTempConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) GetWorkItemTypes(ctx context.Context, in *GetWorkItemTypesRequest, opts ...http.CallOption) (*GetWorkItemTypesReply, error) {
	var out GetWorkItemTypesReply
	pattern := "/my/space/work_item_types"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceGetWorkItemTypes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) ModifyMemberCategoryInfo(ctx context.Context, in *ModifyMemberCategoryRequest, opts ...http.CallOption) (*ModifyMemberCategoryReply, error) {
	var out ModifyMemberCategoryReply
	pattern := "/my/space/member_category/modify_info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceModifyMemberCategoryInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) QuitMySpace(ctx context.Context, in *QuitMySpaceRequest, opts ...http.CallOption) (*QuitMySpaceReply, error) {
	var out QuitMySpaceReply
	pattern := "/my/space/quit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceQuitMySpace))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) SearchWorkItem(ctx context.Context, in *SearchWorkItemRequest, opts ...http.CallOption) (*SearchWorkItemReply, error) {
	var out SearchWorkItemReply
	pattern := "/my/space/search/work_item"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceSearchWorkItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) SetCommentDeletable(ctx context.Context, in *SetCommentDeletableRequest, opts ...http.CallOption) (*SetCommentDeletableReply, error) {
	var out SetCommentDeletableReply
	pattern := "/my/space/set_comment_deletable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceSetCommentDeletable))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) SetCommentDeletableWhenArchived(ctx context.Context, in *SetCommentDeletableWhenArchivedRequest, opts ...http.CallOption) (*SetCommentDeletableWhenArchivedReply, error) {
	var out SetCommentDeletableWhenArchivedReply
	pattern := "/my/space/set_comment_deletable_when_archived"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceSetCommentDeletableWhenArchived))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) SetCommentShowPos(ctx context.Context, in *SetCommentShowPosRequest, opts ...http.CallOption) (*SetCommentShowPosReply, error) {
	var out SetCommentShowPosReply
	pattern := "/my/space/set_comment_show_pos"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceSetCommentShowPos))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) SetMemberToMemberCategory(ctx context.Context, in *SetMemberToMemberCategoryRequest, opts ...http.CallOption) (*SetMemberToMemberCategoryReply, error) {
	var out SetMemberToMemberCategoryReply
	pattern := "/my/space/member_category/set_member"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceSetMemberToMemberCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) SetName(ctx context.Context, in *SetNameRequest, opts ...http.CallOption) (*SetNameReply, error) {
	var out SetNameReply
	pattern := "/my/space/set/name"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceSetName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) SetNotify(ctx context.Context, in *SetNotifyRequest, opts ...http.CallOption) (*SetNotifyReply, error) {
	var out SetNotifyReply
	pattern := "/my/space/set_notify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceSetNotify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) SetSpaceBaseInfo(ctx context.Context, in *SetSpaceBaseInfoRequest, opts ...http.CallOption) (*SetSpaceBaseInfoReply, error) {
	var out SetSpaceBaseInfoReply
	pattern := "/my/space/set/base_info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceSetSpaceBaseInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) SetSpaceDescribe(ctx context.Context, in *SetSpaceDescribeRequest, opts ...http.CallOption) (*SetSpaceDescribeReply, error) {
	var out SetSpaceDescribeReply
	pattern := "/my/space/set/describe"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceSetSpaceDescribe))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) SetTempConfig(ctx context.Context, in *SetTempConfigRequest, opts ...http.CallOption) (*SetTempConfigReply, error) {
	var out SetTempConfigReply
	pattern := "/my/space/set_temp_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceSetTempConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) SetWorkingDay(ctx context.Context, in *SetWorkingDayRequest, opts ...http.CallOption) (*SetWorkingDayReply, error) {
	var out SetWorkingDayReply
	pattern := "/my/space/set_working_day"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceSetWorkingDay))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) SortWorkItemType(ctx context.Context, in *SortWorkItemTypeRequest, opts ...http.CallOption) (*SortWorkItemTypeReply, error) {
	var out SortWorkItemTypeReply
	pattern := "/my/space/work_item_type/sort"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceSortWorkItemType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) SpaceList(ctx context.Context, in *SpaceListRequest, opts ...http.CallOption) (*SpaceListReply, error) {
	var out SpaceListReply
	pattern := "/my/space/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceSpaceList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceHTTPClientImpl) TransferSpaceOwnership(ctx context.Context, in *TransferSpaceOwnershipRequest, opts ...http.CallOption) (*TransferSpaceOwnershipReply, error) {
	var out TransferSpaceOwnershipReply
	pattern := "/my/space/transfer_ownership"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceTransferSpaceOwnership))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
