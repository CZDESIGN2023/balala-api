// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: space_view/v1/space_view.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SpaceView_CreateView_FullMethodName         = "/api.space_view.v1.space_view/CreateView"
	SpaceView_ViewList_FullMethodName           = "/api.space_view.v1.space_view/ViewList"
	SpaceView_DelView_FullMethodName            = "/api.space_view.v1.space_view/DelView"
	SpaceView_SetViewRanking_FullMethodName     = "/api.space_view.v1.space_view/SetViewRanking"
	SpaceView_SetViewName_FullMethodName        = "/api.space_view.v1.space_view/SetViewName"
	SpaceView_SetViewStatus_FullMethodName      = "/api.space_view.v1.space_view/SetViewStatus"
	SpaceView_SetViewQueryConfig_FullMethodName = "/api.space_view.v1.space_view/SetViewQueryConfig"
	SpaceView_SetViewTableConfig_FullMethodName = "/api.space_view.v1.space_view/SetViewTableConfig"
)

// SpaceViewClient is the client API for SpaceView service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpaceViewClient interface {
	CreateView(ctx context.Context, in *CreateViewRequest, opts ...grpc.CallOption) (*CreateViewReply, error)
	ViewList(ctx context.Context, in *ViewListRequest, opts ...grpc.CallOption) (*ViewListReply, error)
	DelView(ctx context.Context, in *DelViewRequest, opts ...grpc.CallOption) (*DelViewReply, error)
	SetViewRanking(ctx context.Context, in *SetViewRankingRequest, opts ...grpc.CallOption) (*SetViewRankingReply, error)
	SetViewName(ctx context.Context, in *SetViewNameRequest, opts ...grpc.CallOption) (*SetViewNameReply, error)
	SetViewStatus(ctx context.Context, in *SetViewStatusRequest, opts ...grpc.CallOption) (*SetViewStatusReply, error)
	SetViewQueryConfig(ctx context.Context, in *SetViewQueryConfigRequest, opts ...grpc.CallOption) (*SetViewQueryConfigReply, error)
	SetViewTableConfig(ctx context.Context, in *SetViewTableConfigRequest, opts ...grpc.CallOption) (*SetViewTableConfigReply, error)
}

type spaceViewClient struct {
	cc grpc.ClientConnInterface
}

func NewSpaceViewClient(cc grpc.ClientConnInterface) SpaceViewClient {
	return &spaceViewClient{cc}
}

func (c *spaceViewClient) CreateView(ctx context.Context, in *CreateViewRequest, opts ...grpc.CallOption) (*CreateViewReply, error) {
	out := new(CreateViewReply)
	err := c.cc.Invoke(ctx, SpaceView_CreateView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceViewClient) ViewList(ctx context.Context, in *ViewListRequest, opts ...grpc.CallOption) (*ViewListReply, error) {
	out := new(ViewListReply)
	err := c.cc.Invoke(ctx, SpaceView_ViewList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceViewClient) DelView(ctx context.Context, in *DelViewRequest, opts ...grpc.CallOption) (*DelViewReply, error) {
	out := new(DelViewReply)
	err := c.cc.Invoke(ctx, SpaceView_DelView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceViewClient) SetViewRanking(ctx context.Context, in *SetViewRankingRequest, opts ...grpc.CallOption) (*SetViewRankingReply, error) {
	out := new(SetViewRankingReply)
	err := c.cc.Invoke(ctx, SpaceView_SetViewRanking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceViewClient) SetViewName(ctx context.Context, in *SetViewNameRequest, opts ...grpc.CallOption) (*SetViewNameReply, error) {
	out := new(SetViewNameReply)
	err := c.cc.Invoke(ctx, SpaceView_SetViewName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceViewClient) SetViewStatus(ctx context.Context, in *SetViewStatusRequest, opts ...grpc.CallOption) (*SetViewStatusReply, error) {
	out := new(SetViewStatusReply)
	err := c.cc.Invoke(ctx, SpaceView_SetViewStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceViewClient) SetViewQueryConfig(ctx context.Context, in *SetViewQueryConfigRequest, opts ...grpc.CallOption) (*SetViewQueryConfigReply, error) {
	out := new(SetViewQueryConfigReply)
	err := c.cc.Invoke(ctx, SpaceView_SetViewQueryConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceViewClient) SetViewTableConfig(ctx context.Context, in *SetViewTableConfigRequest, opts ...grpc.CallOption) (*SetViewTableConfigReply, error) {
	out := new(SetViewTableConfigReply)
	err := c.cc.Invoke(ctx, SpaceView_SetViewTableConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceViewServer is the server API for SpaceView service.
// All implementations must embed UnimplementedSpaceViewServer
// for forward compatibility
type SpaceViewServer interface {
	CreateView(context.Context, *CreateViewRequest) (*CreateViewReply, error)
	ViewList(context.Context, *ViewListRequest) (*ViewListReply, error)
	DelView(context.Context, *DelViewRequest) (*DelViewReply, error)
	SetViewRanking(context.Context, *SetViewRankingRequest) (*SetViewRankingReply, error)
	SetViewName(context.Context, *SetViewNameRequest) (*SetViewNameReply, error)
	SetViewStatus(context.Context, *SetViewStatusRequest) (*SetViewStatusReply, error)
	SetViewQueryConfig(context.Context, *SetViewQueryConfigRequest) (*SetViewQueryConfigReply, error)
	SetViewTableConfig(context.Context, *SetViewTableConfigRequest) (*SetViewTableConfigReply, error)
	mustEmbedUnimplementedSpaceViewServer()
}

// UnimplementedSpaceViewServer must be embedded to have forward compatible implementations.
type UnimplementedSpaceViewServer struct {
}

func (UnimplementedSpaceViewServer) CreateView(context.Context, *CreateViewRequest) (*CreateViewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateView not implemented")
}
func (UnimplementedSpaceViewServer) ViewList(context.Context, *ViewListRequest) (*ViewListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewList not implemented")
}
func (UnimplementedSpaceViewServer) DelView(context.Context, *DelViewRequest) (*DelViewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelView not implemented")
}
func (UnimplementedSpaceViewServer) SetViewRanking(context.Context, *SetViewRankingRequest) (*SetViewRankingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetViewRanking not implemented")
}
func (UnimplementedSpaceViewServer) SetViewName(context.Context, *SetViewNameRequest) (*SetViewNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetViewName not implemented")
}
func (UnimplementedSpaceViewServer) SetViewStatus(context.Context, *SetViewStatusRequest) (*SetViewStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetViewStatus not implemented")
}
func (UnimplementedSpaceViewServer) SetViewQueryConfig(context.Context, *SetViewQueryConfigRequest) (*SetViewQueryConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetViewQueryConfig not implemented")
}
func (UnimplementedSpaceViewServer) SetViewTableConfig(context.Context, *SetViewTableConfigRequest) (*SetViewTableConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetViewTableConfig not implemented")
}
func (UnimplementedSpaceViewServer) mustEmbedUnimplementedSpaceViewServer() {}

// UnsafeSpaceViewServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpaceViewServer will
// result in compilation errors.
type UnsafeSpaceViewServer interface {
	mustEmbedUnimplementedSpaceViewServer()
}

func RegisterSpaceViewServer(s grpc.ServiceRegistrar, srv SpaceViewServer) {
	s.RegisterService(&SpaceView_ServiceDesc, srv)
}

func _SpaceView_CreateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceViewServer).CreateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceView_CreateView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceViewServer).CreateView(ctx, req.(*CreateViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceView_ViewList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceViewServer).ViewList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceView_ViewList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceViewServer).ViewList(ctx, req.(*ViewListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceView_DelView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceViewServer).DelView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceView_DelView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceViewServer).DelView(ctx, req.(*DelViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceView_SetViewRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetViewRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceViewServer).SetViewRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceView_SetViewRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceViewServer).SetViewRanking(ctx, req.(*SetViewRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceView_SetViewName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetViewNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceViewServer).SetViewName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceView_SetViewName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceViewServer).SetViewName(ctx, req.(*SetViewNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceView_SetViewStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetViewStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceViewServer).SetViewStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceView_SetViewStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceViewServer).SetViewStatus(ctx, req.(*SetViewStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceView_SetViewQueryConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetViewQueryConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceViewServer).SetViewQueryConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceView_SetViewQueryConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceViewServer).SetViewQueryConfig(ctx, req.(*SetViewQueryConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceView_SetViewTableConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetViewTableConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceViewServer).SetViewTableConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceView_SetViewTableConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceViewServer).SetViewTableConfig(ctx, req.(*SetViewTableConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpaceView_ServiceDesc is the grpc.ServiceDesc for SpaceView service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpaceView_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.space_view.v1.space_view",
	HandlerType: (*SpaceViewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateView",
			Handler:    _SpaceView_CreateView_Handler,
		},
		{
			MethodName: "ViewList",
			Handler:    _SpaceView_ViewList_Handler,
		},
		{
			MethodName: "DelView",
			Handler:    _SpaceView_DelView_Handler,
		},
		{
			MethodName: "SetViewRanking",
			Handler:    _SpaceView_SetViewRanking_Handler,
		},
		{
			MethodName: "SetViewName",
			Handler:    _SpaceView_SetViewName_Handler,
		},
		{
			MethodName: "SetViewStatus",
			Handler:    _SpaceView_SetViewStatus_Handler,
		},
		{
			MethodName: "SetViewQueryConfig",
			Handler:    _SpaceView_SetViewQueryConfig_Handler,
		},
		{
			MethodName: "SetViewTableConfig",
			Handler:    _SpaceView_SetViewTableConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "space_view/v1/space_view.proto",
}
