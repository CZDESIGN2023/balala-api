// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: space_view/v1/space_view.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSpaceViewCreateView = "/api.space_view.v1.space_view/CreateView"
const OperationSpaceViewDelView = "/api.space_view.v1.space_view/DelView"
const OperationSpaceViewSetViewName = "/api.space_view.v1.space_view/SetViewName"
const OperationSpaceViewSetViewQueryConfig = "/api.space_view.v1.space_view/SetViewQueryConfig"
const OperationSpaceViewSetViewRanking = "/api.space_view.v1.space_view/SetViewRanking"
const OperationSpaceViewSetViewStatus = "/api.space_view.v1.space_view/SetViewStatus"
const OperationSpaceViewSetViewTableConfig = "/api.space_view.v1.space_view/SetViewTableConfig"
const OperationSpaceViewViewList = "/api.space_view.v1.space_view/ViewList"

type SpaceViewHTTPServer interface {
	CreateView(context.Context, *CreateViewRequest) (*CreateViewReply, error)
	DelView(context.Context, *DelViewRequest) (*DelViewReply, error)
	SetViewName(context.Context, *SetViewNameRequest) (*SetViewNameReply, error)
	SetViewQueryConfig(context.Context, *SetViewQueryConfigRequest) (*SetViewQueryConfigReply, error)
	SetViewRanking(context.Context, *SetViewRankingRequest) (*SetViewRankingReply, error)
	SetViewStatus(context.Context, *SetViewStatusRequest) (*SetViewStatusReply, error)
	SetViewTableConfig(context.Context, *SetViewTableConfigRequest) (*SetViewTableConfigReply, error)
	ViewList(context.Context, *ViewListRequest) (*ViewListReply, error)
}

func RegisterSpaceViewHTTPServer(s *http.Server, srv SpaceViewHTTPServer) {
	r := s.Route("/")
	r.POST("/my/space/view/create", _SpaceView_CreateView0_HTTP_Handler(srv))
	r.POST("/my/space/view/list", _SpaceView_ViewList0_HTTP_Handler(srv))
	r.POST("/my/space/view/del", _SpaceView_DelView0_HTTP_Handler(srv))
	r.POST("/my/space/view/set/ranking", _SpaceView_SetViewRanking0_HTTP_Handler(srv))
	r.POST("/my/space/view/set/name", _SpaceView_SetViewName0_HTTP_Handler(srv))
	r.POST("/my/space/view/set/status", _SpaceView_SetViewStatus0_HTTP_Handler(srv))
	r.POST("/my/space/view/set/query_config", _SpaceView_SetViewQueryConfig0_HTTP_Handler(srv))
	r.POST("/my/space/view/set/table_config", _SpaceView_SetViewTableConfig0_HTTP_Handler(srv))
}

func _SpaceView_CreateView0_HTTP_Handler(srv SpaceViewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateViewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceViewCreateView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateView(ctx, req.(*CreateViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateViewReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceView_ViewList0_HTTP_Handler(srv SpaceViewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ViewListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceViewViewList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ViewList(ctx, req.(*ViewListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ViewListReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceView_DelView0_HTTP_Handler(srv SpaceViewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelViewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceViewDelView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelView(ctx, req.(*DelViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelViewReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceView_SetViewRanking0_HTTP_Handler(srv SpaceViewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetViewRankingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceViewSetViewRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetViewRanking(ctx, req.(*SetViewRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetViewRankingReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceView_SetViewName0_HTTP_Handler(srv SpaceViewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetViewNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceViewSetViewName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetViewName(ctx, req.(*SetViewNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetViewNameReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceView_SetViewStatus0_HTTP_Handler(srv SpaceViewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetViewStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceViewSetViewStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetViewStatus(ctx, req.(*SetViewStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetViewStatusReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceView_SetViewQueryConfig0_HTTP_Handler(srv SpaceViewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetViewQueryConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceViewSetViewQueryConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetViewQueryConfig(ctx, req.(*SetViewQueryConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetViewQueryConfigReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceView_SetViewTableConfig0_HTTP_Handler(srv SpaceViewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetViewTableConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceViewSetViewTableConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetViewTableConfig(ctx, req.(*SetViewTableConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetViewTableConfigReply)
		return ctx.Result(200, reply)
	}
}

type SpaceViewHTTPClient interface {
	CreateView(ctx context.Context, req *CreateViewRequest, opts ...http.CallOption) (rsp *CreateViewReply, err error)
	DelView(ctx context.Context, req *DelViewRequest, opts ...http.CallOption) (rsp *DelViewReply, err error)
	SetViewName(ctx context.Context, req *SetViewNameRequest, opts ...http.CallOption) (rsp *SetViewNameReply, err error)
	SetViewQueryConfig(ctx context.Context, req *SetViewQueryConfigRequest, opts ...http.CallOption) (rsp *SetViewQueryConfigReply, err error)
	SetViewRanking(ctx context.Context, req *SetViewRankingRequest, opts ...http.CallOption) (rsp *SetViewRankingReply, err error)
	SetViewStatus(ctx context.Context, req *SetViewStatusRequest, opts ...http.CallOption) (rsp *SetViewStatusReply, err error)
	SetViewTableConfig(ctx context.Context, req *SetViewTableConfigRequest, opts ...http.CallOption) (rsp *SetViewTableConfigReply, err error)
	ViewList(ctx context.Context, req *ViewListRequest, opts ...http.CallOption) (rsp *ViewListReply, err error)
}

type SpaceViewHTTPClientImpl struct {
	cc *http.Client
}

func NewSpaceViewHTTPClient(client *http.Client) SpaceViewHTTPClient {
	return &SpaceViewHTTPClientImpl{client}
}

func (c *SpaceViewHTTPClientImpl) CreateView(ctx context.Context, in *CreateViewRequest, opts ...http.CallOption) (*CreateViewReply, error) {
	var out CreateViewReply
	pattern := "/my/space/view/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceViewCreateView))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceViewHTTPClientImpl) DelView(ctx context.Context, in *DelViewRequest, opts ...http.CallOption) (*DelViewReply, error) {
	var out DelViewReply
	pattern := "/my/space/view/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceViewDelView))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceViewHTTPClientImpl) SetViewName(ctx context.Context, in *SetViewNameRequest, opts ...http.CallOption) (*SetViewNameReply, error) {
	var out SetViewNameReply
	pattern := "/my/space/view/set/name"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceViewSetViewName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceViewHTTPClientImpl) SetViewQueryConfig(ctx context.Context, in *SetViewQueryConfigRequest, opts ...http.CallOption) (*SetViewQueryConfigReply, error) {
	var out SetViewQueryConfigReply
	pattern := "/my/space/view/set/query_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceViewSetViewQueryConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceViewHTTPClientImpl) SetViewRanking(ctx context.Context, in *SetViewRankingRequest, opts ...http.CallOption) (*SetViewRankingReply, error) {
	var out SetViewRankingReply
	pattern := "/my/space/view/set/ranking"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceViewSetViewRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceViewHTTPClientImpl) SetViewStatus(ctx context.Context, in *SetViewStatusRequest, opts ...http.CallOption) (*SetViewStatusReply, error) {
	var out SetViewStatusReply
	pattern := "/my/space/view/set/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceViewSetViewStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceViewHTTPClientImpl) SetViewTableConfig(ctx context.Context, in *SetViewTableConfigRequest, opts ...http.CallOption) (*SetViewTableConfigReply, error) {
	var out SetViewTableConfigReply
	pattern := "/my/space/view/set/table_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceViewSetViewTableConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceViewHTTPClientImpl) ViewList(ctx context.Context, in *ViewListRequest, opts ...http.CallOption) (*ViewListReply, error) {
	var out ViewListReply
	pattern := "/my/space/view/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceViewViewList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
