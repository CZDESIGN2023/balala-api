// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: workbench/v1/workbench.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Workbench_GetWorkBenchCount_FullMethodName            = "/api.workbench.v1.Workbench/GetWorkBenchCount"
	Workbench_GetSpaceWorkBenchCount_FullMethodName       = "/api.workbench.v1.Workbench/GetSpaceWorkBenchCount"
	Workbench_GetSpaceWorkBenchCount2_FullMethodName      = "/api.workbench.v1.Workbench/GetSpaceWorkBenchCount2"
	Workbench_GetSpaceWorkObjectCountByIds_FullMethodName = "/api.workbench.v1.Workbench/GetSpaceWorkObjectCountByIds"
	Workbench_GetSpaceVersionCount_FullMethodName         = "/api.workbench.v1.Workbench/GetSpaceVersionCount"
	Workbench_GetSpaceUserCount_FullMethodName            = "/api.workbench.v1.Workbench/GetSpaceUserCount"
)

// WorkbenchClient is the client API for Workbench service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkbenchClient interface {
	GetWorkBenchCount(ctx context.Context, in *GetWorkBenchCountRequest, opts ...grpc.CallOption) (*GetWorkBenchCountReply, error)
	GetSpaceWorkBenchCount(ctx context.Context, in *GetSpaceWorkBenchCountRequest, opts ...grpc.CallOption) (*GetSpaceWorkBenchCountReply, error)
	GetSpaceWorkBenchCount2(ctx context.Context, in *GetSpaceWorkBenchCountRequest2, opts ...grpc.CallOption) (*GetSpaceWorkBenchCountReply2, error)
	GetSpaceWorkObjectCountByIds(ctx context.Context, in *GetSpaceWorkObjectCountRequest, opts ...grpc.CallOption) (*GetSpaceWorkObjectCountReply, error)
	GetSpaceVersionCount(ctx context.Context, in *GetSpaceVersionCountRequest, opts ...grpc.CallOption) (*GetSpaceVersionCountReply, error)
	GetSpaceUserCount(ctx context.Context, in *GetSpaceUserCountRequest, opts ...grpc.CallOption) (*GetSpaceUserCountReply, error)
}

type workbenchClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkbenchClient(cc grpc.ClientConnInterface) WorkbenchClient {
	return &workbenchClient{cc}
}

func (c *workbenchClient) GetWorkBenchCount(ctx context.Context, in *GetWorkBenchCountRequest, opts ...grpc.CallOption) (*GetWorkBenchCountReply, error) {
	out := new(GetWorkBenchCountReply)
	err := c.cc.Invoke(ctx, Workbench_GetWorkBenchCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workbenchClient) GetSpaceWorkBenchCount(ctx context.Context, in *GetSpaceWorkBenchCountRequest, opts ...grpc.CallOption) (*GetSpaceWorkBenchCountReply, error) {
	out := new(GetSpaceWorkBenchCountReply)
	err := c.cc.Invoke(ctx, Workbench_GetSpaceWorkBenchCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workbenchClient) GetSpaceWorkBenchCount2(ctx context.Context, in *GetSpaceWorkBenchCountRequest2, opts ...grpc.CallOption) (*GetSpaceWorkBenchCountReply2, error) {
	out := new(GetSpaceWorkBenchCountReply2)
	err := c.cc.Invoke(ctx, Workbench_GetSpaceWorkBenchCount2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workbenchClient) GetSpaceWorkObjectCountByIds(ctx context.Context, in *GetSpaceWorkObjectCountRequest, opts ...grpc.CallOption) (*GetSpaceWorkObjectCountReply, error) {
	out := new(GetSpaceWorkObjectCountReply)
	err := c.cc.Invoke(ctx, Workbench_GetSpaceWorkObjectCountByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workbenchClient) GetSpaceVersionCount(ctx context.Context, in *GetSpaceVersionCountRequest, opts ...grpc.CallOption) (*GetSpaceVersionCountReply, error) {
	out := new(GetSpaceVersionCountReply)
	err := c.cc.Invoke(ctx, Workbench_GetSpaceVersionCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workbenchClient) GetSpaceUserCount(ctx context.Context, in *GetSpaceUserCountRequest, opts ...grpc.CallOption) (*GetSpaceUserCountReply, error) {
	out := new(GetSpaceUserCountReply)
	err := c.cc.Invoke(ctx, Workbench_GetSpaceUserCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkbenchServer is the server API for Workbench service.
// All implementations must embed UnimplementedWorkbenchServer
// for forward compatibility
type WorkbenchServer interface {
	GetWorkBenchCount(context.Context, *GetWorkBenchCountRequest) (*GetWorkBenchCountReply, error)
	GetSpaceWorkBenchCount(context.Context, *GetSpaceWorkBenchCountRequest) (*GetSpaceWorkBenchCountReply, error)
	GetSpaceWorkBenchCount2(context.Context, *GetSpaceWorkBenchCountRequest2) (*GetSpaceWorkBenchCountReply2, error)
	GetSpaceWorkObjectCountByIds(context.Context, *GetSpaceWorkObjectCountRequest) (*GetSpaceWorkObjectCountReply, error)
	GetSpaceVersionCount(context.Context, *GetSpaceVersionCountRequest) (*GetSpaceVersionCountReply, error)
	GetSpaceUserCount(context.Context, *GetSpaceUserCountRequest) (*GetSpaceUserCountReply, error)
	mustEmbedUnimplementedWorkbenchServer()
}

// UnimplementedWorkbenchServer must be embedded to have forward compatible implementations.
type UnimplementedWorkbenchServer struct {
}

func (UnimplementedWorkbenchServer) GetWorkBenchCount(context.Context, *GetWorkBenchCountRequest) (*GetWorkBenchCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkBenchCount not implemented")
}
func (UnimplementedWorkbenchServer) GetSpaceWorkBenchCount(context.Context, *GetSpaceWorkBenchCountRequest) (*GetSpaceWorkBenchCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceWorkBenchCount not implemented")
}
func (UnimplementedWorkbenchServer) GetSpaceWorkBenchCount2(context.Context, *GetSpaceWorkBenchCountRequest2) (*GetSpaceWorkBenchCountReply2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceWorkBenchCount2 not implemented")
}
func (UnimplementedWorkbenchServer) GetSpaceWorkObjectCountByIds(context.Context, *GetSpaceWorkObjectCountRequest) (*GetSpaceWorkObjectCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceWorkObjectCountByIds not implemented")
}
func (UnimplementedWorkbenchServer) GetSpaceVersionCount(context.Context, *GetSpaceVersionCountRequest) (*GetSpaceVersionCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceVersionCount not implemented")
}
func (UnimplementedWorkbenchServer) GetSpaceUserCount(context.Context, *GetSpaceUserCountRequest) (*GetSpaceUserCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceUserCount not implemented")
}
func (UnimplementedWorkbenchServer) mustEmbedUnimplementedWorkbenchServer() {}

// UnsafeWorkbenchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkbenchServer will
// result in compilation errors.
type UnsafeWorkbenchServer interface {
	mustEmbedUnimplementedWorkbenchServer()
}

func RegisterWorkbenchServer(s grpc.ServiceRegistrar, srv WorkbenchServer) {
	s.RegisterService(&Workbench_ServiceDesc, srv)
}

func _Workbench_GetWorkBenchCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkBenchCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServer).GetWorkBenchCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workbench_GetWorkBenchCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServer).GetWorkBenchCount(ctx, req.(*GetWorkBenchCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workbench_GetSpaceWorkBenchCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceWorkBenchCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServer).GetSpaceWorkBenchCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workbench_GetSpaceWorkBenchCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServer).GetSpaceWorkBenchCount(ctx, req.(*GetSpaceWorkBenchCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workbench_GetSpaceWorkBenchCount2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceWorkBenchCountRequest2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServer).GetSpaceWorkBenchCount2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workbench_GetSpaceWorkBenchCount2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServer).GetSpaceWorkBenchCount2(ctx, req.(*GetSpaceWorkBenchCountRequest2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workbench_GetSpaceWorkObjectCountByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceWorkObjectCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServer).GetSpaceWorkObjectCountByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workbench_GetSpaceWorkObjectCountByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServer).GetSpaceWorkObjectCountByIds(ctx, req.(*GetSpaceWorkObjectCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workbench_GetSpaceVersionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceVersionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServer).GetSpaceVersionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workbench_GetSpaceVersionCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServer).GetSpaceVersionCount(ctx, req.(*GetSpaceVersionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workbench_GetSpaceUserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceUserCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkbenchServer).GetSpaceUserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workbench_GetSpaceUserCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkbenchServer).GetSpaceUserCount(ctx, req.(*GetSpaceUserCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Workbench_ServiceDesc is the grpc.ServiceDesc for Workbench service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workbench_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.workbench.v1.Workbench",
	HandlerType: (*WorkbenchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkBenchCount",
			Handler:    _Workbench_GetWorkBenchCount_Handler,
		},
		{
			MethodName: "GetSpaceWorkBenchCount",
			Handler:    _Workbench_GetSpaceWorkBenchCount_Handler,
		},
		{
			MethodName: "GetSpaceWorkBenchCount2",
			Handler:    _Workbench_GetSpaceWorkBenchCount2_Handler,
		},
		{
			MethodName: "GetSpaceWorkObjectCountByIds",
			Handler:    _Workbench_GetSpaceWorkObjectCountByIds_Handler,
		},
		{
			MethodName: "GetSpaceVersionCount",
			Handler:    _Workbench_GetSpaceVersionCount_Handler,
		},
		{
			MethodName: "GetSpaceUserCount",
			Handler:    _Workbench_GetSpaceUserCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workbench/v1/workbench.proto",
}
