// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: workbench/v1/workbench.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWorkbenchGetSpaceUserCount = "/api.workbench.v1.Workbench/GetSpaceUserCount"
const OperationWorkbenchGetSpaceVersionCount = "/api.workbench.v1.Workbench/GetSpaceVersionCount"
const OperationWorkbenchGetSpaceWorkBenchCount = "/api.workbench.v1.Workbench/GetSpaceWorkBenchCount"
const OperationWorkbenchGetSpaceWorkBenchCount2 = "/api.workbench.v1.Workbench/GetSpaceWorkBenchCount2"
const OperationWorkbenchGetSpaceWorkObjectCountByIds = "/api.workbench.v1.Workbench/GetSpaceWorkObjectCountByIds"
const OperationWorkbenchGetWorkBenchCount = "/api.workbench.v1.Workbench/GetWorkBenchCount"

type WorkbenchHTTPServer interface {
	GetSpaceUserCount(context.Context, *GetSpaceUserCountRequest) (*GetSpaceUserCountReply, error)
	GetSpaceVersionCount(context.Context, *GetSpaceVersionCountRequest) (*GetSpaceVersionCountReply, error)
	GetSpaceWorkBenchCount(context.Context, *GetSpaceWorkBenchCountRequest) (*GetSpaceWorkBenchCountReply, error)
	GetSpaceWorkBenchCount2(context.Context, *GetSpaceWorkBenchCountRequest2) (*GetSpaceWorkBenchCountReply2, error)
	GetSpaceWorkObjectCountByIds(context.Context, *GetSpaceWorkObjectCountRequest) (*GetSpaceWorkObjectCountReply, error)
	GetWorkBenchCount(context.Context, *GetWorkBenchCountRequest) (*GetWorkBenchCountReply, error)
}

func RegisterWorkbenchHTTPServer(s *http.Server, srv WorkbenchHTTPServer) {
	r := s.Route("/")
	r.POST("/v2/my/workbench/count", _Workbench_GetWorkBenchCount0_HTTP_Handler(srv))
	r.POST("v2/my/workbench/space/count", _Workbench_GetSpaceWorkBenchCount0_HTTP_Handler(srv))
	r.POST("v2/my/workbench/space/count2", _Workbench_GetSpaceWorkBenchCount20_HTTP_Handler(srv))
	r.POST("/v2/my/workbench/space/work_object/count/by_ids", _Workbench_GetSpaceWorkObjectCountByIds0_HTTP_Handler(srv))
	r.POST("/my/workbench/space/version/count", _Workbench_GetSpaceVersionCount0_HTTP_Handler(srv))
	r.POST("/my/workbench/space/user/count", _Workbench_GetSpaceUserCount0_HTTP_Handler(srv))
}

func _Workbench_GetWorkBenchCount0_HTTP_Handler(srv WorkbenchHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWorkBenchCountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkbenchGetWorkBenchCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWorkBenchCount(ctx, req.(*GetWorkBenchCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWorkBenchCountReply)
		return ctx.Result(200, reply)
	}
}

func _Workbench_GetSpaceWorkBenchCount0_HTTP_Handler(srv WorkbenchHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSpaceWorkBenchCountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkbenchGetSpaceWorkBenchCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSpaceWorkBenchCount(ctx, req.(*GetSpaceWorkBenchCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSpaceWorkBenchCountReply)
		return ctx.Result(200, reply)
	}
}

func _Workbench_GetSpaceWorkBenchCount20_HTTP_Handler(srv WorkbenchHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSpaceWorkBenchCountRequest2
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkbenchGetSpaceWorkBenchCount2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSpaceWorkBenchCount2(ctx, req.(*GetSpaceWorkBenchCountRequest2))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSpaceWorkBenchCountReply2)
		return ctx.Result(200, reply)
	}
}

func _Workbench_GetSpaceWorkObjectCountByIds0_HTTP_Handler(srv WorkbenchHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSpaceWorkObjectCountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkbenchGetSpaceWorkObjectCountByIds)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSpaceWorkObjectCountByIds(ctx, req.(*GetSpaceWorkObjectCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSpaceWorkObjectCountReply)
		return ctx.Result(200, reply)
	}
}

func _Workbench_GetSpaceVersionCount0_HTTP_Handler(srv WorkbenchHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSpaceVersionCountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkbenchGetSpaceVersionCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSpaceVersionCount(ctx, req.(*GetSpaceVersionCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSpaceVersionCountReply)
		return ctx.Result(200, reply)
	}
}

func _Workbench_GetSpaceUserCount0_HTTP_Handler(srv WorkbenchHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSpaceUserCountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkbenchGetSpaceUserCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSpaceUserCount(ctx, req.(*GetSpaceUserCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSpaceUserCountReply)
		return ctx.Result(200, reply)
	}
}

type WorkbenchHTTPClient interface {
	GetSpaceUserCount(ctx context.Context, req *GetSpaceUserCountRequest, opts ...http.CallOption) (rsp *GetSpaceUserCountReply, err error)
	GetSpaceVersionCount(ctx context.Context, req *GetSpaceVersionCountRequest, opts ...http.CallOption) (rsp *GetSpaceVersionCountReply, err error)
	GetSpaceWorkBenchCount(ctx context.Context, req *GetSpaceWorkBenchCountRequest, opts ...http.CallOption) (rsp *GetSpaceWorkBenchCountReply, err error)
	GetSpaceWorkBenchCount2(ctx context.Context, req *GetSpaceWorkBenchCountRequest2, opts ...http.CallOption) (rsp *GetSpaceWorkBenchCountReply2, err error)
	GetSpaceWorkObjectCountByIds(ctx context.Context, req *GetSpaceWorkObjectCountRequest, opts ...http.CallOption) (rsp *GetSpaceWorkObjectCountReply, err error)
	GetWorkBenchCount(ctx context.Context, req *GetWorkBenchCountRequest, opts ...http.CallOption) (rsp *GetWorkBenchCountReply, err error)
}

type WorkbenchHTTPClientImpl struct {
	cc *http.Client
}

func NewWorkbenchHTTPClient(client *http.Client) WorkbenchHTTPClient {
	return &WorkbenchHTTPClientImpl{client}
}

func (c *WorkbenchHTTPClientImpl) GetSpaceUserCount(ctx context.Context, in *GetSpaceUserCountRequest, opts ...http.CallOption) (*GetSpaceUserCountReply, error) {
	var out GetSpaceUserCountReply
	pattern := "/my/workbench/space/user/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkbenchGetSpaceUserCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkbenchHTTPClientImpl) GetSpaceVersionCount(ctx context.Context, in *GetSpaceVersionCountRequest, opts ...http.CallOption) (*GetSpaceVersionCountReply, error) {
	var out GetSpaceVersionCountReply
	pattern := "/my/workbench/space/version/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkbenchGetSpaceVersionCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkbenchHTTPClientImpl) GetSpaceWorkBenchCount(ctx context.Context, in *GetSpaceWorkBenchCountRequest, opts ...http.CallOption) (*GetSpaceWorkBenchCountReply, error) {
	var out GetSpaceWorkBenchCountReply
	pattern := "v2/my/workbench/space/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkbenchGetSpaceWorkBenchCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkbenchHTTPClientImpl) GetSpaceWorkBenchCount2(ctx context.Context, in *GetSpaceWorkBenchCountRequest2, opts ...http.CallOption) (*GetSpaceWorkBenchCountReply2, error) {
	var out GetSpaceWorkBenchCountReply2
	pattern := "v2/my/workbench/space/count2"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkbenchGetSpaceWorkBenchCount2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkbenchHTTPClientImpl) GetSpaceWorkObjectCountByIds(ctx context.Context, in *GetSpaceWorkObjectCountRequest, opts ...http.CallOption) (*GetSpaceWorkObjectCountReply, error) {
	var out GetSpaceWorkObjectCountReply
	pattern := "/v2/my/workbench/space/work_object/count/by_ids"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkbenchGetSpaceWorkObjectCountByIds))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkbenchHTTPClientImpl) GetWorkBenchCount(ctx context.Context, in *GetWorkBenchCountRequest, opts ...http.CallOption) (*GetWorkBenchCountReply, error) {
	var out GetWorkBenchCountReply
	pattern := "/v2/my/workbench/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkbenchGetWorkBenchCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
