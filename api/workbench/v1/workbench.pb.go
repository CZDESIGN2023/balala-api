// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: workbench/v1/workbench.proto

package v1

import (
	comm "go-cs/api/comm"
	v1 "go-cs/api/search/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSpaceUserCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId   int64  `protobuf:"varint,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	StartTime string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   string `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *GetSpaceUserCountRequest) Reset() {
	*x = GetSpaceUserCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceUserCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceUserCountRequest) ProtoMessage() {}

func (x *GetSpaceUserCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceUserCountRequest.ProtoReflect.Descriptor instead.
func (*GetSpaceUserCountRequest) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{0}
}

func (x *GetSpaceUserCountRequest) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *GetSpaceUserCountRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetSpaceUserCountRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type GetSpaceUserCountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*GetSpaceUserCountReply_Error
	//	*GetSpaceUserCountReply_Data
	Result isGetSpaceUserCountReply_Result `protobuf_oneof:"result"`
}

func (x *GetSpaceUserCountReply) Reset() {
	*x = GetSpaceUserCountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceUserCountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceUserCountReply) ProtoMessage() {}

func (x *GetSpaceUserCountReply) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceUserCountReply.ProtoReflect.Descriptor instead.
func (*GetSpaceUserCountReply) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{1}
}

func (m *GetSpaceUserCountReply) GetResult() isGetSpaceUserCountReply_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *GetSpaceUserCountReply) GetError() *comm.ErrorInfo {
	if x, ok := x.GetResult().(*GetSpaceUserCountReply_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GetSpaceUserCountReply) GetData() *GetSpaceUserCountReplyData {
	if x, ok := x.GetResult().(*GetSpaceUserCountReply_Data); ok {
		return x.Data
	}
	return nil
}

type isGetSpaceUserCountReply_Result interface {
	isGetSpaceUserCountReply_Result()
}

type GetSpaceUserCountReply_Error struct {
	Error *comm.ErrorInfo `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type GetSpaceUserCountReply_Data struct {
	Data *GetSpaceUserCountReplyData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*GetSpaceUserCountReply_Error) isGetSpaceUserCountReply_Result() {}

func (*GetSpaceUserCountReply_Data) isGetSpaceUserCountReply_Result() {}

type GetSpaceUserCountReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetSpaceUserCountReplyData_Item `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetSpaceUserCountReplyData) Reset() {
	*x = GetSpaceUserCountReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceUserCountReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceUserCountReplyData) ProtoMessage() {}

func (x *GetSpaceUserCountReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceUserCountReplyData.ProtoReflect.Descriptor instead.
func (*GetSpaceUserCountReplyData) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{2}
}

func (x *GetSpaceUserCountReplyData) GetList() []*GetSpaceUserCountReplyData_Item {
	if x != nil {
		return x.List
	}
	return nil
}

type GetSpaceVersionCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId   int64  `protobuf:"varint,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	StartTime string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   string `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *GetSpaceVersionCountRequest) Reset() {
	*x = GetSpaceVersionCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceVersionCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceVersionCountRequest) ProtoMessage() {}

func (x *GetSpaceVersionCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceVersionCountRequest.ProtoReflect.Descriptor instead.
func (*GetSpaceVersionCountRequest) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{3}
}

func (x *GetSpaceVersionCountRequest) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *GetSpaceVersionCountRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetSpaceVersionCountRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type GetSpaceVersionCountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*GetSpaceVersionCountReply_Error
	//	*GetSpaceVersionCountReply_Data
	Result isGetSpaceVersionCountReply_Result `protobuf_oneof:"result"`
}

func (x *GetSpaceVersionCountReply) Reset() {
	*x = GetSpaceVersionCountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceVersionCountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceVersionCountReply) ProtoMessage() {}

func (x *GetSpaceVersionCountReply) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceVersionCountReply.ProtoReflect.Descriptor instead.
func (*GetSpaceVersionCountReply) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{4}
}

func (m *GetSpaceVersionCountReply) GetResult() isGetSpaceVersionCountReply_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *GetSpaceVersionCountReply) GetError() *comm.ErrorInfo {
	if x, ok := x.GetResult().(*GetSpaceVersionCountReply_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GetSpaceVersionCountReply) GetData() *GetSpaceVersionCountReplyData {
	if x, ok := x.GetResult().(*GetSpaceVersionCountReply_Data); ok {
		return x.Data
	}
	return nil
}

type isGetSpaceVersionCountReply_Result interface {
	isGetSpaceVersionCountReply_Result()
}

type GetSpaceVersionCountReply_Error struct {
	Error *comm.ErrorInfo `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type GetSpaceVersionCountReply_Data struct {
	Data *GetSpaceVersionCountReplyData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*GetSpaceVersionCountReply_Error) isGetSpaceVersionCountReply_Result() {}

func (*GetSpaceVersionCountReply_Data) isGetSpaceVersionCountReply_Result() {}

type GetSpaceVersionCountReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetSpaceVersionCountReplyData_Item `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetSpaceVersionCountReplyData) Reset() {
	*x = GetSpaceVersionCountReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceVersionCountReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceVersionCountReplyData) ProtoMessage() {}

func (x *GetSpaceVersionCountReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceVersionCountReplyData.ProtoReflect.Descriptor instead.
func (*GetSpaceVersionCountReplyData) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{5}
}

func (x *GetSpaceVersionCountReplyData) GetList() []*GetSpaceVersionCountReplyData_Item {
	if x != nil {
		return x.List
	}
	return nil
}

type GetWorkBenchCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetWorkBenchCountRequest) Reset() {
	*x = GetWorkBenchCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkBenchCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkBenchCountRequest) ProtoMessage() {}

func (x *GetWorkBenchCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkBenchCountRequest.ProtoReflect.Descriptor instead.
func (*GetWorkBenchCountRequest) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{6}
}

type GetWorkBenchCountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*GetWorkBenchCountReply_Error
	//	*GetWorkBenchCountReply_Data
	Result isGetWorkBenchCountReply_Result `protobuf_oneof:"result"`
}

func (x *GetWorkBenchCountReply) Reset() {
	*x = GetWorkBenchCountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkBenchCountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkBenchCountReply) ProtoMessage() {}

func (x *GetWorkBenchCountReply) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkBenchCountReply.ProtoReflect.Descriptor instead.
func (*GetWorkBenchCountReply) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{7}
}

func (m *GetWorkBenchCountReply) GetResult() isGetWorkBenchCountReply_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *GetWorkBenchCountReply) GetError() *comm.ErrorInfo {
	if x, ok := x.GetResult().(*GetWorkBenchCountReply_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GetWorkBenchCountReply) GetData() *GetWorkBenchCountReplyData {
	if x, ok := x.GetResult().(*GetWorkBenchCountReply_Data); ok {
		return x.Data
	}
	return nil
}

type isGetWorkBenchCountReply_Result interface {
	isGetWorkBenchCountReply_Result()
}

type GetWorkBenchCountReply_Error struct {
	Error *comm.ErrorInfo `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type GetWorkBenchCountReply_Data struct {
	Data *GetWorkBenchCountReplyData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*GetWorkBenchCountReply_Error) isGetWorkBenchCountReply_Result() {}

func (*GetWorkBenchCountReply_Data) isGetWorkBenchCountReply_Result() {}

type GetWorkBenchCountReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processing                           int64              `protobuf:"varint,1,opt,name=processing,proto3" json:"processing,omitempty"`
	Completed                            int64              `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	WeekProcessing                       int64              `protobuf:"varint,3,opt,name=weekProcessing,proto3" json:"weekProcessing,omitempty"`
	WeekCompleted                        int64              `protobuf:"varint,4,opt,name=weekCompleted,proto3" json:"weekCompleted,omitempty"`
	Followed                             int64              `protobuf:"varint,5,opt,name=followed,proto3" json:"followed,omitempty"`
	Created                              int64              `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
	ParticipatedProcessing               int64              `protobuf:"varint,7,opt,name=participatedProcessing,proto3" json:"participatedProcessing,omitempty"`
	ProcessingConditionGroup             *v1.ConditionGroup `protobuf:"bytes,9,opt,name=processingConditionGroup,proto3" json:"processingConditionGroup,omitempty"`
	WeekProcessingConditionGroup         *v1.ConditionGroup `protobuf:"bytes,10,opt,name=weekProcessingConditionGroup,proto3" json:"weekProcessingConditionGroup,omitempty"`
	ParticipatedProcessingConditionGroup *v1.ConditionGroup `protobuf:"bytes,11,opt,name=participatedProcessingConditionGroup,proto3" json:"participatedProcessingConditionGroup,omitempty"`
	DoneConditionGroup                   *v1.ConditionGroup `protobuf:"bytes,12,opt,name=doneConditionGroup,proto3" json:"doneConditionGroup,omitempty"`
	WeekDoneConditionGroup               *v1.ConditionGroup `protobuf:"bytes,13,opt,name=weekDoneConditionGroup,proto3" json:"weekDoneConditionGroup,omitempty"`
	CreatedConditionGroup                *v1.ConditionGroup `protobuf:"bytes,14,opt,name=createdConditionGroup,proto3" json:"createdConditionGroup,omitempty"`
	FollowedConditionGroup               *v1.ConditionGroup `protobuf:"bytes,15,opt,name=followedConditionGroup,proto3" json:"followedConditionGroup,omitempty"`
}

func (x *GetWorkBenchCountReplyData) Reset() {
	*x = GetWorkBenchCountReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkBenchCountReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkBenchCountReplyData) ProtoMessage() {}

func (x *GetWorkBenchCountReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkBenchCountReplyData.ProtoReflect.Descriptor instead.
func (*GetWorkBenchCountReplyData) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{8}
}

func (x *GetWorkBenchCountReplyData) GetProcessing() int64 {
	if x != nil {
		return x.Processing
	}
	return 0
}

func (x *GetWorkBenchCountReplyData) GetCompleted() int64 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *GetWorkBenchCountReplyData) GetWeekProcessing() int64 {
	if x != nil {
		return x.WeekProcessing
	}
	return 0
}

func (x *GetWorkBenchCountReplyData) GetWeekCompleted() int64 {
	if x != nil {
		return x.WeekCompleted
	}
	return 0
}

func (x *GetWorkBenchCountReplyData) GetFollowed() int64 {
	if x != nil {
		return x.Followed
	}
	return 0
}

func (x *GetWorkBenchCountReplyData) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *GetWorkBenchCountReplyData) GetParticipatedProcessing() int64 {
	if x != nil {
		return x.ParticipatedProcessing
	}
	return 0
}

func (x *GetWorkBenchCountReplyData) GetProcessingConditionGroup() *v1.ConditionGroup {
	if x != nil {
		return x.ProcessingConditionGroup
	}
	return nil
}

func (x *GetWorkBenchCountReplyData) GetWeekProcessingConditionGroup() *v1.ConditionGroup {
	if x != nil {
		return x.WeekProcessingConditionGroup
	}
	return nil
}

func (x *GetWorkBenchCountReplyData) GetParticipatedProcessingConditionGroup() *v1.ConditionGroup {
	if x != nil {
		return x.ParticipatedProcessingConditionGroup
	}
	return nil
}

func (x *GetWorkBenchCountReplyData) GetDoneConditionGroup() *v1.ConditionGroup {
	if x != nil {
		return x.DoneConditionGroup
	}
	return nil
}

func (x *GetWorkBenchCountReplyData) GetWeekDoneConditionGroup() *v1.ConditionGroup {
	if x != nil {
		return x.WeekDoneConditionGroup
	}
	return nil
}

func (x *GetWorkBenchCountReplyData) GetCreatedConditionGroup() *v1.ConditionGroup {
	if x != nil {
		return x.CreatedConditionGroup
	}
	return nil
}

func (x *GetWorkBenchCountReplyData) GetFollowedConditionGroup() *v1.ConditionGroup {
	if x != nil {
		return x.FollowedConditionGroup
	}
	return nil
}

type GetSpaceWorkBenchCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId int64 `protobuf:"varint,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
}

func (x *GetSpaceWorkBenchCountRequest) Reset() {
	*x = GetSpaceWorkBenchCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceWorkBenchCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceWorkBenchCountRequest) ProtoMessage() {}

func (x *GetSpaceWorkBenchCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceWorkBenchCountRequest.ProtoReflect.Descriptor instead.
func (*GetSpaceWorkBenchCountRequest) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{9}
}

func (x *GetSpaceWorkBenchCountRequest) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

type GetSpaceWorkBenchCountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*GetSpaceWorkBenchCountReply_Error
	//	*GetSpaceWorkBenchCountReply_Data
	Result isGetSpaceWorkBenchCountReply_Result `protobuf_oneof:"result"`
}

func (x *GetSpaceWorkBenchCountReply) Reset() {
	*x = GetSpaceWorkBenchCountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceWorkBenchCountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceWorkBenchCountReply) ProtoMessage() {}

func (x *GetSpaceWorkBenchCountReply) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceWorkBenchCountReply.ProtoReflect.Descriptor instead.
func (*GetSpaceWorkBenchCountReply) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{10}
}

func (m *GetSpaceWorkBenchCountReply) GetResult() isGetSpaceWorkBenchCountReply_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *GetSpaceWorkBenchCountReply) GetError() *comm.ErrorInfo {
	if x, ok := x.GetResult().(*GetSpaceWorkBenchCountReply_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GetSpaceWorkBenchCountReply) GetData() *GetSpaceWorkBenchCountReplyData {
	if x, ok := x.GetResult().(*GetSpaceWorkBenchCountReply_Data); ok {
		return x.Data
	}
	return nil
}

type isGetSpaceWorkBenchCountReply_Result interface {
	isGetSpaceWorkBenchCountReply_Result()
}

type GetSpaceWorkBenchCountReply_Error struct {
	Error *comm.ErrorInfo `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type GetSpaceWorkBenchCountReply_Data struct {
	Data *GetSpaceWorkBenchCountReplyData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*GetSpaceWorkBenchCountReply_Error) isGetSpaceWorkBenchCountReply_Result() {}

func (*GetSpaceWorkBenchCountReply_Data) isGetSpaceWorkBenchCountReply_Result() {}

type GetSpaceWorkBenchCountReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processing                int64              `protobuf:"varint,1,opt,name=processing,proto3" json:"processing,omitempty"`
	Completed                 int64              `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	CompleteRate              int64              `protobuf:"varint,3,opt,name=completeRate,proto3" json:"completeRate,omitempty"`
	Total                     int64              `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Followed                  int64              `protobuf:"varint,5,opt,name=followed,proto3" json:"followed,omitempty"`
	ProcessingAndExpiredCount int64              `protobuf:"varint,6,opt,name=processingAndExpiredCount,proto3" json:"processingAndExpiredCount,omitempty"` // 进行中但逾期的任务数
	ProcessingAndExpiredRate  int64              `protobuf:"varint,7,opt,name=processingAndExpiredRate,proto3" json:"processingAndExpiredRate,omitempty"`   // 进行中但逾期的任务数/任务总数
	DoneConditionGroup        *v1.ConditionGroup `protobuf:"bytes,8,opt,name=doneConditionGroup,proto3" json:"doneConditionGroup,omitempty"`
	ProcessingConditionGroup  *v1.ConditionGroup `protobuf:"bytes,9,opt,name=processingConditionGroup,proto3" json:"processingConditionGroup,omitempty"`
	FollowedConditionGroup    *v1.ConditionGroup `protobuf:"bytes,10,opt,name=followedConditionGroup,proto3" json:"followedConditionGroup,omitempty"`
}

func (x *GetSpaceWorkBenchCountReplyData) Reset() {
	*x = GetSpaceWorkBenchCountReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceWorkBenchCountReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceWorkBenchCountReplyData) ProtoMessage() {}

func (x *GetSpaceWorkBenchCountReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceWorkBenchCountReplyData.ProtoReflect.Descriptor instead.
func (*GetSpaceWorkBenchCountReplyData) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{11}
}

func (x *GetSpaceWorkBenchCountReplyData) GetProcessing() int64 {
	if x != nil {
		return x.Processing
	}
	return 0
}

func (x *GetSpaceWorkBenchCountReplyData) GetCompleted() int64 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *GetSpaceWorkBenchCountReplyData) GetCompleteRate() int64 {
	if x != nil {
		return x.CompleteRate
	}
	return 0
}

func (x *GetSpaceWorkBenchCountReplyData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSpaceWorkBenchCountReplyData) GetFollowed() int64 {
	if x != nil {
		return x.Followed
	}
	return 0
}

func (x *GetSpaceWorkBenchCountReplyData) GetProcessingAndExpiredCount() int64 {
	if x != nil {
		return x.ProcessingAndExpiredCount
	}
	return 0
}

func (x *GetSpaceWorkBenchCountReplyData) GetProcessingAndExpiredRate() int64 {
	if x != nil {
		return x.ProcessingAndExpiredRate
	}
	return 0
}

func (x *GetSpaceWorkBenchCountReplyData) GetDoneConditionGroup() *v1.ConditionGroup {
	if x != nil {
		return x.DoneConditionGroup
	}
	return nil
}

func (x *GetSpaceWorkBenchCountReplyData) GetProcessingConditionGroup() *v1.ConditionGroup {
	if x != nil {
		return x.ProcessingConditionGroup
	}
	return nil
}

func (x *GetSpaceWorkBenchCountReplyData) GetFollowedConditionGroup() *v1.ConditionGroup {
	if x != nil {
		return x.FollowedConditionGroup
	}
	return nil
}

type GetSpaceWorkBenchCountRequest2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId         int64                `protobuf:"varint,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	ConditionGroups []*v1.ConditionGroup `protobuf:"bytes,2,rep,name=conditionGroups,proto3" json:"conditionGroups,omitempty"`
}

func (x *GetSpaceWorkBenchCountRequest2) Reset() {
	*x = GetSpaceWorkBenchCountRequest2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceWorkBenchCountRequest2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceWorkBenchCountRequest2) ProtoMessage() {}

func (x *GetSpaceWorkBenchCountRequest2) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceWorkBenchCountRequest2.ProtoReflect.Descriptor instead.
func (*GetSpaceWorkBenchCountRequest2) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{12}
}

func (x *GetSpaceWorkBenchCountRequest2) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *GetSpaceWorkBenchCountRequest2) GetConditionGroups() []*v1.ConditionGroup {
	if x != nil {
		return x.ConditionGroups
	}
	return nil
}

type GetSpaceWorkBenchCountReply2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *comm.ErrorInfo                    `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Data  *GetSpaceWorkBenchCountReply2_Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSpaceWorkBenchCountReply2) Reset() {
	*x = GetSpaceWorkBenchCountReply2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceWorkBenchCountReply2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceWorkBenchCountReply2) ProtoMessage() {}

func (x *GetSpaceWorkBenchCountReply2) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceWorkBenchCountReply2.ProtoReflect.Descriptor instead.
func (*GetSpaceWorkBenchCountReply2) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{13}
}

func (x *GetSpaceWorkBenchCountReply2) GetError() *comm.ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetSpaceWorkBenchCountReply2) GetData() *GetSpaceWorkBenchCountReply2_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSpaceWorkObjectCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId   int64   `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Ids       []int64 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	StartTime string  `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   string  `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *GetSpaceWorkObjectCountRequest) Reset() {
	*x = GetSpaceWorkObjectCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceWorkObjectCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceWorkObjectCountRequest) ProtoMessage() {}

func (x *GetSpaceWorkObjectCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceWorkObjectCountRequest.ProtoReflect.Descriptor instead.
func (*GetSpaceWorkObjectCountRequest) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{14}
}

func (x *GetSpaceWorkObjectCountRequest) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *GetSpaceWorkObjectCountRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetSpaceWorkObjectCountRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetSpaceWorkObjectCountRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type GetSpaceWorkObjectCountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*GetSpaceWorkObjectCountReply_Error
	//	*GetSpaceWorkObjectCountReply_Data
	Result isGetSpaceWorkObjectCountReply_Result `protobuf_oneof:"result"`
}

func (x *GetSpaceWorkObjectCountReply) Reset() {
	*x = GetSpaceWorkObjectCountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceWorkObjectCountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceWorkObjectCountReply) ProtoMessage() {}

func (x *GetSpaceWorkObjectCountReply) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceWorkObjectCountReply.ProtoReflect.Descriptor instead.
func (*GetSpaceWorkObjectCountReply) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{15}
}

func (m *GetSpaceWorkObjectCountReply) GetResult() isGetSpaceWorkObjectCountReply_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *GetSpaceWorkObjectCountReply) GetError() *comm.ErrorInfo {
	if x, ok := x.GetResult().(*GetSpaceWorkObjectCountReply_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GetSpaceWorkObjectCountReply) GetData() *GetSpaceWorkObjectCountReplyData {
	if x, ok := x.GetResult().(*GetSpaceWorkObjectCountReply_Data); ok {
		return x.Data
	}
	return nil
}

type isGetSpaceWorkObjectCountReply_Result interface {
	isGetSpaceWorkObjectCountReply_Result()
}

type GetSpaceWorkObjectCountReply_Error struct {
	Error *comm.ErrorInfo `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type GetSpaceWorkObjectCountReply_Data struct {
	Data *GetSpaceWorkObjectCountReplyData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*GetSpaceWorkObjectCountReply_Error) isGetSpaceWorkObjectCountReply_Result() {}

func (*GetSpaceWorkObjectCountReply_Data) isGetSpaceWorkObjectCountReply_Result() {}

type GetSpaceWorkObjectCountReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetSpaceWorkObjectCountReplyData_Item `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetSpaceWorkObjectCountReplyData) Reset() {
	*x = GetSpaceWorkObjectCountReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceWorkObjectCountReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceWorkObjectCountReplyData) ProtoMessage() {}

func (x *GetSpaceWorkObjectCountReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceWorkObjectCountReplyData.ProtoReflect.Descriptor instead.
func (*GetSpaceWorkObjectCountReplyData) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{16}
}

func (x *GetSpaceWorkObjectCountReplyData) GetList() []*GetSpaceWorkObjectCountReplyData_Item {
	if x != nil {
		return x.List
	}
	return nil
}

type GetSpaceUserCountReplyData_PriorityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority string `protobuf:"bytes,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Count    int64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetSpaceUserCountReplyData_PriorityInfo) Reset() {
	*x = GetSpaceUserCountReplyData_PriorityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceUserCountReplyData_PriorityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceUserCountReplyData_PriorityInfo) ProtoMessage() {}

func (x *GetSpaceUserCountReplyData_PriorityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceUserCountReplyData_PriorityInfo.ProtoReflect.Descriptor instead.
func (*GetSpaceUserCountReplyData_PriorityInfo) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetSpaceUserCountReplyData_PriorityInfo) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *GetSpaceUserCountReplyData_PriorityInfo) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetSpaceUserCountReplyData_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Completed          int64                                      `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	Processing         int64                                      `protobuf:"varint,3,opt,name=processing,proto3" json:"processing,omitempty"`
	WeekProcessing     int64                                      `protobuf:"varint,4,opt,name=weekProcessing,proto3" json:"weekProcessing,omitempty"`
	Expired            int64                                      `protobuf:"varint,5,opt,name=expired,proto3" json:"expired,omitempty"`
	ClosedOrTerminated int64                                      `protobuf:"varint,6,opt,name=closedOrTerminated,proto3" json:"closedOrTerminated,omitempty"`
	CompleteRate       int64                                      `protobuf:"varint,7,opt,name=completeRate,proto3" json:"completeRate,omitempty"`
	Total              int64                                      `protobuf:"varint,8,opt,name=total,proto3" json:"total,omitempty"`
	PriorityInfos      []*GetSpaceUserCountReplyData_PriorityInfo `protobuf:"bytes,9,rep,name=priorityInfos,proto3" json:"priorityInfos,omitempty"`
}

func (x *GetSpaceUserCountReplyData_Item) Reset() {
	*x = GetSpaceUserCountReplyData_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceUserCountReplyData_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceUserCountReplyData_Item) ProtoMessage() {}

func (x *GetSpaceUserCountReplyData_Item) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceUserCountReplyData_Item.ProtoReflect.Descriptor instead.
func (*GetSpaceUserCountReplyData_Item) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{2, 1}
}

func (x *GetSpaceUserCountReplyData_Item) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSpaceUserCountReplyData_Item) GetCompleted() int64 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *GetSpaceUserCountReplyData_Item) GetProcessing() int64 {
	if x != nil {
		return x.Processing
	}
	return 0
}

func (x *GetSpaceUserCountReplyData_Item) GetWeekProcessing() int64 {
	if x != nil {
		return x.WeekProcessing
	}
	return 0
}

func (x *GetSpaceUserCountReplyData_Item) GetExpired() int64 {
	if x != nil {
		return x.Expired
	}
	return 0
}

func (x *GetSpaceUserCountReplyData_Item) GetClosedOrTerminated() int64 {
	if x != nil {
		return x.ClosedOrTerminated
	}
	return 0
}

func (x *GetSpaceUserCountReplyData_Item) GetCompleteRate() int64 {
	if x != nil {
		return x.CompleteRate
	}
	return 0
}

func (x *GetSpaceUserCountReplyData_Item) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSpaceUserCountReplyData_Item) GetPriorityInfos() []*GetSpaceUserCountReplyData_PriorityInfo {
	if x != nil {
		return x.PriorityInfos
	}
	return nil
}

type GetSpaceVersionCountReplyData_PriorityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority string `protobuf:"bytes,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Count    int64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetSpaceVersionCountReplyData_PriorityInfo) Reset() {
	*x = GetSpaceVersionCountReplyData_PriorityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceVersionCountReplyData_PriorityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceVersionCountReplyData_PriorityInfo) ProtoMessage() {}

func (x *GetSpaceVersionCountReplyData_PriorityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceVersionCountReplyData_PriorityInfo.ProtoReflect.Descriptor instead.
func (*GetSpaceVersionCountReplyData_PriorityInfo) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetSpaceVersionCountReplyData_PriorityInfo) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *GetSpaceVersionCountReplyData_PriorityInfo) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetSpaceVersionCountReplyData_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Completed          int64                                         `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	Processing         int64                                         `protobuf:"varint,3,opt,name=processing,proto3" json:"processing,omitempty"`
	WeekProcessing     int64                                         `protobuf:"varint,4,opt,name=weekProcessing,proto3" json:"weekProcessing,omitempty"`
	Expired            int64                                         `protobuf:"varint,5,opt,name=expired,proto3" json:"expired,omitempty"`
	ClosedOrTerminated int64                                         `protobuf:"varint,6,opt,name=closedOrTerminated,proto3" json:"closedOrTerminated,omitempty"`
	CompleteRate       int64                                         `protobuf:"varint,7,opt,name=completeRate,proto3" json:"completeRate,omitempty"`
	Total              int64                                         `protobuf:"varint,8,opt,name=total,proto3" json:"total,omitempty"`
	PriorityInfos      []*GetSpaceVersionCountReplyData_PriorityInfo `protobuf:"bytes,9,rep,name=priorityInfos,proto3" json:"priorityInfos,omitempty"`
}

func (x *GetSpaceVersionCountReplyData_Item) Reset() {
	*x = GetSpaceVersionCountReplyData_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceVersionCountReplyData_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceVersionCountReplyData_Item) ProtoMessage() {}

func (x *GetSpaceVersionCountReplyData_Item) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceVersionCountReplyData_Item.ProtoReflect.Descriptor instead.
func (*GetSpaceVersionCountReplyData_Item) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{5, 1}
}

func (x *GetSpaceVersionCountReplyData_Item) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSpaceVersionCountReplyData_Item) GetCompleted() int64 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *GetSpaceVersionCountReplyData_Item) GetProcessing() int64 {
	if x != nil {
		return x.Processing
	}
	return 0
}

func (x *GetSpaceVersionCountReplyData_Item) GetWeekProcessing() int64 {
	if x != nil {
		return x.WeekProcessing
	}
	return 0
}

func (x *GetSpaceVersionCountReplyData_Item) GetExpired() int64 {
	if x != nil {
		return x.Expired
	}
	return 0
}

func (x *GetSpaceVersionCountReplyData_Item) GetClosedOrTerminated() int64 {
	if x != nil {
		return x.ClosedOrTerminated
	}
	return 0
}

func (x *GetSpaceVersionCountReplyData_Item) GetCompleteRate() int64 {
	if x != nil {
		return x.CompleteRate
	}
	return 0
}

func (x *GetSpaceVersionCountReplyData_Item) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSpaceVersionCountReplyData_Item) GetPriorityInfos() []*GetSpaceVersionCountReplyData_PriorityInfo {
	if x != nil {
		return x.PriorityInfos
	}
	return nil
}

type GetSpaceWorkBenchCountReply2_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GetSpaceWorkBenchCountReply2_Data_Item `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetSpaceWorkBenchCountReply2_Data) Reset() {
	*x = GetSpaceWorkBenchCountReply2_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceWorkBenchCountReply2_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceWorkBenchCountReply2_Data) ProtoMessage() {}

func (x *GetSpaceWorkBenchCountReply2_Data) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceWorkBenchCountReply2_Data.ProtoReflect.Descriptor instead.
func (*GetSpaceWorkBenchCountReply2_Data) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{13, 0}
}

func (x *GetSpaceWorkBenchCountReply2_Data) GetResults() []*GetSpaceWorkBenchCountReply2_Data_Item {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetSpaceWorkBenchCountReply2_Data_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetSpaceWorkBenchCountReply2_Data_Item) Reset() {
	*x = GetSpaceWorkBenchCountReply2_Data_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceWorkBenchCountReply2_Data_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceWorkBenchCountReply2_Data_Item) ProtoMessage() {}

func (x *GetSpaceWorkBenchCountReply2_Data_Item) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceWorkBenchCountReply2_Data_Item.ProtoReflect.Descriptor instead.
func (*GetSpaceWorkBenchCountReply2_Data_Item) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{13, 0, 0}
}

func (x *GetSpaceWorkBenchCountReply2_Data_Item) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetSpaceWorkObjectCountReplyData_PriorityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority string `protobuf:"bytes,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Count    int64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetSpaceWorkObjectCountReplyData_PriorityInfo) Reset() {
	*x = GetSpaceWorkObjectCountReplyData_PriorityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceWorkObjectCountReplyData_PriorityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceWorkObjectCountReplyData_PriorityInfo) ProtoMessage() {}

func (x *GetSpaceWorkObjectCountReplyData_PriorityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceWorkObjectCountReplyData_PriorityInfo.ProtoReflect.Descriptor instead.
func (*GetSpaceWorkObjectCountReplyData_PriorityInfo) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{16, 0}
}

func (x *GetSpaceWorkObjectCountReplyData_PriorityInfo) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *GetSpaceWorkObjectCountReplyData_PriorityInfo) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetSpaceWorkObjectCountReplyData_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Completed          int64                                            `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	Processing         int64                                            `protobuf:"varint,3,opt,name=processing,proto3" json:"processing,omitempty"`
	WeekProcessing     int64                                            `protobuf:"varint,4,opt,name=weekProcessing,proto3" json:"weekProcessing,omitempty"`
	Expired            int64                                            `protobuf:"varint,5,opt,name=expired,proto3" json:"expired,omitempty"`
	ClosedOrTerminated int64                                            `protobuf:"varint,6,opt,name=closedOrTerminated,proto3" json:"closedOrTerminated,omitempty"`
	CompleteRate       int64                                            `protobuf:"varint,7,opt,name=completeRate,proto3" json:"completeRate,omitempty"`
	Total              int64                                            `protobuf:"varint,8,opt,name=total,proto3" json:"total,omitempty"`
	PriorityInfos      []*GetSpaceWorkObjectCountReplyData_PriorityInfo `protobuf:"bytes,9,rep,name=priorityInfos,proto3" json:"priorityInfos,omitempty"`
}

func (x *GetSpaceWorkObjectCountReplyData_Item) Reset() {
	*x = GetSpaceWorkObjectCountReplyData_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workbench_v1_workbench_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpaceWorkObjectCountReplyData_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceWorkObjectCountReplyData_Item) ProtoMessage() {}

func (x *GetSpaceWorkObjectCountReplyData_Item) ProtoReflect() protoreflect.Message {
	mi := &file_workbench_v1_workbench_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceWorkObjectCountReplyData_Item.ProtoReflect.Descriptor instead.
func (*GetSpaceWorkObjectCountReplyData_Item) Descriptor() ([]byte, []int) {
	return file_workbench_v1_workbench_proto_rawDescGZIP(), []int{16, 1}
}

func (x *GetSpaceWorkObjectCountReplyData_Item) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSpaceWorkObjectCountReplyData_Item) GetCompleted() int64 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *GetSpaceWorkObjectCountReplyData_Item) GetProcessing() int64 {
	if x != nil {
		return x.Processing
	}
	return 0
}

func (x *GetSpaceWorkObjectCountReplyData_Item) GetWeekProcessing() int64 {
	if x != nil {
		return x.WeekProcessing
	}
	return 0
}

func (x *GetSpaceWorkObjectCountReplyData_Item) GetExpired() int64 {
	if x != nil {
		return x.Expired
	}
	return 0
}

func (x *GetSpaceWorkObjectCountReplyData_Item) GetClosedOrTerminated() int64 {
	if x != nil {
		return x.ClosedOrTerminated
	}
	return 0
}

func (x *GetSpaceWorkObjectCountReplyData_Item) GetCompleteRate() int64 {
	if x != nil {
		return x.CompleteRate
	}
	return 0
}

func (x *GetSpaceWorkObjectCountReplyData_Item) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetSpaceWorkObjectCountReplyData_Item) GetPriorityInfos() []*GetSpaceWorkObjectCountReplyData_PriorityInfo {
	if x != nil {
		return x.PriorityInfos
	}
	return nil
}

var File_workbench_v1_workbench_proto protoreflect.FileDescriptor

var file_workbench_v1_workbench_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x89, 0x04, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a,
	0x40, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0xe1, 0x02, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x65, 0x65, 0x6b,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x4f, 0x72,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x5f, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x6f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x92,
	0x04, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x48, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x40, 0x0a, 0x0c, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xe4, 0x02, 0x0a,
	0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x77, 0x65, 0x65,
	0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x4f,
	0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x62, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x8f, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x99, 0x07, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x65, 0x65, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x77,
	0x65, 0x65, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x18, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x18, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x61, 0x0a, 0x1c, 0x77, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x1c, 0x77, 0x65, 0x65, 0x6b,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x71, 0x0a, 0x24, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x24, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4d, 0x0a, 0x12, 0x64,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x64, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x55, 0x0a, 0x16, 0x77, 0x65,
	0x65, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x16, 0x77, 0x65, 0x65, 0x6b, 0x44,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x53, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x55, 0x0a, 0x16, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x16, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x39, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x42,
	0x65, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xb0, 0x04, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x19, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x64, 0x6f, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x12, 0x64, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x59, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x55, 0x0a, 0x16, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x16, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x88, 0x02,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0x12, 0x25,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x78,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x1c, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x9b, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9b,
	0x04, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x1a, 0x40, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0xe7, 0x02, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x65, 0x65,
	0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x4f,
	0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x65, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x32, 0xdd, 0x07, 0x0a,
	0x09, 0x57, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x12, 0x8c, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01,
	0x2a, 0x22, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xa0, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22,
	0x1b, 0x76, 0x32, 0x2f, 0x6d, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xa4, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x76, 0x32, 0x2f, 0x6d, 0x79, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x32, 0x12, 0xbc, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01,
	0x2a, 0x22, 0x2f, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x62, 0x79, 0x5f, 0x69,
	0x64, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a,
	0x01, 0x2a, 0x22, 0x21, 0x2f, 0x6d, 0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x6d,
	0x79, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x2a, 0x0a, 0x10,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x50, 0x01, 0x5a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_workbench_v1_workbench_proto_rawDescOnce sync.Once
	file_workbench_v1_workbench_proto_rawDescData = file_workbench_v1_workbench_proto_rawDesc
)

func file_workbench_v1_workbench_proto_rawDescGZIP() []byte {
	file_workbench_v1_workbench_proto_rawDescOnce.Do(func() {
		file_workbench_v1_workbench_proto_rawDescData = protoimpl.X.CompressGZIP(file_workbench_v1_workbench_proto_rawDescData)
	})
	return file_workbench_v1_workbench_proto_rawDescData
}

var file_workbench_v1_workbench_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_workbench_v1_workbench_proto_goTypes = []interface{}{
	(*GetSpaceUserCountRequest)(nil),                      // 0: api.workbench.v1.GetSpaceUserCountRequest
	(*GetSpaceUserCountReply)(nil),                        // 1: api.workbench.v1.GetSpaceUserCountReply
	(*GetSpaceUserCountReplyData)(nil),                    // 2: api.workbench.v1.GetSpaceUserCountReplyData
	(*GetSpaceVersionCountRequest)(nil),                   // 3: api.workbench.v1.GetSpaceVersionCountRequest
	(*GetSpaceVersionCountReply)(nil),                     // 4: api.workbench.v1.GetSpaceVersionCountReply
	(*GetSpaceVersionCountReplyData)(nil),                 // 5: api.workbench.v1.GetSpaceVersionCountReplyData
	(*GetWorkBenchCountRequest)(nil),                      // 6: api.workbench.v1.GetWorkBenchCountRequest
	(*GetWorkBenchCountReply)(nil),                        // 7: api.workbench.v1.GetWorkBenchCountReply
	(*GetWorkBenchCountReplyData)(nil),                    // 8: api.workbench.v1.GetWorkBenchCountReplyData
	(*GetSpaceWorkBenchCountRequest)(nil),                 // 9: api.workbench.v1.GetSpaceWorkBenchCountRequest
	(*GetSpaceWorkBenchCountReply)(nil),                   // 10: api.workbench.v1.GetSpaceWorkBenchCountReply
	(*GetSpaceWorkBenchCountReplyData)(nil),               // 11: api.workbench.v1.GetSpaceWorkBenchCountReplyData
	(*GetSpaceWorkBenchCountRequest2)(nil),                // 12: api.workbench.v1.GetSpaceWorkBenchCountRequest2
	(*GetSpaceWorkBenchCountReply2)(nil),                  // 13: api.workbench.v1.GetSpaceWorkBenchCountReply2
	(*GetSpaceWorkObjectCountRequest)(nil),                // 14: api.workbench.v1.GetSpaceWorkObjectCountRequest
	(*GetSpaceWorkObjectCountReply)(nil),                  // 15: api.workbench.v1.GetSpaceWorkObjectCountReply
	(*GetSpaceWorkObjectCountReplyData)(nil),              // 16: api.workbench.v1.GetSpaceWorkObjectCountReplyData
	(*GetSpaceUserCountReplyData_PriorityInfo)(nil),       // 17: api.workbench.v1.GetSpaceUserCountReplyData.PriorityInfo
	(*GetSpaceUserCountReplyData_Item)(nil),               // 18: api.workbench.v1.GetSpaceUserCountReplyData.Item
	(*GetSpaceVersionCountReplyData_PriorityInfo)(nil),    // 19: api.workbench.v1.GetSpaceVersionCountReplyData.PriorityInfo
	(*GetSpaceVersionCountReplyData_Item)(nil),            // 20: api.workbench.v1.GetSpaceVersionCountReplyData.Item
	(*GetSpaceWorkBenchCountReply2_Data)(nil),             // 21: api.workbench.v1.GetSpaceWorkBenchCountReply2.Data
	(*GetSpaceWorkBenchCountReply2_Data_Item)(nil),        // 22: api.workbench.v1.GetSpaceWorkBenchCountReply2.Data.Item
	(*GetSpaceWorkObjectCountReplyData_PriorityInfo)(nil), // 23: api.workbench.v1.GetSpaceWorkObjectCountReplyData.PriorityInfo
	(*GetSpaceWorkObjectCountReplyData_Item)(nil),         // 24: api.workbench.v1.GetSpaceWorkObjectCountReplyData.Item
	(*comm.ErrorInfo)(nil),                                // 25: comm.ErrorInfo
	(*v1.ConditionGroup)(nil),                             // 26: api.search.v1.ConditionGroup
}
var file_workbench_v1_workbench_proto_depIdxs = []int32{
	25, // 0: api.workbench.v1.GetSpaceUserCountReply.error:type_name -> comm.ErrorInfo
	2,  // 1: api.workbench.v1.GetSpaceUserCountReply.data:type_name -> api.workbench.v1.GetSpaceUserCountReplyData
	18, // 2: api.workbench.v1.GetSpaceUserCountReplyData.list:type_name -> api.workbench.v1.GetSpaceUserCountReplyData.Item
	25, // 3: api.workbench.v1.GetSpaceVersionCountReply.error:type_name -> comm.ErrorInfo
	5,  // 4: api.workbench.v1.GetSpaceVersionCountReply.data:type_name -> api.workbench.v1.GetSpaceVersionCountReplyData
	20, // 5: api.workbench.v1.GetSpaceVersionCountReplyData.list:type_name -> api.workbench.v1.GetSpaceVersionCountReplyData.Item
	25, // 6: api.workbench.v1.GetWorkBenchCountReply.error:type_name -> comm.ErrorInfo
	8,  // 7: api.workbench.v1.GetWorkBenchCountReply.data:type_name -> api.workbench.v1.GetWorkBenchCountReplyData
	26, // 8: api.workbench.v1.GetWorkBenchCountReplyData.processingConditionGroup:type_name -> api.search.v1.ConditionGroup
	26, // 9: api.workbench.v1.GetWorkBenchCountReplyData.weekProcessingConditionGroup:type_name -> api.search.v1.ConditionGroup
	26, // 10: api.workbench.v1.GetWorkBenchCountReplyData.participatedProcessingConditionGroup:type_name -> api.search.v1.ConditionGroup
	26, // 11: api.workbench.v1.GetWorkBenchCountReplyData.doneConditionGroup:type_name -> api.search.v1.ConditionGroup
	26, // 12: api.workbench.v1.GetWorkBenchCountReplyData.weekDoneConditionGroup:type_name -> api.search.v1.ConditionGroup
	26, // 13: api.workbench.v1.GetWorkBenchCountReplyData.createdConditionGroup:type_name -> api.search.v1.ConditionGroup
	26, // 14: api.workbench.v1.GetWorkBenchCountReplyData.followedConditionGroup:type_name -> api.search.v1.ConditionGroup
	25, // 15: api.workbench.v1.GetSpaceWorkBenchCountReply.error:type_name -> comm.ErrorInfo
	11, // 16: api.workbench.v1.GetSpaceWorkBenchCountReply.data:type_name -> api.workbench.v1.GetSpaceWorkBenchCountReplyData
	26, // 17: api.workbench.v1.GetSpaceWorkBenchCountReplyData.doneConditionGroup:type_name -> api.search.v1.ConditionGroup
	26, // 18: api.workbench.v1.GetSpaceWorkBenchCountReplyData.processingConditionGroup:type_name -> api.search.v1.ConditionGroup
	26, // 19: api.workbench.v1.GetSpaceWorkBenchCountReplyData.followedConditionGroup:type_name -> api.search.v1.ConditionGroup
	26, // 20: api.workbench.v1.GetSpaceWorkBenchCountRequest2.conditionGroups:type_name -> api.search.v1.ConditionGroup
	25, // 21: api.workbench.v1.GetSpaceWorkBenchCountReply2.error:type_name -> comm.ErrorInfo
	21, // 22: api.workbench.v1.GetSpaceWorkBenchCountReply2.data:type_name -> api.workbench.v1.GetSpaceWorkBenchCountReply2.Data
	25, // 23: api.workbench.v1.GetSpaceWorkObjectCountReply.error:type_name -> comm.ErrorInfo
	16, // 24: api.workbench.v1.GetSpaceWorkObjectCountReply.data:type_name -> api.workbench.v1.GetSpaceWorkObjectCountReplyData
	24, // 25: api.workbench.v1.GetSpaceWorkObjectCountReplyData.list:type_name -> api.workbench.v1.GetSpaceWorkObjectCountReplyData.Item
	17, // 26: api.workbench.v1.GetSpaceUserCountReplyData.Item.priorityInfos:type_name -> api.workbench.v1.GetSpaceUserCountReplyData.PriorityInfo
	19, // 27: api.workbench.v1.GetSpaceVersionCountReplyData.Item.priorityInfos:type_name -> api.workbench.v1.GetSpaceVersionCountReplyData.PriorityInfo
	22, // 28: api.workbench.v1.GetSpaceWorkBenchCountReply2.Data.results:type_name -> api.workbench.v1.GetSpaceWorkBenchCountReply2.Data.Item
	23, // 29: api.workbench.v1.GetSpaceWorkObjectCountReplyData.Item.priorityInfos:type_name -> api.workbench.v1.GetSpaceWorkObjectCountReplyData.PriorityInfo
	6,  // 30: api.workbench.v1.Workbench.GetWorkBenchCount:input_type -> api.workbench.v1.GetWorkBenchCountRequest
	9,  // 31: api.workbench.v1.Workbench.GetSpaceWorkBenchCount:input_type -> api.workbench.v1.GetSpaceWorkBenchCountRequest
	12, // 32: api.workbench.v1.Workbench.GetSpaceWorkBenchCount2:input_type -> api.workbench.v1.GetSpaceWorkBenchCountRequest2
	14, // 33: api.workbench.v1.Workbench.GetSpaceWorkObjectCountByIds:input_type -> api.workbench.v1.GetSpaceWorkObjectCountRequest
	3,  // 34: api.workbench.v1.Workbench.GetSpaceVersionCount:input_type -> api.workbench.v1.GetSpaceVersionCountRequest
	0,  // 35: api.workbench.v1.Workbench.GetSpaceUserCount:input_type -> api.workbench.v1.GetSpaceUserCountRequest
	7,  // 36: api.workbench.v1.Workbench.GetWorkBenchCount:output_type -> api.workbench.v1.GetWorkBenchCountReply
	10, // 37: api.workbench.v1.Workbench.GetSpaceWorkBenchCount:output_type -> api.workbench.v1.GetSpaceWorkBenchCountReply
	13, // 38: api.workbench.v1.Workbench.GetSpaceWorkBenchCount2:output_type -> api.workbench.v1.GetSpaceWorkBenchCountReply2
	15, // 39: api.workbench.v1.Workbench.GetSpaceWorkObjectCountByIds:output_type -> api.workbench.v1.GetSpaceWorkObjectCountReply
	4,  // 40: api.workbench.v1.Workbench.GetSpaceVersionCount:output_type -> api.workbench.v1.GetSpaceVersionCountReply
	1,  // 41: api.workbench.v1.Workbench.GetSpaceUserCount:output_type -> api.workbench.v1.GetSpaceUserCountReply
	36, // [36:42] is the sub-list for method output_type
	30, // [30:36] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_workbench_v1_workbench_proto_init() }
func file_workbench_v1_workbench_proto_init() {
	if File_workbench_v1_workbench_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_workbench_v1_workbench_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceUserCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceUserCountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceUserCountReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceVersionCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceVersionCountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceVersionCountReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkBenchCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkBenchCountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkBenchCountReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceWorkBenchCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceWorkBenchCountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceWorkBenchCountReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceWorkBenchCountRequest2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceWorkBenchCountReply2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceWorkObjectCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceWorkObjectCountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceWorkObjectCountReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceUserCountReplyData_PriorityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceUserCountReplyData_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceVersionCountReplyData_PriorityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceVersionCountReplyData_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceWorkBenchCountReply2_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceWorkBenchCountReply2_Data_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceWorkObjectCountReplyData_PriorityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workbench_v1_workbench_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpaceWorkObjectCountReplyData_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_workbench_v1_workbench_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*GetSpaceUserCountReply_Error)(nil),
		(*GetSpaceUserCountReply_Data)(nil),
	}
	file_workbench_v1_workbench_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*GetSpaceVersionCountReply_Error)(nil),
		(*GetSpaceVersionCountReply_Data)(nil),
	}
	file_workbench_v1_workbench_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GetWorkBenchCountReply_Error)(nil),
		(*GetWorkBenchCountReply_Data)(nil),
	}
	file_workbench_v1_workbench_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*GetSpaceWorkBenchCountReply_Error)(nil),
		(*GetSpaceWorkBenchCountReply_Data)(nil),
	}
	file_workbench_v1_workbench_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*GetSpaceWorkObjectCountReply_Error)(nil),
		(*GetSpaceWorkObjectCountReply_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workbench_v1_workbench_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workbench_v1_workbench_proto_goTypes,
		DependencyIndexes: file_workbench_v1_workbench_proto_depIdxs,
		MessageInfos:      file_workbench_v1_workbench_proto_msgTypes,
	}.Build()
	File_workbench_v1_workbench_proto = out.File
	file_workbench_v1_workbench_proto_rawDesc = nil
	file_workbench_v1_workbench_proto_goTypes = nil
	file_workbench_v1_workbench_proto_depIdxs = nil
}
