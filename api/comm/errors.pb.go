// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: comm/errors.proto

package comm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 应用编码
type AppCode int32

const (
	AppCode_UNKNOWN1 AppCode = 0
	AppCode_GO_TALK  AppCode = 3
)

// Enum value maps for AppCode.
var (
	AppCode_name = map[int32]string{
		0: "UNKNOWN1",
		3: "GO_TALK",
	}
	AppCode_value = map[string]int32{
		"UNKNOWN1": 0,
		"GO_TALK":  3,
	}
)

func (x AppCode) Enum() *AppCode {
	p := new(AppCode)
	*p = x
	return p
}

func (x AppCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppCode) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_errors_proto_enumTypes[0].Descriptor()
}

func (AppCode) Type() protoreflect.EnumType {
	return &file_comm_errors_proto_enumTypes[0]
}

func (x AppCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppCode.Descriptor instead.
func (AppCode) EnumDescriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{0}
}

// 服务编码
type ServiceCode int32

const (
	ServiceCode_UNKNOWN2 ServiceCode = 0
	// 会话服务
	ServiceCode_CHAT ServiceCode = 1
	// 消息服务
	ServiceCode_MESSAGE ServiceCode = 2
	// 用户
	ServiceCode_USER ServiceCode = 3
	// 登入
	ServiceCode_LOGIN ServiceCode = 4
	// 權限類
	ServiceCode_PERMISSION ServiceCode = 5
	// DB
	ServiceCode_DB ServiceCode = 6
	// File & Upload
	ServiceCode_FILE ServiceCode = 7
	// 通用業務類
	ServiceCode_COMMON ServiceCode = 8
	// 文件夾(主播作品)
	ServiceCode_FOLDER ServiceCode = 9
	// 关系
	ServiceCode_RELATIONSHIP ServiceCode = 10
	// 项目空间
	ServiceCode_SPACE ServiceCode = 11
)

// Enum value maps for ServiceCode.
var (
	ServiceCode_name = map[int32]string{
		0:  "UNKNOWN2",
		1:  "CHAT",
		2:  "MESSAGE",
		3:  "USER",
		4:  "LOGIN",
		5:  "PERMISSION",
		6:  "DB",
		7:  "FILE",
		8:  "COMMON",
		9:  "FOLDER",
		10: "RELATIONSHIP",
		11: "SPACE",
	}
	ServiceCode_value = map[string]int32{
		"UNKNOWN2":     0,
		"CHAT":         1,
		"MESSAGE":      2,
		"USER":         3,
		"LOGIN":        4,
		"PERMISSION":   5,
		"DB":           6,
		"FILE":         7,
		"COMMON":       8,
		"FOLDER":       9,
		"RELATIONSHIP": 10,
		"SPACE":        11,
	}
)

func (x ServiceCode) Enum() *ServiceCode {
	p := new(ServiceCode)
	*p = x
	return p
}

func (x ServiceCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceCode) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_errors_proto_enumTypes[1].Descriptor()
}

func (ServiceCode) Type() protoreflect.EnumType {
	return &file_comm_errors_proto_enumTypes[1]
}

func (x ServiceCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceCode.Descriptor instead.
func (ServiceCode) EnumDescriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{1}
}

// 错误定义格式 根据业务来定义,总的6位 xyyzzz, app-service-num
// ErrorCode represents a specific error code in the system
type ErrorCode int32

const (
	// Unspecified error.
	ErrorCode_ERROR_REASON_UNSPECIFIED ErrorCode = 0
	// [Test]
	// --------------------------------------
	ErrorCode_ERROR_MSG_TEST        ErrorCode = 300001
	ErrorCode_ERROR_MSG_FORMAT_TEST ErrorCode = 300002
	// [GLOBAL]
	// --------------------------------------
	ErrorCode_ERROR_INTERNAL      ErrorCode = 301000
	ErrorCode_ERROR_BUSINESS      ErrorCode = 301001
	ErrorCode_ERROR_RES_NOT_EXIST ErrorCode = 301002 //资源不存在
	// [USER]
	// --------------------------------------
	// 查詢用戶信息失敗
	ErrorCode_USER_GET_FAIL ErrorCode = 303001
	// 查詢用戶列表失敗
	ErrorCode_USER_LIST_FAIL ErrorCode = 303002
	// 用户账号已存在
	ErrorCode_USER_NAME_IS_EXIST ErrorCode = 303003
	// 用户昵称已存在
	ErrorCode_USER_NICKNAME_IS_EXIST ErrorCode = 303004
	// 二次验证密码错误
	ErrorCode_USER_WORONG_CONFIG_PASSWORD ErrorCode = 303005
	// 用户名格式错误
	ErrorCode_USER_WRONG_RULE_USERNAME ErrorCode = 303007
	// 用户密码格式错误
	ErrorCode_USER_WRONG_RULE_PASSWORD ErrorCode = 303008
	// 用户昵称格式错误
	ErrorCode_USER_WRONG_RULE_NICKNAME ErrorCode = 303009
	// [LOGIN]
	// --------------------------------------
	// 登入失敗
	ErrorCode_LOGIN_FAIL ErrorCode = 304001
	// 用戶未登入
	ErrorCode_LOGIN_USER_NOT_LOGIN ErrorCode = 304002
	// 帳號或密碼錯誤
	ErrorCode_LOGIN_WRONG_ACCOUNT_OR_PASSWORD ErrorCode = 304003
	// 驗證碼錯誤
	ErrorCode_LOGIN_WRONG_VERIFICATION_CODE ErrorCode = 304004
	// 帳號已存在
	ErrorCode_LOGIN_ACCOUNT_ALREADY_EXISTS ErrorCode = 304005
	// 帳號不存在
	ErrorCode_LOGIN_ACCOUNT_NOT_EXISTS ErrorCode = 304006
	// 帳號已被禁用
	ErrorCode_LOGIN_ACCOUNT_DISABLED ErrorCode = 304007
	// 帳號尚未啟用
	ErrorCode_LOGIN_ACCOUNT_NOT_ACTIVATED ErrorCode = 304008
	// 登入狀態已過期
	ErrorCode_LOGIN_STATUS_EXPIRED ErrorCode = 304009
	// 初始化失敗
	ErrorCode_LOGIN_INIT_FAIL ErrorCode = 304010
	// 登出失败
	ErrorCode_LOGIN_USER_LOGOUT_FAIL ErrorCode = 304011
	// [DB]
	// --------------------------------------
	// 添加失敗
	ErrorCode_DB_ADD_FAIL ErrorCode = 306001
	// 查詢失敗
	ErrorCode_DB_QUERY_FAIL ErrorCode = 306002
	// 修改失敗
	ErrorCode_DB_MODIFY_FAIL ErrorCode = 306003
	// 删除失败
	ErrorCode_DB_DELETE_FAIL ErrorCode = 306004
	// [FILE]
	// --------------------------------------
	// 上傳檔案失敗
	ErrorCode_FILE_UPLOAD_FAIL ErrorCode = 307001
	// 檔案大小超過限制
	ErrorCode_FILE_SIZE_EXCEED_LIMIT ErrorCode = 307002
	// 檔案類型不支援
	ErrorCode_FILE_TYPE_NOT_SUPPORTED ErrorCode = 307003
	// 檔案名稱過長
	ErrorCode_FILE_FILENAME_TOO_LONG ErrorCode = 307004
	// 取得檔案資訊失敗
	ErrorCode_FILE_GET_INFO_FAIL ErrorCode = 307005
	// [COMMON]
	// --------------------------------------
	// 參數錯誤，請檢查時間區間
	ErrorCode_COMMON_WRONG_TIME_INTERVAL ErrorCode = 308001
	// 時間跨度太大
	ErrorCode_COMMON_EXCEED_TIME_SPAN ErrorCode = 308002
	// 字串過長
	ErrorCode_COMMON_EXCEED_STRING_LENGTH ErrorCode = 308003
	// 參數錯誤
	ErrorCode_COMMON_WRONG_PARAMETER ErrorCode = 308004
	// 參數錯誤(附加format value)
	ErrorCode_COMMON_WRONG_PARAMETER_FMT ErrorCode = 308005
	// http method錯誤
	ErrorCode_COMMON_WRONG_HTTP_METHOD ErrorCode = 308006
	// [PERMISSION]
	// --------------------------------------
	// 權限不足
	ErrorCode_PERMISSION_INSUFFICIENT_PERMISSIONS ErrorCode = 305001
	// 非法操作
	ErrorCode_PERMISSION_ILLEGAL_OPERATION ErrorCode = 305002
	// 數據權限不足
	ErrorCode_PERMISSION_INSUFFICIENT_DATA_PERMISSIONS ErrorCode = 305003
	// ip白名單不通過
	ErrorCode_PERMISSION_NOT_IN_IP_WHITELIST ErrorCode = 305004
	// 用戶被禁言
	ErrorCode_PERMISSION_USER_SPEAK_FORBIDDEN ErrorCode = 305005
	// 用戶被黑名單
	ErrorCode_PERMISSION_USER_BANNED ErrorCode = 305006
	// 用戶權限異常
	ErrorCode_PERMISSION_USER_PERMISSIONS_UNUSUAL ErrorCode = 305007
	// [SPACE]
	// --------------------------------------
	// 项目空间-创建失败
	ErrorCode_SPACE_CREATE_FAIL ErrorCode = 311001
	// 项目空间-名称已存在
	ErrorCode_SPACE_NAME_EXIST ErrorCode = 311002
	// 项目空间-创建者信息错误
	ErrorCode_SPACE_CREATOR_WRONG ErrorCode = 311003
	// 项目空间-信息错误
	ErrorCode_SPACE_INFO_WRONG ErrorCode = 311004
	// 项目空间-名称校验错误
	ErrorCode_SPACE_NAME_CHECK_WRONG ErrorCode = 311005
	// 项目空间-删除失败
	ErrorCode_SPACE_DEL_FAIL ErrorCode = 311006
	// 项目空间-不存在
	ErrorCode_SPACE_NOT_EXIST ErrorCode = 311007
	// 项目空间-成员信息错误
	ErrorCode_SPACE_MEMBER_WRONG ErrorCode = 311101
	// 项目空间-成员 已存在
	ErrorCode_SPACE_MEMBER_EXSIT ErrorCode = 311102
	// 项目空间-成员添加失败
	ErrorCode_SPACE_MEMBER_ADD_FAIL ErrorCode = 311103
	// 项目空间-成员移除失败
	ErrorCode_SPACE_MEMBER_REMOVE_FAIL ErrorCode = 311104
	// 项目空间-工作项 创建失败
	ErrorCode_SPACE_WORK_OBJECT_CREATE_FAIL ErrorCode = 312001
	// 项目空间-工作项  创建者信息错误
	ErrorCode_SPACE_WORK_OBJECT_CREATOR_WRONG ErrorCode = 312002
	// 项目空间-工作项 名称已存在
	ErrorCode_SPACE_WORK_OBJECT_NAME_EXIST ErrorCode = 312003
	// 项目空间-工作项 信息错误
	ErrorCode_SPACE_WORK_OBJECT_INFO_WRONG ErrorCode = 312004
	// 项目空间-工作项 模块名长度为2-50个字符
	ErrorCode_SPACE_WORK_OBJECT_NAME_RULE_WRONG ErrorCode = 312005
	// [SPACE_TAG]
	// --------------------------------------
	ErrorCode_SPACE_TAG_NAME_IS_EXIST      ErrorCode = 301101
	ErrorCode_SPACE_TAG_CREATE_FAIL        ErrorCode = 301102
	ErrorCode_SPACE_TAG_INFO_WRONG         ErrorCode = 301103
	ErrorCode_SPACE_TAG_DEL_FAIL           ErrorCode = 301104
	ErrorCode_SPACE_TAG_RELATION_EXIST     ErrorCode = 301105
	ErrorCode_SPACE_TAG_RELATION_NOT_EXIST ErrorCode = 301106
	// [SPACE_WORK_ITEM]
	// 项目空间-工作用例
	// --------------------------------------
	ErrorCode_SPACE_WORK_ITEM_CREATE_FAIL ErrorCode = 301202
	// 任务指定负责人信息错误
	ErrorCode_SPACE_WORK_ITEM_DIRECTOR_WRONG ErrorCode = 301203
	// 子任务指定负责人信息错误
	ErrorCode_SPACE_WORK_TASK_DIRECTOR_WRONG ErrorCode = 301204
	// 设置负责人信息失败
	ErrorCode_SPACE_WORK_SET_DIRECTOR_FAIL ErrorCode = 301205
	// 设置负责人已存在
	ErrorCode_SPACE_WORK_DIRECTOR_EXIST ErrorCode = 301207
	// 设置负责人不存在
	ErrorCode_SPACE_WORK_DIRECTOR_NOT_EXIST ErrorCode = 301208
	// 设置工作任务-TAG失败
	ErrorCode_SPACE_WORK_SET_TAG_FAIL ErrorCode = 301209
	// 工作任务Tag信息错误
	ErrorCode_SPACE_WORK_ITEM_TAG_WRONG ErrorCode = 301211
	// 设置负责人不能为空
	ErrorCode_SPACE_WORK_SET_DIRECTOR_MUST_HASONE ErrorCode = 301212
	// 任务名称不合法 模块名长度为2-200个字符
	ErrorCode_SPACE_WORK_ITEM_NAME_RULE_WRONG ErrorCode = 301213
	// 工作流状态不可用
	ErrorCode_WORK_FLOW_STATUS_NOT_ENABLE ErrorCode = 301300
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:      "ERROR_REASON_UNSPECIFIED",
		300001: "ERROR_MSG_TEST",
		300002: "ERROR_MSG_FORMAT_TEST",
		301000: "ERROR_INTERNAL",
		301001: "ERROR_BUSINESS",
		301002: "ERROR_RES_NOT_EXIST",
		303001: "USER_GET_FAIL",
		303002: "USER_LIST_FAIL",
		303003: "USER_NAME_IS_EXIST",
		303004: "USER_NICKNAME_IS_EXIST",
		303005: "USER_WORONG_CONFIG_PASSWORD",
		303007: "USER_WRONG_RULE_USERNAME",
		303008: "USER_WRONG_RULE_PASSWORD",
		303009: "USER_WRONG_RULE_NICKNAME",
		304001: "LOGIN_FAIL",
		304002: "LOGIN_USER_NOT_LOGIN",
		304003: "LOGIN_WRONG_ACCOUNT_OR_PASSWORD",
		304004: "LOGIN_WRONG_VERIFICATION_CODE",
		304005: "LOGIN_ACCOUNT_ALREADY_EXISTS",
		304006: "LOGIN_ACCOUNT_NOT_EXISTS",
		304007: "LOGIN_ACCOUNT_DISABLED",
		304008: "LOGIN_ACCOUNT_NOT_ACTIVATED",
		304009: "LOGIN_STATUS_EXPIRED",
		304010: "LOGIN_INIT_FAIL",
		304011: "LOGIN_USER_LOGOUT_FAIL",
		306001: "DB_ADD_FAIL",
		306002: "DB_QUERY_FAIL",
		306003: "DB_MODIFY_FAIL",
		306004: "DB_DELETE_FAIL",
		307001: "FILE_UPLOAD_FAIL",
		307002: "FILE_SIZE_EXCEED_LIMIT",
		307003: "FILE_TYPE_NOT_SUPPORTED",
		307004: "FILE_FILENAME_TOO_LONG",
		307005: "FILE_GET_INFO_FAIL",
		308001: "COMMON_WRONG_TIME_INTERVAL",
		308002: "COMMON_EXCEED_TIME_SPAN",
		308003: "COMMON_EXCEED_STRING_LENGTH",
		308004: "COMMON_WRONG_PARAMETER",
		308005: "COMMON_WRONG_PARAMETER_FMT",
		308006: "COMMON_WRONG_HTTP_METHOD",
		305001: "PERMISSION_INSUFFICIENT_PERMISSIONS",
		305002: "PERMISSION_ILLEGAL_OPERATION",
		305003: "PERMISSION_INSUFFICIENT_DATA_PERMISSIONS",
		305004: "PERMISSION_NOT_IN_IP_WHITELIST",
		305005: "PERMISSION_USER_SPEAK_FORBIDDEN",
		305006: "PERMISSION_USER_BANNED",
		305007: "PERMISSION_USER_PERMISSIONS_UNUSUAL",
		311001: "SPACE_CREATE_FAIL",
		311002: "SPACE_NAME_EXIST",
		311003: "SPACE_CREATOR_WRONG",
		311004: "SPACE_INFO_WRONG",
		311005: "SPACE_NAME_CHECK_WRONG",
		311006: "SPACE_DEL_FAIL",
		311007: "SPACE_NOT_EXIST",
		311101: "SPACE_MEMBER_WRONG",
		311102: "SPACE_MEMBER_EXSIT",
		311103: "SPACE_MEMBER_ADD_FAIL",
		311104: "SPACE_MEMBER_REMOVE_FAIL",
		312001: "SPACE_WORK_OBJECT_CREATE_FAIL",
		312002: "SPACE_WORK_OBJECT_CREATOR_WRONG",
		312003: "SPACE_WORK_OBJECT_NAME_EXIST",
		312004: "SPACE_WORK_OBJECT_INFO_WRONG",
		312005: "SPACE_WORK_OBJECT_NAME_RULE_WRONG",
		301101: "SPACE_TAG_NAME_IS_EXIST",
		301102: "SPACE_TAG_CREATE_FAIL",
		301103: "SPACE_TAG_INFO_WRONG",
		301104: "SPACE_TAG_DEL_FAIL",
		301105: "SPACE_TAG_RELATION_EXIST",
		301106: "SPACE_TAG_RELATION_NOT_EXIST",
		301202: "SPACE_WORK_ITEM_CREATE_FAIL",
		301203: "SPACE_WORK_ITEM_DIRECTOR_WRONG",
		301204: "SPACE_WORK_TASK_DIRECTOR_WRONG",
		301205: "SPACE_WORK_SET_DIRECTOR_FAIL",
		301207: "SPACE_WORK_DIRECTOR_EXIST",
		301208: "SPACE_WORK_DIRECTOR_NOT_EXIST",
		301209: "SPACE_WORK_SET_TAG_FAIL",
		301211: "SPACE_WORK_ITEM_TAG_WRONG",
		301212: "SPACE_WORK_SET_DIRECTOR_MUST_HASONE",
		301213: "SPACE_WORK_ITEM_NAME_RULE_WRONG",
		301300: "WORK_FLOW_STATUS_NOT_ENABLE",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_REASON_UNSPECIFIED":                 0,
		"ERROR_MSG_TEST":                           300001,
		"ERROR_MSG_FORMAT_TEST":                    300002,
		"ERROR_INTERNAL":                           301000,
		"ERROR_BUSINESS":                           301001,
		"ERROR_RES_NOT_EXIST":                      301002,
		"USER_GET_FAIL":                            303001,
		"USER_LIST_FAIL":                           303002,
		"USER_NAME_IS_EXIST":                       303003,
		"USER_NICKNAME_IS_EXIST":                   303004,
		"USER_WORONG_CONFIG_PASSWORD":              303005,
		"USER_WRONG_RULE_USERNAME":                 303007,
		"USER_WRONG_RULE_PASSWORD":                 303008,
		"USER_WRONG_RULE_NICKNAME":                 303009,
		"LOGIN_FAIL":                               304001,
		"LOGIN_USER_NOT_LOGIN":                     304002,
		"LOGIN_WRONG_ACCOUNT_OR_PASSWORD":          304003,
		"LOGIN_WRONG_VERIFICATION_CODE":            304004,
		"LOGIN_ACCOUNT_ALREADY_EXISTS":             304005,
		"LOGIN_ACCOUNT_NOT_EXISTS":                 304006,
		"LOGIN_ACCOUNT_DISABLED":                   304007,
		"LOGIN_ACCOUNT_NOT_ACTIVATED":              304008,
		"LOGIN_STATUS_EXPIRED":                     304009,
		"LOGIN_INIT_FAIL":                          304010,
		"LOGIN_USER_LOGOUT_FAIL":                   304011,
		"DB_ADD_FAIL":                              306001,
		"DB_QUERY_FAIL":                            306002,
		"DB_MODIFY_FAIL":                           306003,
		"DB_DELETE_FAIL":                           306004,
		"FILE_UPLOAD_FAIL":                         307001,
		"FILE_SIZE_EXCEED_LIMIT":                   307002,
		"FILE_TYPE_NOT_SUPPORTED":                  307003,
		"FILE_FILENAME_TOO_LONG":                   307004,
		"FILE_GET_INFO_FAIL":                       307005,
		"COMMON_WRONG_TIME_INTERVAL":               308001,
		"COMMON_EXCEED_TIME_SPAN":                  308002,
		"COMMON_EXCEED_STRING_LENGTH":              308003,
		"COMMON_WRONG_PARAMETER":                   308004,
		"COMMON_WRONG_PARAMETER_FMT":               308005,
		"COMMON_WRONG_HTTP_METHOD":                 308006,
		"PERMISSION_INSUFFICIENT_PERMISSIONS":      305001,
		"PERMISSION_ILLEGAL_OPERATION":             305002,
		"PERMISSION_INSUFFICIENT_DATA_PERMISSIONS": 305003,
		"PERMISSION_NOT_IN_IP_WHITELIST":           305004,
		"PERMISSION_USER_SPEAK_FORBIDDEN":          305005,
		"PERMISSION_USER_BANNED":                   305006,
		"PERMISSION_USER_PERMISSIONS_UNUSUAL":      305007,
		"SPACE_CREATE_FAIL":                        311001,
		"SPACE_NAME_EXIST":                         311002,
		"SPACE_CREATOR_WRONG":                      311003,
		"SPACE_INFO_WRONG":                         311004,
		"SPACE_NAME_CHECK_WRONG":                   311005,
		"SPACE_DEL_FAIL":                           311006,
		"SPACE_NOT_EXIST":                          311007,
		"SPACE_MEMBER_WRONG":                       311101,
		"SPACE_MEMBER_EXSIT":                       311102,
		"SPACE_MEMBER_ADD_FAIL":                    311103,
		"SPACE_MEMBER_REMOVE_FAIL":                 311104,
		"SPACE_WORK_OBJECT_CREATE_FAIL":            312001,
		"SPACE_WORK_OBJECT_CREATOR_WRONG":          312002,
		"SPACE_WORK_OBJECT_NAME_EXIST":             312003,
		"SPACE_WORK_OBJECT_INFO_WRONG":             312004,
		"SPACE_WORK_OBJECT_NAME_RULE_WRONG":        312005,
		"SPACE_TAG_NAME_IS_EXIST":                  301101,
		"SPACE_TAG_CREATE_FAIL":                    301102,
		"SPACE_TAG_INFO_WRONG":                     301103,
		"SPACE_TAG_DEL_FAIL":                       301104,
		"SPACE_TAG_RELATION_EXIST":                 301105,
		"SPACE_TAG_RELATION_NOT_EXIST":             301106,
		"SPACE_WORK_ITEM_CREATE_FAIL":              301202,
		"SPACE_WORK_ITEM_DIRECTOR_WRONG":           301203,
		"SPACE_WORK_TASK_DIRECTOR_WRONG":           301204,
		"SPACE_WORK_SET_DIRECTOR_FAIL":             301205,
		"SPACE_WORK_DIRECTOR_EXIST":                301207,
		"SPACE_WORK_DIRECTOR_NOT_EXIST":            301208,
		"SPACE_WORK_SET_TAG_FAIL":                  301209,
		"SPACE_WORK_ITEM_TAG_WRONG":                301211,
		"SPACE_WORK_SET_DIRECTOR_MUST_HASONE":      301212,
		"SPACE_WORK_ITEM_NAME_RULE_WRONG":          301213,
		"WORK_FLOW_STATUS_NOT_ENABLE":              301300,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_errors_proto_enumTypes[2].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_comm_errors_proto_enumTypes[2]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{2}
}

// ErrorReply represents an error reply from the server.
type ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error code.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// The detailed error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_errors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_comm_errors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorInfo) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ErrorInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CommonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*CommonReply_Error
	//	*CommonReply_Data
	Result isCommonReply_Result `protobuf_oneof:"result"`
}

func (x *CommonReply) Reset() {
	*x = CommonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_errors_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonReply) ProtoMessage() {}

func (x *CommonReply) ProtoReflect() protoreflect.Message {
	mi := &file_comm_errors_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonReply.ProtoReflect.Descriptor instead.
func (*CommonReply) Descriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{1}
}

func (m *CommonReply) GetResult() isCommonReply_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *CommonReply) GetError() *ErrorInfo {
	if x, ok := x.GetResult().(*CommonReply_Error); ok {
		return x.Error
	}
	return nil
}

func (x *CommonReply) GetData() string {
	if x, ok := x.GetResult().(*CommonReply_Data); ok {
		return x.Data
	}
	return ""
}

type isCommonReply_Result interface {
	isCommonReply_Result()
}

type CommonReply_Error struct {
	Error *ErrorInfo `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type CommonReply_Data struct {
	Data string `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*CommonReply_Error) isCommonReply_Result() {}

func (*CommonReply_Data) isCommonReply_Result() {}

type BatchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	New    []int64 `protobuf:"varint,1,rep,packed,name=new,proto3" json:"new,omitempty"`
	Add    []int64 `protobuf:"varint,2,rep,packed,name=add,proto3" json:"add,omitempty"`
	Remove []int64 `protobuf:"varint,3,rep,packed,name=remove,proto3" json:"remove,omitempty"`
}

func (x *BatchParams) Reset() {
	*x = BatchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_errors_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchParams) ProtoMessage() {}

func (x *BatchParams) ProtoReflect() protoreflect.Message {
	mi := &file_comm_errors_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchParams.ProtoReflect.Descriptor instead.
func (*BatchParams) Descriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{2}
}

func (x *BatchParams) GetNew() []int64 {
	if x != nil {
		return x.New
	}
	return nil
}

func (x *BatchParams) GetAdd() []int64 {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *BatchParams) GetRemove() []int64 {
	if x != nil {
		return x.Remove
	}
	return nil
}

type BatchFileParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	New    []*BatchFileParamsFileInfo `protobuf:"bytes,1,rep,name=new,proto3" json:"new,omitempty"`
	Add    []int64                    `protobuf:"varint,2,rep,packed,name=add,proto3" json:"add,omitempty"`
	Remove []int64                    `protobuf:"varint,3,rep,packed,name=remove,proto3" json:"remove,omitempty"`
}

func (x *BatchFileParams) Reset() {
	*x = BatchFileParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_errors_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchFileParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchFileParams) ProtoMessage() {}

func (x *BatchFileParams) ProtoReflect() protoreflect.Message {
	mi := &file_comm_errors_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchFileParams.ProtoReflect.Descriptor instead.
func (*BatchFileParams) Descriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{3}
}

func (x *BatchFileParams) GetNew() []*BatchFileParamsFileInfo {
	if x != nil {
		return x.New
	}
	return nil
}

func (x *BatchFileParams) GetAdd() []int64 {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *BatchFileParams) GetRemove() []int64 {
	if x != nil {
		return x.Remove
	}
	return nil
}

type BatchFileParamsFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Uri  string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *BatchFileParamsFileInfo) Reset() {
	*x = BatchFileParamsFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_errors_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchFileParamsFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchFileParamsFileInfo) ProtoMessage() {}

func (x *BatchFileParamsFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_comm_errors_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchFileParamsFileInfo.ProtoReflect.Descriptor instead.
func (*BatchFileParamsFileInfo) Descriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{4}
}

func (x *BatchFileParamsFileInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchFileParamsFileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BatchFileParamsFileInfo) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type AnyBatchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	New    []string `protobuf:"bytes,1,rep,name=new,proto3" json:"new,omitempty"`
	Add    []int64  `protobuf:"varint,2,rep,packed,name=add,proto3" json:"add,omitempty"`
	Remove []int64  `protobuf:"varint,3,rep,packed,name=remove,proto3" json:"remove,omitempty"`
}

func (x *AnyBatchParams) Reset() {
	*x = AnyBatchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_errors_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyBatchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyBatchParams) ProtoMessage() {}

func (x *AnyBatchParams) ProtoReflect() protoreflect.Message {
	mi := &file_comm_errors_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyBatchParams.ProtoReflect.Descriptor instead.
func (*AnyBatchParams) Descriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{5}
}

func (x *AnyBatchParams) GetNew() []string {
	if x != nil {
		return x.New
	}
	return nil
}

func (x *AnyBatchParams) GetAdd() []int64 {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *AnyBatchParams) GetRemove() []int64 {
	if x != nil {
		return x.Remove
	}
	return nil
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  int32 `protobuf:"zigzag32,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize int32 `protobuf:"zigzag32,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_errors_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_comm_errors_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{6}
}

func (x *Pagination) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *Pagination) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ServiceError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason   string            `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message  string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServiceError) Reset() {
	*x = ServiceError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_errors_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceError) ProtoMessage() {}

func (x *ServiceError) ProtoReflect() protoreflect.Message {
	mi := &file_comm_errors_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceError.ProtoReflect.Descriptor instead.
func (*ServiceError) Descriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceError) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ServiceError) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ServiceError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ServiceError) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SearchOptGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	FieldType string `protobuf:"bytes,2,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty"`
	NeedEmpty bool   `protobuf:"varint,3,opt,name=need_empty,json=needEmpty,proto3" json:"need_empty,omitempty"`
}

func (x *SearchOptGroup) Reset() {
	*x = SearchOptGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_errors_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOptGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOptGroup) ProtoMessage() {}

func (x *SearchOptGroup) ProtoReflect() protoreflect.Message {
	mi := &file_comm_errors_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOptGroup.ProtoReflect.Descriptor instead.
func (*SearchOptGroup) Descriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{8}
}

func (x *SearchOptGroup) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SearchOptGroup) GetFieldType() string {
	if x != nil {
		return x.FieldType
	}
	return ""
}

func (x *SearchOptGroup) GetNeedEmpty() bool {
	if x != nil {
		return x.NeedEmpty
	}
	return false
}

type SearchOptConditionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conjunction string                        `protobuf:"bytes,1,opt,name=conjunction,proto3" json:"conjunction,omitempty"`
	Group       *SearchOptConditionGroupGroup `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *SearchOptConditionGroup) Reset() {
	*x = SearchOptConditionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_errors_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOptConditionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOptConditionGroup) ProtoMessage() {}

func (x *SearchOptConditionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_comm_errors_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOptConditionGroup.ProtoReflect.Descriptor instead.
func (*SearchOptConditionGroup) Descriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{9}
}

func (x *SearchOptConditionGroup) GetConjunction() string {
	if x != nil {
		return x.Conjunction
	}
	return ""
}

func (x *SearchOptConditionGroup) GetGroup() *SearchOptConditionGroupGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type SearchOptConditionGroupGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conjunction    string                                   `protobuf:"bytes,1,opt,name=conjunction,proto3" json:"conjunction,omitempty"`
	Conditions     []*SearchOptConditionGroupGroupCondition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ConditionGroup *SearchOptConditionGroup                 `protobuf:"bytes,3,opt,name=condition_group,json=conditionGroup,proto3" json:"condition_group,omitempty"`
}

func (x *SearchOptConditionGroupGroup) Reset() {
	*x = SearchOptConditionGroupGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_errors_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOptConditionGroupGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOptConditionGroupGroup) ProtoMessage() {}

func (x *SearchOptConditionGroupGroup) ProtoReflect() protoreflect.Message {
	mi := &file_comm_errors_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOptConditionGroupGroup.ProtoReflect.Descriptor instead.
func (*SearchOptConditionGroupGroup) Descriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{10}
}

func (x *SearchOptConditionGroupGroup) GetConjunction() string {
	if x != nil {
		return x.Conjunction
	}
	return ""
}

func (x *SearchOptConditionGroupGroup) GetConditions() []*SearchOptConditionGroupGroupCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *SearchOptConditionGroupGroup) GetConditionGroup() *SearchOptConditionGroup {
	if x != nil {
		return x.ConditionGroup
	}
	return nil
}

type SearchOptConditionGroupGroupCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	ValueList []string `protobuf:"bytes,2,rep,name=value_list,json=valueList,proto3" json:"value_list,omitempty"`
	Operator  string   `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	FieldType string   `protobuf:"bytes,4,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty"`
	SpaceId   int64    `protobuf:"zigzag64,5,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"` //限定查询条件项目范围
}

func (x *SearchOptConditionGroupGroupCondition) Reset() {
	*x = SearchOptConditionGroupGroupCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_errors_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOptConditionGroupGroupCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOptConditionGroupGroupCondition) ProtoMessage() {}

func (x *SearchOptConditionGroupGroupCondition) ProtoReflect() protoreflect.Message {
	mi := &file_comm_errors_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOptConditionGroupGroupCondition.ProtoReflect.Descriptor instead.
func (*SearchOptConditionGroupGroupCondition) Descriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{11}
}

func (x *SearchOptConditionGroupGroupCondition) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SearchOptConditionGroupGroupCondition) GetValueList() []string {
	if x != nil {
		return x.ValueList
	}
	return nil
}

func (x *SearchOptConditionGroupGroupCondition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *SearchOptConditionGroupGroupCondition) GetFieldType() string {
	if x != nil {
		return x.FieldType
	}
	return ""
}

func (x *SearchOptConditionGroupGroupCondition) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

type SearchOptConditionSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	FieldType string `protobuf:"bytes,2,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty"`
	Order     string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SearchOptConditionSort) Reset() {
	*x = SearchOptConditionSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_errors_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOptConditionSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOptConditionSort) ProtoMessage() {}

func (x *SearchOptConditionSort) ProtoReflect() protoreflect.Message {
	mi := &file_comm_errors_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOptConditionSort.ProtoReflect.Descriptor instead.
func (*SearchOptConditionSort) Descriptor() ([]byte, []int) {
	return file_comm_errors_proto_rawDescGZIP(), []int{12}
}

func (x *SearchOptConditionSort) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SearchOptConditionSort) GetFieldType() string {
	if x != nil {
		return x.FieldType
	}
	return ""
}

func (x *SearchOptConditionSort) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

var File_comm_errors_proto protoreflect.FileDescriptor

var file_comm_errors_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x22, 0x39, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x49, 0x0a, 0x0b,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x65, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x6c, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x03, 0x6e, 0x65,
	0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x64, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x4f, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x4c, 0x0a, 0x0e, 0x41, 0x6e, 0x79, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x0c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x75, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xd5, 0x01, 0x0a, 0x1c, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0xb2, 0x01, 0x0a, 0x25, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x72, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2a, 0x24, 0x0a, 0x07, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x31, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x4f, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x10,
	0x03, 0x2a, 0x9e, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x32, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x43, 0x48, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x44,
	0x42, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4c,
	0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x48, 0x49, 0x50, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x10, 0x0b, 0x2a, 0xb4, 0x13, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x45, 0x53, 0x54,
	0x10, 0xe1, 0xa7, 0x12, 0x12, 0x1b, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0xe2, 0xa7,
	0x12, 0x12, 0x14, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0xc8, 0xaf, 0x12, 0x12, 0x14, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0xc9, 0xaf, 0x12, 0x12, 0x19, 0x0a,
	0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0xca, 0xaf, 0x12, 0x12, 0x13, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x99, 0xbf, 0x12, 0x12, 0x14, 0x0a,
	0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x9a, 0xbf, 0x12, 0x12, 0x18, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x49, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x9b, 0xbf, 0x12, 0x12, 0x1c, 0x0a,
	0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49,
	0x53, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x9c, 0xbf, 0x12, 0x12, 0x21, 0x0a, 0x1b, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x57, 0x4f, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x9d, 0xbf, 0x12, 0x12, 0x1e,
	0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x9f, 0xbf, 0x12, 0x12, 0x1e,
	0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0xa0, 0xbf, 0x12, 0x12, 0x1e,
	0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x5f, 0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xa1, 0xbf, 0x12, 0x12, 0x10,
	0x0a, 0x0a, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x81, 0xc7, 0x12,
	0x12, 0x1a, 0x0a, 0x14, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x82, 0xc7, 0x12, 0x12, 0x25, 0x0a, 0x1f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10,
	0x83, 0xc7, 0x12, 0x12, 0x23, 0x0a, 0x1d, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x57, 0x52, 0x4f,
	0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0x84, 0xc7, 0x12, 0x12, 0x22, 0x0a, 0x1c, 0x4c, 0x4f, 0x47, 0x49,
	0x4e, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x85, 0xc7, 0x12, 0x12, 0x1e, 0x0a, 0x18,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x86, 0xc7, 0x12, 0x12, 0x1c, 0x0a, 0x16,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x87, 0xc7, 0x12, 0x12, 0x21, 0x0a, 0x1b, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x88, 0xc7, 0x12, 0x12, 0x1a, 0x0a,
	0x14, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x89, 0xc7, 0x12, 0x12, 0x15, 0x0a, 0x0f, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x8a, 0xc7, 0x12,
	0x12, 0x1c, 0x0a, 0x16, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c,
	0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x8b, 0xc7, 0x12, 0x12, 0x11,
	0x0a, 0x0b, 0x44, 0x42, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xd1, 0xd6,
	0x12, 0x12, 0x13, 0x0a, 0x0d, 0x44, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x10, 0xd2, 0xd6, 0x12, 0x12, 0x14, 0x0a, 0x0e, 0x44, 0x42, 0x5f, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xd3, 0xd6, 0x12, 0x12, 0x14, 0x0a, 0x0e,
	0x44, 0x42, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xd4,
	0xd6, 0x12, 0x12, 0x16, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xb9, 0xde, 0x12, 0x12, 0x1c, 0x0a, 0x16, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x10, 0xba, 0xde, 0x12, 0x12, 0x1d, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0xbb, 0xde, 0x12, 0x12, 0x1c, 0x0a, 0x16, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e,
	0x47, 0x10, 0xbc, 0xde, 0x12, 0x12, 0x18, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xbd, 0xde, 0x12, 0x12,
	0x20, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0xa1, 0xe6,
	0x12, 0x12, 0x1d, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x4e, 0x10, 0xa2, 0xe6, 0x12,
	0x12, 0x21, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10,
	0xa3, 0xe6, 0x12, 0x12, 0x1c, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x57, 0x52,
	0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0xa4, 0xe6,
	0x12, 0x12, 0x20, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x57, 0x52, 0x4f, 0x4e,
	0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x4d, 0x54, 0x10,
	0xa5, 0xe6, 0x12, 0x12, 0x1e, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x57, 0x52,
	0x4f, 0x4e, 0x47, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10,
	0xa6, 0xe6, 0x12, 0x12, 0x29, 0x0a, 0x23, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xe9, 0xce, 0x12, 0x12, 0x22,
	0x0a, 0x1c, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4c, 0x4c,
	0x45, 0x47, 0x41, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xea,
	0xce, 0x12, 0x12, 0x2e, 0x0a, 0x28, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xeb,
	0xce, 0x12, 0x12, 0x24, 0x0a, 0x1e, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x49, 0x50, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0xec, 0xce, 0x12, 0x12, 0x25, 0x0a, 0x1f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x41,
	0x4b, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0xed, 0xce, 0x12, 0x12,
	0x1c, 0x0a, 0x16, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0xee, 0xce, 0x12, 0x12, 0x29, 0x0a,
	0x23, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x55, 0x4e, 0x55,
	0x53, 0x55, 0x41, 0x4c, 0x10, 0xef, 0xce, 0x12, 0x12, 0x17, 0x0a, 0x11, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xd9, 0xfd,
	0x12, 0x12, 0x16, 0x0a, 0x10, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xda, 0xfd, 0x12, 0x12, 0x19, 0x0a, 0x13, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47,
	0x10, 0xdb, 0xfd, 0x12, 0x12, 0x16, 0x0a, 0x10, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x10, 0xdc, 0xfd, 0x12, 0x12, 0x1c, 0x0a, 0x16,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x10, 0xdd, 0xfd, 0x12, 0x12, 0x14, 0x0a, 0x0e, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xde, 0xfd, 0x12,
	0x12, 0x15, 0x0a, 0x0f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0xdf, 0xfd, 0x12, 0x12, 0x18, 0x0a, 0x12, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x10, 0xbd, 0xfe,
	0x12, 0x12, 0x18, 0x0a, 0x12, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x45, 0x58, 0x53, 0x49, 0x54, 0x10, 0xbe, 0xfe, 0x12, 0x12, 0x1b, 0x0a, 0x15, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0xbf, 0xfe, 0x12, 0x12, 0x1e, 0x0a, 0x18, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0xc0, 0xfe, 0x12, 0x12, 0x23, 0x0a, 0x1d, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xc1, 0x85, 0x13, 0x12, 0x25, 0x0a,
	0x1f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47,
	0x10, 0xc2, 0x85, 0x13, 0x12, 0x22, 0x0a, 0x1c, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0xc3, 0x85, 0x13, 0x12, 0x22, 0x0a, 0x1c, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x10, 0xc4, 0x85, 0x13, 0x12, 0x27, 0x0a, 0x21,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x4f, 0x4e,
	0x47, 0x10, 0xc5, 0x85, 0x13, 0x12, 0x1d, 0x0a, 0x17, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x54,
	0x41, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0xad, 0xb0, 0x12, 0x12, 0x1b, 0x0a, 0x15, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x41,
	0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xae, 0xb0,
	0x12, 0x12, 0x1a, 0x0a, 0x14, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x10, 0xaf, 0xb0, 0x12, 0x12, 0x18, 0x0a,
	0x12, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0xb0, 0xb0, 0x12, 0x12, 0x1e, 0x0a, 0x18, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x54, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0xb1, 0xb0, 0x12, 0x12, 0x22, 0x0a, 0x1c, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x54, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xb2, 0xb0, 0x12, 0x12, 0x21, 0x0a, 0x1b, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x92, 0xb1, 0x12, 0x12, 0x24,
	0x0a, 0x1e, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47,
	0x10, 0x93, 0xb1, 0x12, 0x12, 0x24, 0x0a, 0x1e, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x10, 0x94, 0xb1, 0x12, 0x12, 0x22, 0x0a, 0x1c, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x95, 0xb1, 0x12, 0x12, 0x1f,
	0x0a, 0x19, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x97, 0xb1, 0x12, 0x12,
	0x23, 0x0a, 0x1d, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0x98, 0xb1, 0x12, 0x12, 0x1d, 0x0a, 0x17, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x99, 0xb1, 0x12, 0x12, 0x1f, 0x0a, 0x19, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47,
	0x10, 0x9b, 0xb1, 0x12, 0x12, 0x29, 0x0a, 0x23, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x4d, 0x55, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x4f, 0x4e, 0x45, 0x10, 0x9c, 0xb1, 0x12, 0x12,
	0x25, 0x0a, 0x1f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x4f,
	0x4e, 0x47, 0x10, 0x9d, 0xb1, 0x12, 0x12, 0x21, 0x0a, 0x1b, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xf4, 0xb1, 0x12, 0x42, 0x15, 0x5a, 0x13, 0x67, 0x6f, 0x2d,
	0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x3b, 0x63, 0x6f, 0x6d, 0x6d,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_comm_errors_proto_rawDescOnce sync.Once
	file_comm_errors_proto_rawDescData = file_comm_errors_proto_rawDesc
)

func file_comm_errors_proto_rawDescGZIP() []byte {
	file_comm_errors_proto_rawDescOnce.Do(func() {
		file_comm_errors_proto_rawDescData = protoimpl.X.CompressGZIP(file_comm_errors_proto_rawDescData)
	})
	return file_comm_errors_proto_rawDescData
}

var file_comm_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_comm_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_comm_errors_proto_goTypes = []interface{}{
	(AppCode)(0),                                  // 0: comm.AppCode
	(ServiceCode)(0),                              // 1: comm.ServiceCode
	(ErrorCode)(0),                                // 2: comm.ErrorCode
	(*ErrorInfo)(nil),                             // 3: comm.ErrorInfo
	(*CommonReply)(nil),                           // 4: comm.CommonReply
	(*BatchParams)(nil),                           // 5: comm.BatchParams
	(*BatchFileParams)(nil),                       // 6: comm.BatchFileParams
	(*BatchFileParamsFileInfo)(nil),               // 7: comm.BatchFileParamsFileInfo
	(*AnyBatchParams)(nil),                        // 8: comm.AnyBatchParams
	(*Pagination)(nil),                            // 9: comm.Pagination
	(*ServiceError)(nil),                          // 10: comm.ServiceError
	(*SearchOptGroup)(nil),                        // 11: comm.SearchOptGroup
	(*SearchOptConditionGroup)(nil),               // 12: comm.SearchOptConditionGroup
	(*SearchOptConditionGroupGroup)(nil),          // 13: comm.SearchOptConditionGroupGroup
	(*SearchOptConditionGroupGroupCondition)(nil), // 14: comm.SearchOptConditionGroupGroupCondition
	(*SearchOptConditionSort)(nil),                // 15: comm.SearchOptConditionSort
	nil,                                           // 16: comm.ServiceError.MetadataEntry
}
var file_comm_errors_proto_depIdxs = []int32{
	3,  // 0: comm.CommonReply.error:type_name -> comm.ErrorInfo
	7,  // 1: comm.BatchFileParams.new:type_name -> comm.BatchFileParamsFileInfo
	16, // 2: comm.ServiceError.metadata:type_name -> comm.ServiceError.MetadataEntry
	13, // 3: comm.SearchOptConditionGroup.group:type_name -> comm.SearchOptConditionGroupGroup
	14, // 4: comm.SearchOptConditionGroupGroup.conditions:type_name -> comm.SearchOptConditionGroupGroupCondition
	12, // 5: comm.SearchOptConditionGroupGroup.condition_group:type_name -> comm.SearchOptConditionGroup
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_comm_errors_proto_init() }
func file_comm_errors_proto_init() {
	if File_comm_errors_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_comm_errors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_errors_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_errors_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_errors_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchFileParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_errors_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchFileParamsFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_errors_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyBatchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_errors_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_errors_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_errors_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOptGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_errors_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOptConditionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_errors_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOptConditionGroupGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_errors_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOptConditionGroupGroupCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_errors_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOptConditionSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_comm_errors_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CommonReply_Error)(nil),
		(*CommonReply_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_comm_errors_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_comm_errors_proto_goTypes,
		DependencyIndexes: file_comm_errors_proto_depIdxs,
		EnumInfos:         file_comm_errors_proto_enumTypes,
		MessageInfos:      file_comm_errors_proto_msgTypes,
	}.Build()
	File_comm_errors_proto = out.File
	file_comm_errors_proto_rawDesc = nil
	file_comm_errors_proto_goTypes = nil
	file_comm_errors_proto_depIdxs = nil
}
