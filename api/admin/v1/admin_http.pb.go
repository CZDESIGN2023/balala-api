// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: admin/v1/admin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminAddUser = "/api.admin.v1.admin/AddUser"
const OperationAdminResetPwd = "/api.admin.v1.admin/ResetPwd"
const OperationAdminSearchUser = "/api.admin.v1.admin/SearchUser"
const OperationAdminSetNickname = "/api.admin.v1.admin/SetNickname"
const OperationAdminSetRole = "/api.admin.v1.admin/SetRole"

type AdminHTTPServer interface {
	AddUser(context.Context, *AddUserRequest) (*AddUserReply, error)
	ResetPwd(context.Context, *ResetPwdRequest) (*ResetPwdReply, error)
	SearchUser(context.Context, *SearchUserRequest) (*SearchUserReply, error)
	SetNickname(context.Context, *SetNicknameRequest) (*SetNicknameReply, error)
	SetRole(context.Context, *SetRoleRequest) (*SetRoleReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.POST("/admin/search_user", _Admin_SearchUser0_HTTP_Handler(srv))
	r.POST("/admin/set_role", _Admin_SetRole0_HTTP_Handler(srv))
	r.POST("/admin/reset_pwd", _Admin_ResetPwd0_HTTP_Handler(srv))
	r.POST("/admin/set_nickname", _Admin_SetNickname0_HTTP_Handler(srv))
	r.POST("/admin/add_user", _Admin_AddUser0_HTTP_Handler(srv))
}

func _Admin_SearchUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminSearchUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchUser(ctx, req.(*SearchUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchUserReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_SetRole0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminSetRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetRole(ctx, req.(*SetRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ResetPwd0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetPwdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminResetPwd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResetPwd(ctx, req.(*ResetPwdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetPwdReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_SetNickname0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetNicknameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminSetNickname)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetNickname(ctx, req.(*SetNicknameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetNicknameReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_AddUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminAddUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUser(ctx, req.(*AddUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	AddUser(ctx context.Context, req *AddUserRequest, opts ...http.CallOption) (rsp *AddUserReply, err error)
	ResetPwd(ctx context.Context, req *ResetPwdRequest, opts ...http.CallOption) (rsp *ResetPwdReply, err error)
	SearchUser(ctx context.Context, req *SearchUserRequest, opts ...http.CallOption) (rsp *SearchUserReply, err error)
	SetNickname(ctx context.Context, req *SetNicknameRequest, opts ...http.CallOption) (rsp *SetNicknameReply, err error)
	SetRole(ctx context.Context, req *SetRoleRequest, opts ...http.CallOption) (rsp *SetRoleReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) AddUser(ctx context.Context, in *AddUserRequest, opts ...http.CallOption) (*AddUserReply, error) {
	var out AddUserReply
	pattern := "/admin/add_user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminAddUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ResetPwd(ctx context.Context, in *ResetPwdRequest, opts ...http.CallOption) (*ResetPwdReply, error) {
	var out ResetPwdReply
	pattern := "/admin/reset_pwd"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminResetPwd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...http.CallOption) (*SearchUserReply, error) {
	var out SearchUserReply
	pattern := "/admin/search_user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminSearchUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) SetNickname(ctx context.Context, in *SetNicknameRequest, opts ...http.CallOption) (*SetNicknameReply, error) {
	var out SetNicknameReply
	pattern := "/admin/set_nickname"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminSetNickname))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) SetRole(ctx context.Context, in *SetRoleRequest, opts ...http.CallOption) (*SetRoleReply, error) {
	var out SetRoleReply
	pattern := "/admin/set_role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminSetRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
