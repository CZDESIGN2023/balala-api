// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: space_work_item_flow/v1/space_work_item_flow.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SpaceWorkItemFlow_SetSpaceWorkItemFlowDirector_FullMethodName  = "/api.space_work_item_flow.v1.space_work_item_flow/SetSpaceWorkItemFlowDirector"
	SpaceWorkItemFlow_SetSpaceWorkItemFlowPlanTime_FullMethodName  = "/api.space_work_item_flow.v1.space_work_item_flow/SetSpaceWorkItemFlowPlanTime"
	SpaceWorkItemFlow_UpgradeWorkItemFlow_FullMethodName           = "/api.space_work_item_flow.v1.space_work_item_flow/UpgradeWorkItemFlow"
	SpaceWorkItemFlow_BatUpgradeWorkItemFlowPrepare_FullMethodName = "/api.space_work_item_flow.v1.space_work_item_flow/BatUpgradeWorkItemFlowPrepare"
	SpaceWorkItemFlow_BatchUpgradeWorkItemFlow_FullMethodName      = "/api.space_work_item_flow.v1.space_work_item_flow/BatchUpgradeWorkItemFlow"
)

// SpaceWorkItemFlowClient is the client API for SpaceWorkItemFlow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpaceWorkItemFlowClient interface {
	SetSpaceWorkItemFlowDirector(ctx context.Context, in *SetSpaceWorkItemFlowDirectorRequest, opts ...grpc.CallOption) (*SetSpaceWorkItemFlowDirectorReply, error)
	SetSpaceWorkItemFlowPlanTime(ctx context.Context, in *SetSpaceWorkItemFlowPlanTimeRequest, opts ...grpc.CallOption) (*SetSpaceWorkItemFlowPlanTimeReply, error)
	UpgradeWorkItemFlow(ctx context.Context, in *UpgradeTaskWorkFlowRequest, opts ...grpc.CallOption) (*UpgradeTaskWorkFlowReply, error)
	BatUpgradeWorkItemFlowPrepare(ctx context.Context, in *BatUpgradeWorkItemFlowPrepareRequest, opts ...grpc.CallOption) (*BatUpgradeWorkItemFlowPrepareReply, error)
	BatchUpgradeWorkItemFlow(ctx context.Context, in *BatchUpgradeTaskWorkFlowRequest, opts ...grpc.CallOption) (*BatchUpgradeTaskWorkFlowReply, error)
}

type spaceWorkItemFlowClient struct {
	cc grpc.ClientConnInterface
}

func NewSpaceWorkItemFlowClient(cc grpc.ClientConnInterface) SpaceWorkItemFlowClient {
	return &spaceWorkItemFlowClient{cc}
}

func (c *spaceWorkItemFlowClient) SetSpaceWorkItemFlowDirector(ctx context.Context, in *SetSpaceWorkItemFlowDirectorRequest, opts ...grpc.CallOption) (*SetSpaceWorkItemFlowDirectorReply, error) {
	out := new(SetSpaceWorkItemFlowDirectorReply)
	err := c.cc.Invoke(ctx, SpaceWorkItemFlow_SetSpaceWorkItemFlowDirector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceWorkItemFlowClient) SetSpaceWorkItemFlowPlanTime(ctx context.Context, in *SetSpaceWorkItemFlowPlanTimeRequest, opts ...grpc.CallOption) (*SetSpaceWorkItemFlowPlanTimeReply, error) {
	out := new(SetSpaceWorkItemFlowPlanTimeReply)
	err := c.cc.Invoke(ctx, SpaceWorkItemFlow_SetSpaceWorkItemFlowPlanTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceWorkItemFlowClient) UpgradeWorkItemFlow(ctx context.Context, in *UpgradeTaskWorkFlowRequest, opts ...grpc.CallOption) (*UpgradeTaskWorkFlowReply, error) {
	out := new(UpgradeTaskWorkFlowReply)
	err := c.cc.Invoke(ctx, SpaceWorkItemFlow_UpgradeWorkItemFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceWorkItemFlowClient) BatUpgradeWorkItemFlowPrepare(ctx context.Context, in *BatUpgradeWorkItemFlowPrepareRequest, opts ...grpc.CallOption) (*BatUpgradeWorkItemFlowPrepareReply, error) {
	out := new(BatUpgradeWorkItemFlowPrepareReply)
	err := c.cc.Invoke(ctx, SpaceWorkItemFlow_BatUpgradeWorkItemFlowPrepare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceWorkItemFlowClient) BatchUpgradeWorkItemFlow(ctx context.Context, in *BatchUpgradeTaskWorkFlowRequest, opts ...grpc.CallOption) (*BatchUpgradeTaskWorkFlowReply, error) {
	out := new(BatchUpgradeTaskWorkFlowReply)
	err := c.cc.Invoke(ctx, SpaceWorkItemFlow_BatchUpgradeWorkItemFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceWorkItemFlowServer is the server API for SpaceWorkItemFlow service.
// All implementations must embed UnimplementedSpaceWorkItemFlowServer
// for forward compatibility
type SpaceWorkItemFlowServer interface {
	SetSpaceWorkItemFlowDirector(context.Context, *SetSpaceWorkItemFlowDirectorRequest) (*SetSpaceWorkItemFlowDirectorReply, error)
	SetSpaceWorkItemFlowPlanTime(context.Context, *SetSpaceWorkItemFlowPlanTimeRequest) (*SetSpaceWorkItemFlowPlanTimeReply, error)
	UpgradeWorkItemFlow(context.Context, *UpgradeTaskWorkFlowRequest) (*UpgradeTaskWorkFlowReply, error)
	BatUpgradeWorkItemFlowPrepare(context.Context, *BatUpgradeWorkItemFlowPrepareRequest) (*BatUpgradeWorkItemFlowPrepareReply, error)
	BatchUpgradeWorkItemFlow(context.Context, *BatchUpgradeTaskWorkFlowRequest) (*BatchUpgradeTaskWorkFlowReply, error)
	mustEmbedUnimplementedSpaceWorkItemFlowServer()
}

// UnimplementedSpaceWorkItemFlowServer must be embedded to have forward compatible implementations.
type UnimplementedSpaceWorkItemFlowServer struct {
}

func (UnimplementedSpaceWorkItemFlowServer) SetSpaceWorkItemFlowDirector(context.Context, *SetSpaceWorkItemFlowDirectorRequest) (*SetSpaceWorkItemFlowDirectorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpaceWorkItemFlowDirector not implemented")
}
func (UnimplementedSpaceWorkItemFlowServer) SetSpaceWorkItemFlowPlanTime(context.Context, *SetSpaceWorkItemFlowPlanTimeRequest) (*SetSpaceWorkItemFlowPlanTimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpaceWorkItemFlowPlanTime not implemented")
}
func (UnimplementedSpaceWorkItemFlowServer) UpgradeWorkItemFlow(context.Context, *UpgradeTaskWorkFlowRequest) (*UpgradeTaskWorkFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeWorkItemFlow not implemented")
}
func (UnimplementedSpaceWorkItemFlowServer) BatUpgradeWorkItemFlowPrepare(context.Context, *BatUpgradeWorkItemFlowPrepareRequest) (*BatUpgradeWorkItemFlowPrepareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatUpgradeWorkItemFlowPrepare not implemented")
}
func (UnimplementedSpaceWorkItemFlowServer) BatchUpgradeWorkItemFlow(context.Context, *BatchUpgradeTaskWorkFlowRequest) (*BatchUpgradeTaskWorkFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpgradeWorkItemFlow not implemented")
}
func (UnimplementedSpaceWorkItemFlowServer) mustEmbedUnimplementedSpaceWorkItemFlowServer() {}

// UnsafeSpaceWorkItemFlowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpaceWorkItemFlowServer will
// result in compilation errors.
type UnsafeSpaceWorkItemFlowServer interface {
	mustEmbedUnimplementedSpaceWorkItemFlowServer()
}

func RegisterSpaceWorkItemFlowServer(s grpc.ServiceRegistrar, srv SpaceWorkItemFlowServer) {
	s.RegisterService(&SpaceWorkItemFlow_ServiceDesc, srv)
}

func _SpaceWorkItemFlow_SetSpaceWorkItemFlowDirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSpaceWorkItemFlowDirectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceWorkItemFlowServer).SetSpaceWorkItemFlowDirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceWorkItemFlow_SetSpaceWorkItemFlowDirector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceWorkItemFlowServer).SetSpaceWorkItemFlowDirector(ctx, req.(*SetSpaceWorkItemFlowDirectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceWorkItemFlow_SetSpaceWorkItemFlowPlanTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSpaceWorkItemFlowPlanTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceWorkItemFlowServer).SetSpaceWorkItemFlowPlanTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceWorkItemFlow_SetSpaceWorkItemFlowPlanTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceWorkItemFlowServer).SetSpaceWorkItemFlowPlanTime(ctx, req.(*SetSpaceWorkItemFlowPlanTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceWorkItemFlow_UpgradeWorkItemFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeTaskWorkFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceWorkItemFlowServer).UpgradeWorkItemFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceWorkItemFlow_UpgradeWorkItemFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceWorkItemFlowServer).UpgradeWorkItemFlow(ctx, req.(*UpgradeTaskWorkFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceWorkItemFlow_BatUpgradeWorkItemFlowPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatUpgradeWorkItemFlowPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceWorkItemFlowServer).BatUpgradeWorkItemFlowPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceWorkItemFlow_BatUpgradeWorkItemFlowPrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceWorkItemFlowServer).BatUpgradeWorkItemFlowPrepare(ctx, req.(*BatUpgradeWorkItemFlowPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceWorkItemFlow_BatchUpgradeWorkItemFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpgradeTaskWorkFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceWorkItemFlowServer).BatchUpgradeWorkItemFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceWorkItemFlow_BatchUpgradeWorkItemFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceWorkItemFlowServer).BatchUpgradeWorkItemFlow(ctx, req.(*BatchUpgradeTaskWorkFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpaceWorkItemFlow_ServiceDesc is the grpc.ServiceDesc for SpaceWorkItemFlow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpaceWorkItemFlow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.space_work_item_flow.v1.space_work_item_flow",
	HandlerType: (*SpaceWorkItemFlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSpaceWorkItemFlowDirector",
			Handler:    _SpaceWorkItemFlow_SetSpaceWorkItemFlowDirector_Handler,
		},
		{
			MethodName: "SetSpaceWorkItemFlowPlanTime",
			Handler:    _SpaceWorkItemFlow_SetSpaceWorkItemFlowPlanTime_Handler,
		},
		{
			MethodName: "UpgradeWorkItemFlow",
			Handler:    _SpaceWorkItemFlow_UpgradeWorkItemFlow_Handler,
		},
		{
			MethodName: "BatUpgradeWorkItemFlowPrepare",
			Handler:    _SpaceWorkItemFlow_BatUpgradeWorkItemFlowPrepare_Handler,
		},
		{
			MethodName: "BatchUpgradeWorkItemFlow",
			Handler:    _SpaceWorkItemFlow_BatchUpgradeWorkItemFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "space_work_item_flow/v1/space_work_item_flow.proto",
}
