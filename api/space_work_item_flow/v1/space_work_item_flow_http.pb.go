// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: space_work_item_flow/v1/space_work_item_flow.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSpaceWorkItemFlowBatUpgradeWorkItemFlowPrepare = "/api.space_work_item_flow.v1.space_work_item_flow/BatUpgradeWorkItemFlowPrepare"
const OperationSpaceWorkItemFlowBatchUpgradeWorkItemFlow = "/api.space_work_item_flow.v1.space_work_item_flow/BatchUpgradeWorkItemFlow"
const OperationSpaceWorkItemFlowSetSpaceWorkItemFlowDirector = "/api.space_work_item_flow.v1.space_work_item_flow/SetSpaceWorkItemFlowDirector"
const OperationSpaceWorkItemFlowSetSpaceWorkItemFlowPlanTime = "/api.space_work_item_flow.v1.space_work_item_flow/SetSpaceWorkItemFlowPlanTime"
const OperationSpaceWorkItemFlowUpgradeWorkItemFlow = "/api.space_work_item_flow.v1.space_work_item_flow/UpgradeWorkItemFlow"

type SpaceWorkItemFlowHTTPServer interface {
	BatUpgradeWorkItemFlowPrepare(context.Context, *BatUpgradeWorkItemFlowPrepareRequest) (*BatUpgradeWorkItemFlowPrepareReply, error)
	BatchUpgradeWorkItemFlow(context.Context, *BatchUpgradeTaskWorkFlowRequest) (*BatchUpgradeTaskWorkFlowReply, error)
	SetSpaceWorkItemFlowDirector(context.Context, *SetSpaceWorkItemFlowDirectorRequest) (*SetSpaceWorkItemFlowDirectorReply, error)
	SetSpaceWorkItemFlowPlanTime(context.Context, *SetSpaceWorkItemFlowPlanTimeRequest) (*SetSpaceWorkItemFlowPlanTimeReply, error)
	UpgradeWorkItemFlow(context.Context, *UpgradeTaskWorkFlowRequest) (*UpgradeTaskWorkFlowReply, error)
}

func RegisterSpaceWorkItemFlowHTTPServer(s *http.Server, srv SpaceWorkItemFlowHTTPServer) {
	r := s.Route("/")
	r.POST("/v2/my/space/work_item/work_flow/director/set", _SpaceWorkItemFlow_SetSpaceWorkItemFlowDirector0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/work_flow/plan_time/set", _SpaceWorkItemFlow_SetSpaceWorkItemFlowPlanTime0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/work_flow/upgrade", _SpaceWorkItemFlow_UpgradeWorkItemFlow0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/work_flow/bat_upgrade/prepar", _SpaceWorkItemFlow_BatUpgradeWorkItemFlowPrepare0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/work_flow/bat_upgrade/by_id", _SpaceWorkItemFlow_BatchUpgradeWorkItemFlow0_HTTP_Handler(srv))
}

func _SpaceWorkItemFlow_SetSpaceWorkItemFlowDirector0_HTTP_Handler(srv SpaceWorkItemFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSpaceWorkItemFlowDirectorRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemFlowSetSpaceWorkItemFlowDirector)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceWorkItemFlowDirector(ctx, req.(*SetSpaceWorkItemFlowDirectorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSpaceWorkItemFlowDirectorReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItemFlow_SetSpaceWorkItemFlowPlanTime0_HTTP_Handler(srv SpaceWorkItemFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSpaceWorkItemFlowPlanTimeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemFlowSetSpaceWorkItemFlowPlanTime)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceWorkItemFlowPlanTime(ctx, req.(*SetSpaceWorkItemFlowPlanTimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSpaceWorkItemFlowPlanTimeReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItemFlow_UpgradeWorkItemFlow0_HTTP_Handler(srv SpaceWorkItemFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpgradeTaskWorkFlowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemFlowUpgradeWorkItemFlow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpgradeWorkItemFlow(ctx, req.(*UpgradeTaskWorkFlowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpgradeTaskWorkFlowReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItemFlow_BatUpgradeWorkItemFlowPrepare0_HTTP_Handler(srv SpaceWorkItemFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatUpgradeWorkItemFlowPrepareRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemFlowBatUpgradeWorkItemFlowPrepare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatUpgradeWorkItemFlowPrepare(ctx, req.(*BatUpgradeWorkItemFlowPrepareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatUpgradeWorkItemFlowPrepareReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItemFlow_BatchUpgradeWorkItemFlow0_HTTP_Handler(srv SpaceWorkItemFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchUpgradeTaskWorkFlowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemFlowBatchUpgradeWorkItemFlow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchUpgradeWorkItemFlow(ctx, req.(*BatchUpgradeTaskWorkFlowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchUpgradeTaskWorkFlowReply)
		return ctx.Result(200, reply)
	}
}

type SpaceWorkItemFlowHTTPClient interface {
	BatUpgradeWorkItemFlowPrepare(ctx context.Context, req *BatUpgradeWorkItemFlowPrepareRequest, opts ...http.CallOption) (rsp *BatUpgradeWorkItemFlowPrepareReply, err error)
	BatchUpgradeWorkItemFlow(ctx context.Context, req *BatchUpgradeTaskWorkFlowRequest, opts ...http.CallOption) (rsp *BatchUpgradeTaskWorkFlowReply, err error)
	SetSpaceWorkItemFlowDirector(ctx context.Context, req *SetSpaceWorkItemFlowDirectorRequest, opts ...http.CallOption) (rsp *SetSpaceWorkItemFlowDirectorReply, err error)
	SetSpaceWorkItemFlowPlanTime(ctx context.Context, req *SetSpaceWorkItemFlowPlanTimeRequest, opts ...http.CallOption) (rsp *SetSpaceWorkItemFlowPlanTimeReply, err error)
	UpgradeWorkItemFlow(ctx context.Context, req *UpgradeTaskWorkFlowRequest, opts ...http.CallOption) (rsp *UpgradeTaskWorkFlowReply, err error)
}

type SpaceWorkItemFlowHTTPClientImpl struct {
	cc *http.Client
}

func NewSpaceWorkItemFlowHTTPClient(client *http.Client) SpaceWorkItemFlowHTTPClient {
	return &SpaceWorkItemFlowHTTPClientImpl{client}
}

func (c *SpaceWorkItemFlowHTTPClientImpl) BatUpgradeWorkItemFlowPrepare(ctx context.Context, in *BatUpgradeWorkItemFlowPrepareRequest, opts ...http.CallOption) (*BatUpgradeWorkItemFlowPrepareReply, error) {
	var out BatUpgradeWorkItemFlowPrepareReply
	pattern := "/my/space/work_item/work_flow/bat_upgrade/prepar"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemFlowBatUpgradeWorkItemFlowPrepare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemFlowHTTPClientImpl) BatchUpgradeWorkItemFlow(ctx context.Context, in *BatchUpgradeTaskWorkFlowRequest, opts ...http.CallOption) (*BatchUpgradeTaskWorkFlowReply, error) {
	var out BatchUpgradeTaskWorkFlowReply
	pattern := "/my/space/work_item/work_flow/bat_upgrade/by_id"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemFlowBatchUpgradeWorkItemFlow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemFlowHTTPClientImpl) SetSpaceWorkItemFlowDirector(ctx context.Context, in *SetSpaceWorkItemFlowDirectorRequest, opts ...http.CallOption) (*SetSpaceWorkItemFlowDirectorReply, error) {
	var out SetSpaceWorkItemFlowDirectorReply
	pattern := "/v2/my/space/work_item/work_flow/director/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemFlowSetSpaceWorkItemFlowDirector))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemFlowHTTPClientImpl) SetSpaceWorkItemFlowPlanTime(ctx context.Context, in *SetSpaceWorkItemFlowPlanTimeRequest, opts ...http.CallOption) (*SetSpaceWorkItemFlowPlanTimeReply, error) {
	var out SetSpaceWorkItemFlowPlanTimeReply
	pattern := "/my/space/work_item/work_flow/plan_time/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemFlowSetSpaceWorkItemFlowPlanTime))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemFlowHTTPClientImpl) UpgradeWorkItemFlow(ctx context.Context, in *UpgradeTaskWorkFlowRequest, opts ...http.CallOption) (*UpgradeTaskWorkFlowReply, error) {
	var out UpgradeTaskWorkFlowReply
	pattern := "/my/space/work_item/work_flow/upgrade"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemFlowUpgradeWorkItemFlow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
