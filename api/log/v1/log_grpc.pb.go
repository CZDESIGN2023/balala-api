// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: log/v1/log.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Log_LoginLogList_FullMethodName      = "/api.log.v1.Log/LoginLogList"
	Log_OpLogList_FullMethodName         = "/api.log.v1.Log/OpLogList"
	Log_SpaceOpLogList_FullMethodName    = "/api.log.v1.Log/SpaceOpLogList"
	Log_SystemOpLogList_FullMethodName   = "/api.log.v1.Log/SystemOpLogList"
	Log_PersonalOpLogList_FullMethodName = "/api.log.v1.Log/PersonalOpLogList"
)

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogClient interface {
	LoginLogList(ctx context.Context, in *LoginLogListRequest, opts ...grpc.CallOption) (*LoginLogListReply, error)
	OpLogList(ctx context.Context, in *OpLogListRequest, opts ...grpc.CallOption) (*OpLogListReply, error)
	SpaceOpLogList(ctx context.Context, in *SpaceOpLogListRequest, opts ...grpc.CallOption) (*SpaceOpLogListReply, error)
	SystemOpLogList(ctx context.Context, in *SystemOpLogListRequest, opts ...grpc.CallOption) (*SystemOpLogListReply, error)
	PersonalOpLogList(ctx context.Context, in *PersonalOpLogListRequest, opts ...grpc.CallOption) (*PersonalOpLogListReply, error)
}

type logClient struct {
	cc grpc.ClientConnInterface
}

func NewLogClient(cc grpc.ClientConnInterface) LogClient {
	return &logClient{cc}
}

func (c *logClient) LoginLogList(ctx context.Context, in *LoginLogListRequest, opts ...grpc.CallOption) (*LoginLogListReply, error) {
	out := new(LoginLogListReply)
	err := c.cc.Invoke(ctx, Log_LoginLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) OpLogList(ctx context.Context, in *OpLogListRequest, opts ...grpc.CallOption) (*OpLogListReply, error) {
	out := new(OpLogListReply)
	err := c.cc.Invoke(ctx, Log_OpLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) SpaceOpLogList(ctx context.Context, in *SpaceOpLogListRequest, opts ...grpc.CallOption) (*SpaceOpLogListReply, error) {
	out := new(SpaceOpLogListReply)
	err := c.cc.Invoke(ctx, Log_SpaceOpLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) SystemOpLogList(ctx context.Context, in *SystemOpLogListRequest, opts ...grpc.CallOption) (*SystemOpLogListReply, error) {
	out := new(SystemOpLogListReply)
	err := c.cc.Invoke(ctx, Log_SystemOpLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) PersonalOpLogList(ctx context.Context, in *PersonalOpLogListRequest, opts ...grpc.CallOption) (*PersonalOpLogListReply, error) {
	out := new(PersonalOpLogListReply)
	err := c.cc.Invoke(ctx, Log_PersonalOpLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServer is the server API for Log service.
// All implementations must embed UnimplementedLogServer
// for forward compatibility
type LogServer interface {
	LoginLogList(context.Context, *LoginLogListRequest) (*LoginLogListReply, error)
	OpLogList(context.Context, *OpLogListRequest) (*OpLogListReply, error)
	SpaceOpLogList(context.Context, *SpaceOpLogListRequest) (*SpaceOpLogListReply, error)
	SystemOpLogList(context.Context, *SystemOpLogListRequest) (*SystemOpLogListReply, error)
	PersonalOpLogList(context.Context, *PersonalOpLogListRequest) (*PersonalOpLogListReply, error)
	mustEmbedUnimplementedLogServer()
}

// UnimplementedLogServer must be embedded to have forward compatible implementations.
type UnimplementedLogServer struct {
}

func (UnimplementedLogServer) LoginLogList(context.Context, *LoginLogListRequest) (*LoginLogListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginLogList not implemented")
}
func (UnimplementedLogServer) OpLogList(context.Context, *OpLogListRequest) (*OpLogListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpLogList not implemented")
}
func (UnimplementedLogServer) SpaceOpLogList(context.Context, *SpaceOpLogListRequest) (*SpaceOpLogListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceOpLogList not implemented")
}
func (UnimplementedLogServer) SystemOpLogList(context.Context, *SystemOpLogListRequest) (*SystemOpLogListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemOpLogList not implemented")
}
func (UnimplementedLogServer) PersonalOpLogList(context.Context, *PersonalOpLogListRequest) (*PersonalOpLogListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonalOpLogList not implemented")
}
func (UnimplementedLogServer) mustEmbedUnimplementedLogServer() {}

// UnsafeLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServer will
// result in compilation errors.
type UnsafeLogServer interface {
	mustEmbedUnimplementedLogServer()
}

func RegisterLogServer(s grpc.ServiceRegistrar, srv LogServer) {
	s.RegisterService(&Log_ServiceDesc, srv)
}

func _Log_LoginLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).LoginLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Log_LoginLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).LoginLogList(ctx, req.(*LoginLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_OpLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).OpLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Log_OpLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).OpLogList(ctx, req.(*OpLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_SpaceOpLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceOpLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).SpaceOpLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Log_SpaceOpLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).SpaceOpLogList(ctx, req.(*SpaceOpLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_SystemOpLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemOpLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).SystemOpLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Log_SystemOpLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).SystemOpLogList(ctx, req.(*SystemOpLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_PersonalOpLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalOpLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).PersonalOpLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Log_PersonalOpLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).PersonalOpLogList(ctx, req.(*PersonalOpLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Log_ServiceDesc is the grpc.ServiceDesc for Log service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Log_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.log.v1.Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginLogList",
			Handler:    _Log_LoginLogList_Handler,
		},
		{
			MethodName: "OpLogList",
			Handler:    _Log_OpLogList_Handler,
		},
		{
			MethodName: "SpaceOpLogList",
			Handler:    _Log_SpaceOpLogList_Handler,
		},
		{
			MethodName: "SystemOpLogList",
			Handler:    _Log_SystemOpLogList_Handler,
		},
		{
			MethodName: "PersonalOpLogList",
			Handler:    _Log_PersonalOpLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log/v1/log.proto",
}
