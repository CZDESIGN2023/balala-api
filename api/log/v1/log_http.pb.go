// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: log/v1/log.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLogLoginLogList = "/api.log.v1.Log/LoginLogList"
const OperationLogOpLogList = "/api.log.v1.Log/OpLogList"
const OperationLogPersonalOpLogList = "/api.log.v1.Log/PersonalOpLogList"
const OperationLogSpaceOpLogList = "/api.log.v1.Log/SpaceOpLogList"
const OperationLogSystemOpLogList = "/api.log.v1.Log/SystemOpLogList"

type LogHTTPServer interface {
	LoginLogList(context.Context, *LoginLogListRequest) (*LoginLogListReply, error)
	OpLogList(context.Context, *OpLogListRequest) (*OpLogListReply, error)
	PersonalOpLogList(context.Context, *PersonalOpLogListRequest) (*PersonalOpLogListReply, error)
	SpaceOpLogList(context.Context, *SpaceOpLogListRequest) (*SpaceOpLogListReply, error)
	SystemOpLogList(context.Context, *SystemOpLogListRequest) (*SystemOpLogListReply, error)
}

func RegisterLogHTTPServer(s *http.Server, srv LogHTTPServer) {
	r := s.Route("/")
	r.POST("/log/login/list", _Log_LoginLogList0_HTTP_Handler(srv))
	r.POST("/log/op/list", _Log_OpLogList0_HTTP_Handler(srv))
	r.POST("/log/space/op/list", _Log_SpaceOpLogList0_HTTP_Handler(srv))
	r.POST("/log/system/op/list", _Log_SystemOpLogList0_HTTP_Handler(srv))
	r.POST("/log/personal/op/list", _Log_PersonalOpLogList0_HTTP_Handler(srv))
}

func _Log_LoginLogList0_HTTP_Handler(srv LogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginLogListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLogLoginLogList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginLogList(ctx, req.(*LoginLogListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginLogListReply)
		return ctx.Result(200, reply)
	}
}

func _Log_OpLogList0_HTTP_Handler(srv LogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OpLogListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLogOpLogList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OpLogList(ctx, req.(*OpLogListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OpLogListReply)
		return ctx.Result(200, reply)
	}
}

func _Log_SpaceOpLogList0_HTTP_Handler(srv LogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceOpLogListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLogSpaceOpLogList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpaceOpLogList(ctx, req.(*SpaceOpLogListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceOpLogListReply)
		return ctx.Result(200, reply)
	}
}

func _Log_SystemOpLogList0_HTTP_Handler(srv LogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SystemOpLogListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLogSystemOpLogList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SystemOpLogList(ctx, req.(*SystemOpLogListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SystemOpLogListReply)
		return ctx.Result(200, reply)
	}
}

func _Log_PersonalOpLogList0_HTTP_Handler(srv LogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PersonalOpLogListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLogPersonalOpLogList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PersonalOpLogList(ctx, req.(*PersonalOpLogListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PersonalOpLogListReply)
		return ctx.Result(200, reply)
	}
}

type LogHTTPClient interface {
	LoginLogList(ctx context.Context, req *LoginLogListRequest, opts ...http.CallOption) (rsp *LoginLogListReply, err error)
	OpLogList(ctx context.Context, req *OpLogListRequest, opts ...http.CallOption) (rsp *OpLogListReply, err error)
	PersonalOpLogList(ctx context.Context, req *PersonalOpLogListRequest, opts ...http.CallOption) (rsp *PersonalOpLogListReply, err error)
	SpaceOpLogList(ctx context.Context, req *SpaceOpLogListRequest, opts ...http.CallOption) (rsp *SpaceOpLogListReply, err error)
	SystemOpLogList(ctx context.Context, req *SystemOpLogListRequest, opts ...http.CallOption) (rsp *SystemOpLogListReply, err error)
}

type LogHTTPClientImpl struct {
	cc *http.Client
}

func NewLogHTTPClient(client *http.Client) LogHTTPClient {
	return &LogHTTPClientImpl{client}
}

func (c *LogHTTPClientImpl) LoginLogList(ctx context.Context, in *LoginLogListRequest, opts ...http.CallOption) (*LoginLogListReply, error) {
	var out LoginLogListReply
	pattern := "/log/login/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLogLoginLogList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LogHTTPClientImpl) OpLogList(ctx context.Context, in *OpLogListRequest, opts ...http.CallOption) (*OpLogListReply, error) {
	var out OpLogListReply
	pattern := "/log/op/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLogOpLogList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LogHTTPClientImpl) PersonalOpLogList(ctx context.Context, in *PersonalOpLogListRequest, opts ...http.CallOption) (*PersonalOpLogListReply, error) {
	var out PersonalOpLogListReply
	pattern := "/log/personal/op/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLogPersonalOpLogList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LogHTTPClientImpl) SpaceOpLogList(ctx context.Context, in *SpaceOpLogListRequest, opts ...http.CallOption) (*SpaceOpLogListReply, error) {
	var out SpaceOpLogListReply
	pattern := "/log/space/op/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLogSpaceOpLogList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LogHTTPClientImpl) SystemOpLogList(ctx context.Context, in *SystemOpLogListRequest, opts ...http.CallOption) (*SystemOpLogListReply, error) {
	var out SystemOpLogListReply
	pattern := "/log/system/op/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLogSystemOpLogList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
