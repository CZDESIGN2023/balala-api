// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: space_member/v1/space_member.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSpaceMemberAddSpaceManager = "/api.space_member.v1.space_member/AddSpaceManager"
const OperationSpaceMemberAddSpaceMember = "/api.space_member.v1.space_member/AddSpaceMember"
const OperationSpaceMemberGetSpaceMemberWorkItemCount = "/api.space_member.v1.space_member/GetSpaceMemberWorkItemCount"
const OperationSpaceMemberRemoveSpaceManager = "/api.space_member.v1.space_member/RemoveSpaceManager"
const OperationSpaceMemberRemoveSpaceMember = "/api.space_member.v1.space_member/RemoveSpaceMember"
const OperationSpaceMemberSetSpaceMemberRole = "/api.space_member.v1.space_member/SetSpaceMemberRole"
const OperationSpaceMemberSpaceManagerList = "/api.space_member.v1.space_member/SpaceManagerList"
const OperationSpaceMemberSpaceMemberById = "/api.space_member.v1.space_member/SpaceMemberById"
const OperationSpaceMemberSpaceMemberList = "/api.space_member.v1.space_member/SpaceMemberList"

type SpaceMemberHTTPServer interface {
	AddSpaceManager(context.Context, *AddSpaceManagerRequest) (*AddSpaceManagerReply, error)
	AddSpaceMember(context.Context, *AddSpaceMemeberRequest) (*AddSpaceMemeberReply, error)
	GetSpaceMemberWorkItemCount(context.Context, *GetSpaceMemberWorkItemCountRequest) (*GetSpaceMemberWorkItemCountReply, error)
	RemoveSpaceManager(context.Context, *RemoveSpaceManagerRequest) (*RemoveSpaceManagerReply, error)
	RemoveSpaceMember(context.Context, *RemoveSpaceMemeberRequest) (*RemoveSpaceMemeberReply, error)
	SetSpaceMemberRole(context.Context, *SetSpaceMemberRoleRequest) (*SetSpaceMemberRoleReply, error)
	SpaceManagerList(context.Context, *SpaceManagerListRequest) (*SpaceManagerListReply, error)
	SpaceMemberById(context.Context, *SpaceMemberByIdRequest) (*SpaceMemberByIdReply, error)
	SpaceMemberList(context.Context, *SpaceMemeberListRequest) (*SpaceMemeberListReply, error)
}

func RegisterSpaceMemberHTTPServer(s *http.Server, srv SpaceMemberHTTPServer) {
	r := s.Route("/")
	r.POST("/my/space/memeber/add", _SpaceMember_AddSpaceMember0_HTTP_Handler(srv))
	r.POST("/my/space/memeber/remove", _SpaceMember_RemoveSpaceMember0_HTTP_Handler(srv))
	r.POST("/my/space/memeber/list", _SpaceMember_SpaceMemberList0_HTTP_Handler(srv))
	r.POST("/my/space/memeber/role/set", _SpaceMember_SetSpaceMemberRole0_HTTP_Handler(srv))
	r.POST("/my/space/member/work_item_count", _SpaceMember_GetSpaceMemberWorkItemCount0_HTTP_Handler(srv))
	r.POST("/my/space/manager/list", _SpaceMember_SpaceManagerList0_HTTP_Handler(srv))
	r.POST("/my/space/manager/add", _SpaceMember_AddSpaceManager0_HTTP_Handler(srv))
	r.POST("/my/space/manager/remove", _SpaceMember_RemoveSpaceManager0_HTTP_Handler(srv))
	r.POST("/my/space/memeber/by_id", _SpaceMember_SpaceMemberById0_HTTP_Handler(srv))
}

func _SpaceMember_AddSpaceMember0_HTTP_Handler(srv SpaceMemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddSpaceMemeberRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceMemberAddSpaceMember)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddSpaceMember(ctx, req.(*AddSpaceMemeberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddSpaceMemeberReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceMember_RemoveSpaceMember0_HTTP_Handler(srv SpaceMemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveSpaceMemeberRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceMemberRemoveSpaceMember)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveSpaceMember(ctx, req.(*RemoveSpaceMemeberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveSpaceMemeberReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceMember_SpaceMemberList0_HTTP_Handler(srv SpaceMemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceMemeberListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceMemberSpaceMemberList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpaceMemberList(ctx, req.(*SpaceMemeberListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceMemeberListReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceMember_SetSpaceMemberRole0_HTTP_Handler(srv SpaceMemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSpaceMemberRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceMemberSetSpaceMemberRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceMemberRole(ctx, req.(*SetSpaceMemberRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSpaceMemberRoleReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceMember_GetSpaceMemberWorkItemCount0_HTTP_Handler(srv SpaceMemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSpaceMemberWorkItemCountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceMemberGetSpaceMemberWorkItemCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSpaceMemberWorkItemCount(ctx, req.(*GetSpaceMemberWorkItemCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSpaceMemberWorkItemCountReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceMember_SpaceManagerList0_HTTP_Handler(srv SpaceMemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceManagerListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceMemberSpaceManagerList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpaceManagerList(ctx, req.(*SpaceManagerListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceManagerListReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceMember_AddSpaceManager0_HTTP_Handler(srv SpaceMemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddSpaceManagerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceMemberAddSpaceManager)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddSpaceManager(ctx, req.(*AddSpaceManagerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddSpaceManagerReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceMember_RemoveSpaceManager0_HTTP_Handler(srv SpaceMemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveSpaceManagerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceMemberRemoveSpaceManager)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveSpaceManager(ctx, req.(*RemoveSpaceManagerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveSpaceManagerReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceMember_SpaceMemberById0_HTTP_Handler(srv SpaceMemberHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceMemberByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceMemberSpaceMemberById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpaceMemberById(ctx, req.(*SpaceMemberByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceMemberByIdReply)
		return ctx.Result(200, reply)
	}
}

type SpaceMemberHTTPClient interface {
	AddSpaceManager(ctx context.Context, req *AddSpaceManagerRequest, opts ...http.CallOption) (rsp *AddSpaceManagerReply, err error)
	AddSpaceMember(ctx context.Context, req *AddSpaceMemeberRequest, opts ...http.CallOption) (rsp *AddSpaceMemeberReply, err error)
	GetSpaceMemberWorkItemCount(ctx context.Context, req *GetSpaceMemberWorkItemCountRequest, opts ...http.CallOption) (rsp *GetSpaceMemberWorkItemCountReply, err error)
	RemoveSpaceManager(ctx context.Context, req *RemoveSpaceManagerRequest, opts ...http.CallOption) (rsp *RemoveSpaceManagerReply, err error)
	RemoveSpaceMember(ctx context.Context, req *RemoveSpaceMemeberRequest, opts ...http.CallOption) (rsp *RemoveSpaceMemeberReply, err error)
	SetSpaceMemberRole(ctx context.Context, req *SetSpaceMemberRoleRequest, opts ...http.CallOption) (rsp *SetSpaceMemberRoleReply, err error)
	SpaceManagerList(ctx context.Context, req *SpaceManagerListRequest, opts ...http.CallOption) (rsp *SpaceManagerListReply, err error)
	SpaceMemberById(ctx context.Context, req *SpaceMemberByIdRequest, opts ...http.CallOption) (rsp *SpaceMemberByIdReply, err error)
	SpaceMemberList(ctx context.Context, req *SpaceMemeberListRequest, opts ...http.CallOption) (rsp *SpaceMemeberListReply, err error)
}

type SpaceMemberHTTPClientImpl struct {
	cc *http.Client
}

func NewSpaceMemberHTTPClient(client *http.Client) SpaceMemberHTTPClient {
	return &SpaceMemberHTTPClientImpl{client}
}

func (c *SpaceMemberHTTPClientImpl) AddSpaceManager(ctx context.Context, in *AddSpaceManagerRequest, opts ...http.CallOption) (*AddSpaceManagerReply, error) {
	var out AddSpaceManagerReply
	pattern := "/my/space/manager/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceMemberAddSpaceManager))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceMemberHTTPClientImpl) AddSpaceMember(ctx context.Context, in *AddSpaceMemeberRequest, opts ...http.CallOption) (*AddSpaceMemeberReply, error) {
	var out AddSpaceMemeberReply
	pattern := "/my/space/memeber/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceMemberAddSpaceMember))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceMemberHTTPClientImpl) GetSpaceMemberWorkItemCount(ctx context.Context, in *GetSpaceMemberWorkItemCountRequest, opts ...http.CallOption) (*GetSpaceMemberWorkItemCountReply, error) {
	var out GetSpaceMemberWorkItemCountReply
	pattern := "/my/space/member/work_item_count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceMemberGetSpaceMemberWorkItemCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceMemberHTTPClientImpl) RemoveSpaceManager(ctx context.Context, in *RemoveSpaceManagerRequest, opts ...http.CallOption) (*RemoveSpaceManagerReply, error) {
	var out RemoveSpaceManagerReply
	pattern := "/my/space/manager/remove"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceMemberRemoveSpaceManager))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceMemberHTTPClientImpl) RemoveSpaceMember(ctx context.Context, in *RemoveSpaceMemeberRequest, opts ...http.CallOption) (*RemoveSpaceMemeberReply, error) {
	var out RemoveSpaceMemeberReply
	pattern := "/my/space/memeber/remove"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceMemberRemoveSpaceMember))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceMemberHTTPClientImpl) SetSpaceMemberRole(ctx context.Context, in *SetSpaceMemberRoleRequest, opts ...http.CallOption) (*SetSpaceMemberRoleReply, error) {
	var out SetSpaceMemberRoleReply
	pattern := "/my/space/memeber/role/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceMemberSetSpaceMemberRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceMemberHTTPClientImpl) SpaceManagerList(ctx context.Context, in *SpaceManagerListRequest, opts ...http.CallOption) (*SpaceManagerListReply, error) {
	var out SpaceManagerListReply
	pattern := "/my/space/manager/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceMemberSpaceManagerList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceMemberHTTPClientImpl) SpaceMemberById(ctx context.Context, in *SpaceMemberByIdRequest, opts ...http.CallOption) (*SpaceMemberByIdReply, error) {
	var out SpaceMemberByIdReply
	pattern := "/my/space/memeber/by_id"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceMemberSpaceMemberById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceMemberHTTPClientImpl) SpaceMemberList(ctx context.Context, in *SpaceMemeberListRequest, opts ...http.CallOption) (*SpaceMemeberListReply, error) {
	var out SpaceMemeberListReply
	pattern := "/my/space/memeber/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceMemberSpaceMemberList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
