// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: space_member/v1/space_member.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SpaceMember_AddSpaceMember_FullMethodName              = "/api.space_member.v1.space_member/AddSpaceMember"
	SpaceMember_RemoveSpaceMember_FullMethodName           = "/api.space_member.v1.space_member/RemoveSpaceMember"
	SpaceMember_SpaceMemberList_FullMethodName             = "/api.space_member.v1.space_member/SpaceMemberList"
	SpaceMember_SetSpaceMemberRole_FullMethodName          = "/api.space_member.v1.space_member/SetSpaceMemberRole"
	SpaceMember_GetSpaceMemberWorkItemCount_FullMethodName = "/api.space_member.v1.space_member/GetSpaceMemberWorkItemCount"
	SpaceMember_SpaceManagerList_FullMethodName            = "/api.space_member.v1.space_member/SpaceManagerList"
	SpaceMember_AddSpaceManager_FullMethodName             = "/api.space_member.v1.space_member/AddSpaceManager"
	SpaceMember_RemoveSpaceManager_FullMethodName          = "/api.space_member.v1.space_member/RemoveSpaceManager"
	SpaceMember_SpaceMemberById_FullMethodName             = "/api.space_member.v1.space_member/SpaceMemberById"
)

// SpaceMemberClient is the client API for SpaceMember service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpaceMemberClient interface {
	AddSpaceMember(ctx context.Context, in *AddSpaceMemeberRequest, opts ...grpc.CallOption) (*AddSpaceMemeberReply, error)
	RemoveSpaceMember(ctx context.Context, in *RemoveSpaceMemeberRequest, opts ...grpc.CallOption) (*RemoveSpaceMemeberReply, error)
	SpaceMemberList(ctx context.Context, in *SpaceMemeberListRequest, opts ...grpc.CallOption) (*SpaceMemeberListReply, error)
	SetSpaceMemberRole(ctx context.Context, in *SetSpaceMemberRoleRequest, opts ...grpc.CallOption) (*SetSpaceMemberRoleReply, error)
	GetSpaceMemberWorkItemCount(ctx context.Context, in *GetSpaceMemberWorkItemCountRequest, opts ...grpc.CallOption) (*GetSpaceMemberWorkItemCountReply, error)
	SpaceManagerList(ctx context.Context, in *SpaceManagerListRequest, opts ...grpc.CallOption) (*SpaceManagerListReply, error)
	AddSpaceManager(ctx context.Context, in *AddSpaceManagerRequest, opts ...grpc.CallOption) (*AddSpaceManagerReply, error)
	RemoveSpaceManager(ctx context.Context, in *RemoveSpaceManagerRequest, opts ...grpc.CallOption) (*RemoveSpaceManagerReply, error)
	SpaceMemberById(ctx context.Context, in *SpaceMemberByIdRequest, opts ...grpc.CallOption) (*SpaceMemberByIdReply, error)
}

type spaceMemberClient struct {
	cc grpc.ClientConnInterface
}

func NewSpaceMemberClient(cc grpc.ClientConnInterface) SpaceMemberClient {
	return &spaceMemberClient{cc}
}

func (c *spaceMemberClient) AddSpaceMember(ctx context.Context, in *AddSpaceMemeberRequest, opts ...grpc.CallOption) (*AddSpaceMemeberReply, error) {
	out := new(AddSpaceMemeberReply)
	err := c.cc.Invoke(ctx, SpaceMember_AddSpaceMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceMemberClient) RemoveSpaceMember(ctx context.Context, in *RemoveSpaceMemeberRequest, opts ...grpc.CallOption) (*RemoveSpaceMemeberReply, error) {
	out := new(RemoveSpaceMemeberReply)
	err := c.cc.Invoke(ctx, SpaceMember_RemoveSpaceMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceMemberClient) SpaceMemberList(ctx context.Context, in *SpaceMemeberListRequest, opts ...grpc.CallOption) (*SpaceMemeberListReply, error) {
	out := new(SpaceMemeberListReply)
	err := c.cc.Invoke(ctx, SpaceMember_SpaceMemberList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceMemberClient) SetSpaceMemberRole(ctx context.Context, in *SetSpaceMemberRoleRequest, opts ...grpc.CallOption) (*SetSpaceMemberRoleReply, error) {
	out := new(SetSpaceMemberRoleReply)
	err := c.cc.Invoke(ctx, SpaceMember_SetSpaceMemberRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceMemberClient) GetSpaceMemberWorkItemCount(ctx context.Context, in *GetSpaceMemberWorkItemCountRequest, opts ...grpc.CallOption) (*GetSpaceMemberWorkItemCountReply, error) {
	out := new(GetSpaceMemberWorkItemCountReply)
	err := c.cc.Invoke(ctx, SpaceMember_GetSpaceMemberWorkItemCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceMemberClient) SpaceManagerList(ctx context.Context, in *SpaceManagerListRequest, opts ...grpc.CallOption) (*SpaceManagerListReply, error) {
	out := new(SpaceManagerListReply)
	err := c.cc.Invoke(ctx, SpaceMember_SpaceManagerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceMemberClient) AddSpaceManager(ctx context.Context, in *AddSpaceManagerRequest, opts ...grpc.CallOption) (*AddSpaceManagerReply, error) {
	out := new(AddSpaceManagerReply)
	err := c.cc.Invoke(ctx, SpaceMember_AddSpaceManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceMemberClient) RemoveSpaceManager(ctx context.Context, in *RemoveSpaceManagerRequest, opts ...grpc.CallOption) (*RemoveSpaceManagerReply, error) {
	out := new(RemoveSpaceManagerReply)
	err := c.cc.Invoke(ctx, SpaceMember_RemoveSpaceManager_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceMemberClient) SpaceMemberById(ctx context.Context, in *SpaceMemberByIdRequest, opts ...grpc.CallOption) (*SpaceMemberByIdReply, error) {
	out := new(SpaceMemberByIdReply)
	err := c.cc.Invoke(ctx, SpaceMember_SpaceMemberById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceMemberServer is the server API for SpaceMember service.
// All implementations must embed UnimplementedSpaceMemberServer
// for forward compatibility
type SpaceMemberServer interface {
	AddSpaceMember(context.Context, *AddSpaceMemeberRequest) (*AddSpaceMemeberReply, error)
	RemoveSpaceMember(context.Context, *RemoveSpaceMemeberRequest) (*RemoveSpaceMemeberReply, error)
	SpaceMemberList(context.Context, *SpaceMemeberListRequest) (*SpaceMemeberListReply, error)
	SetSpaceMemberRole(context.Context, *SetSpaceMemberRoleRequest) (*SetSpaceMemberRoleReply, error)
	GetSpaceMemberWorkItemCount(context.Context, *GetSpaceMemberWorkItemCountRequest) (*GetSpaceMemberWorkItemCountReply, error)
	SpaceManagerList(context.Context, *SpaceManagerListRequest) (*SpaceManagerListReply, error)
	AddSpaceManager(context.Context, *AddSpaceManagerRequest) (*AddSpaceManagerReply, error)
	RemoveSpaceManager(context.Context, *RemoveSpaceManagerRequest) (*RemoveSpaceManagerReply, error)
	SpaceMemberById(context.Context, *SpaceMemberByIdRequest) (*SpaceMemberByIdReply, error)
	mustEmbedUnimplementedSpaceMemberServer()
}

// UnimplementedSpaceMemberServer must be embedded to have forward compatible implementations.
type UnimplementedSpaceMemberServer struct {
}

func (UnimplementedSpaceMemberServer) AddSpaceMember(context.Context, *AddSpaceMemeberRequest) (*AddSpaceMemeberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSpaceMember not implemented")
}
func (UnimplementedSpaceMemberServer) RemoveSpaceMember(context.Context, *RemoveSpaceMemeberRequest) (*RemoveSpaceMemeberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSpaceMember not implemented")
}
func (UnimplementedSpaceMemberServer) SpaceMemberList(context.Context, *SpaceMemeberListRequest) (*SpaceMemeberListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceMemberList not implemented")
}
func (UnimplementedSpaceMemberServer) SetSpaceMemberRole(context.Context, *SetSpaceMemberRoleRequest) (*SetSpaceMemberRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpaceMemberRole not implemented")
}
func (UnimplementedSpaceMemberServer) GetSpaceMemberWorkItemCount(context.Context, *GetSpaceMemberWorkItemCountRequest) (*GetSpaceMemberWorkItemCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceMemberWorkItemCount not implemented")
}
func (UnimplementedSpaceMemberServer) SpaceManagerList(context.Context, *SpaceManagerListRequest) (*SpaceManagerListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceManagerList not implemented")
}
func (UnimplementedSpaceMemberServer) AddSpaceManager(context.Context, *AddSpaceManagerRequest) (*AddSpaceManagerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSpaceManager not implemented")
}
func (UnimplementedSpaceMemberServer) RemoveSpaceManager(context.Context, *RemoveSpaceManagerRequest) (*RemoveSpaceManagerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSpaceManager not implemented")
}
func (UnimplementedSpaceMemberServer) SpaceMemberById(context.Context, *SpaceMemberByIdRequest) (*SpaceMemberByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceMemberById not implemented")
}
func (UnimplementedSpaceMemberServer) mustEmbedUnimplementedSpaceMemberServer() {}

// UnsafeSpaceMemberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpaceMemberServer will
// result in compilation errors.
type UnsafeSpaceMemberServer interface {
	mustEmbedUnimplementedSpaceMemberServer()
}

func RegisterSpaceMemberServer(s grpc.ServiceRegistrar, srv SpaceMemberServer) {
	s.RegisterService(&SpaceMember_ServiceDesc, srv)
}

func _SpaceMember_AddSpaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSpaceMemeberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceMemberServer).AddSpaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceMember_AddSpaceMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceMemberServer).AddSpaceMember(ctx, req.(*AddSpaceMemeberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceMember_RemoveSpaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSpaceMemeberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceMemberServer).RemoveSpaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceMember_RemoveSpaceMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceMemberServer).RemoveSpaceMember(ctx, req.(*RemoveSpaceMemeberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceMember_SpaceMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceMemeberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceMemberServer).SpaceMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceMember_SpaceMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceMemberServer).SpaceMemberList(ctx, req.(*SpaceMemeberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceMember_SetSpaceMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSpaceMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceMemberServer).SetSpaceMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceMember_SetSpaceMemberRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceMemberServer).SetSpaceMemberRole(ctx, req.(*SetSpaceMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceMember_GetSpaceMemberWorkItemCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceMemberWorkItemCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceMemberServer).GetSpaceMemberWorkItemCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceMember_GetSpaceMemberWorkItemCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceMemberServer).GetSpaceMemberWorkItemCount(ctx, req.(*GetSpaceMemberWorkItemCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceMember_SpaceManagerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceManagerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceMemberServer).SpaceManagerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceMember_SpaceManagerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceMemberServer).SpaceManagerList(ctx, req.(*SpaceManagerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceMember_AddSpaceManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSpaceManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceMemberServer).AddSpaceManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceMember_AddSpaceManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceMemberServer).AddSpaceManager(ctx, req.(*AddSpaceManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceMember_RemoveSpaceManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSpaceManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceMemberServer).RemoveSpaceManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceMember_RemoveSpaceManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceMemberServer).RemoveSpaceManager(ctx, req.(*RemoveSpaceManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceMember_SpaceMemberById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceMemberByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceMemberServer).SpaceMemberById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpaceMember_SpaceMemberById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceMemberServer).SpaceMemberById(ctx, req.(*SpaceMemberByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpaceMember_ServiceDesc is the grpc.ServiceDesc for SpaceMember service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpaceMember_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.space_member.v1.space_member",
	HandlerType: (*SpaceMemberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSpaceMember",
			Handler:    _SpaceMember_AddSpaceMember_Handler,
		},
		{
			MethodName: "RemoveSpaceMember",
			Handler:    _SpaceMember_RemoveSpaceMember_Handler,
		},
		{
			MethodName: "SpaceMemberList",
			Handler:    _SpaceMember_SpaceMemberList_Handler,
		},
		{
			MethodName: "SetSpaceMemberRole",
			Handler:    _SpaceMember_SetSpaceMemberRole_Handler,
		},
		{
			MethodName: "GetSpaceMemberWorkItemCount",
			Handler:    _SpaceMember_GetSpaceMemberWorkItemCount_Handler,
		},
		{
			MethodName: "SpaceManagerList",
			Handler:    _SpaceMember_SpaceManagerList_Handler,
		},
		{
			MethodName: "AddSpaceManager",
			Handler:    _SpaceMember_AddSpaceManager_Handler,
		},
		{
			MethodName: "RemoveSpaceManager",
			Handler:    _SpaceMember_RemoveSpaceManager_Handler,
		},
		{
			MethodName: "SpaceMemberById",
			Handler:    _SpaceMember_SpaceMemberById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "space_member/v1/space_member.proto",
}
