// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: space_work_item/v1/space_work_item.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSpaceWorkItemAddWorkItemComment = "/api.space_work_item.v1.space_work_item/AddWorkItemComment"
const OperationSpaceWorkItemChangeWorkItemType = "/api.space_work_item.v1.space_work_item/ChangeWorkItemType"
const OperationSpaceWorkItemChangeWorkItemVersion = "/api.space_work_item.v1.space_work_item/ChangeWorkItemVersion"
const OperationSpaceWorkItemCloseSpaceWorkItemV2 = "/api.space_work_item.v1.space_work_item/CloseSpaceWorkItemV2"
const OperationSpaceWorkItemCommentEmojiAdd = "/api.space_work_item.v1.space_work_item/CommentEmojiAdd"
const OperationSpaceWorkItemCommentEmojiRemove = "/api.space_work_item.v1.space_work_item/CommentEmojiRemove"
const OperationSpaceWorkItemConfirmStateFlowMain = "/api.space_work_item.v1.space_work_item/ConfirmStateFlowMain"
const OperationSpaceWorkItemConfirmSub = "/api.space_work_item.v1.space_work_item/ConfirmSub"
const OperationSpaceWorkItemConfirmWorkFlowMain = "/api.space_work_item.v1.space_work_item/ConfirmWorkFlowMain"
const OperationSpaceWorkItemCreateWorkItemSubTask = "/api.space_work_item.v1.space_work_item/CreateWorkItemSubTask"
const OperationSpaceWorkItemCreateWorkItemV2 = "/api.space_work_item.v1.space_work_item/CreateWorkItemV2"
const OperationSpaceWorkItemDelSpaceWorkItemV2 = "/api.space_work_item.v1.space_work_item/DelSpaceWorkItemV2"
const OperationSpaceWorkItemDeleteWorkItemComment = "/api.space_work_item.v1.space_work_item/DeleteWorkItemComment"
const OperationSpaceWorkItemFollow = "/api.space_work_item.v1.space_work_item/Follow"
const OperationSpaceWorkItemGetWorkItemDetailV2 = "/api.space_work_item.v1.space_work_item/GetWorkItemDetailV2"
const OperationSpaceWorkItemModifyWorkItemDescribeV2 = "/api.space_work_item.v1.space_work_item/ModifyWorkItemDescribeV2"
const OperationSpaceWorkItemModifyWorkItemNameV2 = "/api.space_work_item.v1.space_work_item/ModifyWorkItemNameV2"
const OperationSpaceWorkItemModifyWorkItemPlanTimeV2 = "/api.space_work_item.v1.space_work_item/ModifyWorkItemPlanTimeV2"
const OperationSpaceWorkItemModifyWorkItemPriorityV2 = "/api.space_work_item.v1.space_work_item/ModifyWorkItemPriorityV2"
const OperationSpaceWorkItemModifyWorkItemProcessRateV2 = "/api.space_work_item.v1.space_work_item/ModifyWorkItemProcessRateV2"
const OperationSpaceWorkItemModifyWorkItemRemark = "/api.space_work_item.v1.space_work_item/ModifyWorkItemRemark"
const OperationSpaceWorkItemOperationPermissions = "/api.space_work_item.v1.space_work_item/OperationPermissions"
const OperationSpaceWorkItemRemindWork = "/api.space_work_item.v1.space_work_item/RemindWork"
const OperationSpaceWorkItemRestartSpaceWorkItemV2 = "/api.space_work_item.v1.space_work_item/RestartSpaceWorkItemV2"
const OperationSpaceWorkItemResumeWorkItemV2 = "/api.space_work_item.v1.space_work_item/ResumeWorkItemV2"
const OperationSpaceWorkItemRollbackWorkItemNodeStateV2 = "/api.space_work_item.v1.space_work_item/RollbackWorkItemNodeStateV2"
const OperationSpaceWorkItemSetFlowMainDirector = "/api.space_work_item.v1.space_work_item/SetFlowMainDirector"
const OperationSpaceWorkItemSetSpaceWorkItemFileInfoV2 = "/api.space_work_item.v1.space_work_item/SetSpaceWorkItemFileInfoV2"
const OperationSpaceWorkItemSetSubDirector = "/api.space_work_item.v1.space_work_item/SetSubDirector"
const OperationSpaceWorkItemSetWorkItemFollower = "/api.space_work_item.v1.space_work_item/SetWorkItemFollower"
const OperationSpaceWorkItemSetWorkItemTagV2 = "/api.space_work_item.v1.space_work_item/SetWorkItemTagV2"
const OperationSpaceWorkItemSetWorkItemToNewWorkObjectV2 = "/api.space_work_item.v1.space_work_item/SetWorkItemToNewWorkObjectV2"
const OperationSpaceWorkItemTerminateSpaceWorkItemV2 = "/api.space_work_item.v1.space_work_item/TerminateSpaceWorkItemV2"
const OperationSpaceWorkItemUpdateWorkItemComment = "/api.space_work_item.v1.space_work_item/UpdateWorkItemComment"
const OperationSpaceWorkItemWorkItemCommentList = "/api.space_work_item.v1.space_work_item/WorkItemCommentList"

type SpaceWorkItemHTTPServer interface {
	AddWorkItemComment(context.Context, *AddWorkItemCommentRequest) (*AddWorkItemCommentReply, error)
	ChangeWorkItemType(context.Context, *ChangeWorkItemTypeRequest) (*ChangeWorkItemTypeReply, error)
	ChangeWorkItemVersion(context.Context, *ChangeWorkItemVersionRequest) (*ChangeWorkItemVersionReply, error)
	CloseSpaceWorkItemV2(context.Context, *CloseSpaceWorkItemRequest) (*CloseSpaceWorkItemReply, error)
	CommentEmojiAdd(context.Context, *CommentEmojiAddRequest) (*CommentEmojiAddReply, error)
	CommentEmojiRemove(context.Context, *CommentEmojiRemoveRequest) (*CommentEmojiRemoveReply, error)
	ConfirmStateFlowMain(context.Context, *ConfirmStateFlowMainRequest) (*ConfirmStateFlowMainReply, error)
	ConfirmSub(context.Context, *ConfirmSubRequest) (*ConfirmSubReply, error)
	ConfirmWorkFlowMain(context.Context, *ConfirmWorkFlowMainRequest) (*ConfirmWorkFlowMainReply, error)
	CreateWorkItemSubTask(context.Context, *CreateWorkItemSubTaskRequest) (*CreateWorkItemSubTaskReply, error)
	CreateWorkItemV2(context.Context, *CreateWorkItemRequestV2) (*CreateWorkItemReplyV2, error)
	DelSpaceWorkItemV2(context.Context, *DelSpaceWorkItemRequest) (*DelSpaceWorkItemReply, error)
	DeleteWorkItemComment(context.Context, *DeleteWorkItemCommentRequest) (*DeleteWorkItemCommentReply, error)
	Follow(context.Context, *FollowRequest) (*FollowReply, error)
	GetWorkItemDetailV2(context.Context, *GetWorkItemDetailRequestV2) (*GetWorkItemDetailReplyV2, error)
	ModifyWorkItemDescribeV2(context.Context, *ModifyWorkItemDescribeRequest) (*ModifyWorkItemDescribeReply, error)
	ModifyWorkItemNameV2(context.Context, *ModifyWorkItemNameRequest) (*ModifyWorkItemNameReply, error)
	ModifyWorkItemPlanTimeV2(context.Context, *ModifyWorkItemPlanTimeRequest) (*ModifyWorkItemPlanTimeReply, error)
	ModifyWorkItemPriorityV2(context.Context, *ModifyWorkItemPriorityRequest) (*ModifyWorkItemPriorityReply, error)
	ModifyWorkItemProcessRateV2(context.Context, *ModifyWorkItemProcessRateRequest) (*ModifyWorkItemProcessRateReply, error)
	ModifyWorkItemRemark(context.Context, *ModifyWorkItemRemarkRequest) (*ModifyWorkItemRemarkReply, error)
	OperationPermissions(context.Context, *OperationPermissionsRequest) (*OperationPermissionsReply, error)
	RemindWork(context.Context, *RemindWorkRequest) (*RemindWorkReply, error)
	RestartSpaceWorkItemV2(context.Context, *RestartSpaceWorkItemRequest) (*RestartSpaceWorkItemReply, error)
	ResumeWorkItemV2(context.Context, *ResumeSpaceWorkItemRequest) (*ResumeSpaceWorkItemReply, error)
	RollbackWorkItemNodeStateV2(context.Context, *RollbackSpaceWorkItemRequest) (*RollbackSpaceWorkItemReply, error)
	SetFlowMainDirector(context.Context, *SetFlowMainDirectorRequest) (*SetFlowMainDirectorReply, error)
	SetSpaceWorkItemFileInfoV2(context.Context, *SetSpaceWorkItemFileInfoRequest) (*SetSpaceWorkItemFileInfoReply, error)
	SetSubDirector(context.Context, *SetSubDirectorRequest) (*SetSubDirectorReply, error)
	SetWorkItemFollower(context.Context, *SetWorkItemFollowerRequest) (*SetWorkItemFollowerReply, error)
	SetWorkItemTagV2(context.Context, *SetWorkItemTagRequest) (*SetWorkItemTagReply, error)
	SetWorkItemToNewWorkObjectV2(context.Context, *SetWorkItemToNewWorkObjectRequest) (*SetWorkItemToNewWorkObjectReply, error)
	TerminateSpaceWorkItemV2(context.Context, *TerminateSpaceWorkItemRequest) (*TerminateSpaceWorkItemReply, error)
	UpdateWorkItemComment(context.Context, *UpdateWorkItemCommentRequest) (*UpdateWorkItemCommentReply, error)
	WorkItemCommentList(context.Context, *WorkItemCommentListRequest) (*WorkItemCommentListReply, error)
}

func RegisterSpaceWorkItemHTTPServer(s *http.Server, srv SpaceWorkItemHTTPServer) {
	r := s.Route("/")
	r.POST("/v2/my/space/work_item/create", _SpaceWorkItem_CreateWorkItemV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/task/create", _SpaceWorkItem_CreateWorkItemSubTask0_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/detail", _SpaceWorkItem_GetWorkItemDetailV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/nodes/state/confirm", _SpaceWorkItem_ConfirmWorkFlowMain0_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/state/confirm", _SpaceWorkItem_ConfirmStateFlowMain0_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/task/state/confirm", _SpaceWorkItem_ConfirmSub0_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/director/set", _SpaceWorkItem_SetFlowMainDirector0_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/task/director/set", _SpaceWorkItem_SetSubDirector0_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/work_object/set", _SpaceWorkItem_SetWorkItemToNewWorkObjectV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/plantime/modify", _SpaceWorkItem_ModifyWorkItemPlanTimeV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/process_rate/modify", _SpaceWorkItem_ModifyWorkItemProcessRateV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/priority/modify", _SpaceWorkItem_ModifyWorkItemPriorityV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/describe/modify", _SpaceWorkItem_ModifyWorkItemDescribeV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/name/modify", _SpaceWorkItem_ModifyWorkItemNameV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/tag/set", _SpaceWorkItem_SetWorkItemTagV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/files/set", _SpaceWorkItem_SetSpaceWorkItemFileInfoV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/del", _SpaceWorkItem_DelSpaceWorkItemV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/terminate", _SpaceWorkItem_TerminateSpaceWorkItemV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/restart", _SpaceWorkItem_RestartSpaceWorkItemV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/close", _SpaceWorkItem_CloseSpaceWorkItemV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/nodes/state/rollback", _SpaceWorkItem_RollbackWorkItemNodeStateV20_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/resume", _SpaceWorkItem_ResumeWorkItemV20_HTTP_Handler(srv))
	r.POST("/my/space/work_item/comment/add", _SpaceWorkItem_AddWorkItemComment0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/comment/update", _SpaceWorkItem_UpdateWorkItemComment0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/comment/delete", _SpaceWorkItem_DeleteWorkItemComment0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/comment/list", _SpaceWorkItem_WorkItemCommentList0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/comment/emoji_add", _SpaceWorkItem_CommentEmojiAdd0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/comment/emoji_remove", _SpaceWorkItem_CommentEmojiRemove0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/change_type", _SpaceWorkItem_ChangeWorkItemType0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/follow", _SpaceWorkItem_Follow0_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/version/change", _SpaceWorkItem_ChangeWorkItemVersion0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/remark/modify", _SpaceWorkItem_ModifyWorkItemRemark0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/remind", _SpaceWorkItem_RemindWork0_HTTP_Handler(srv))
	r.POST("/my/space/work_item/operation_permissions", _SpaceWorkItem_OperationPermissions0_HTTP_Handler(srv))
	r.POST("/v2/my/space/work_item/follower_set", _SpaceWorkItem_SetWorkItemFollower0_HTTP_Handler(srv))
}

func _SpaceWorkItem_CreateWorkItemV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWorkItemRequestV2
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemCreateWorkItemV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWorkItemV2(ctx, req.(*CreateWorkItemRequestV2))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWorkItemReplyV2)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_CreateWorkItemSubTask0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWorkItemSubTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemCreateWorkItemSubTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWorkItemSubTask(ctx, req.(*CreateWorkItemSubTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWorkItemSubTaskReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_GetWorkItemDetailV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWorkItemDetailRequestV2
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemGetWorkItemDetailV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWorkItemDetailV2(ctx, req.(*GetWorkItemDetailRequestV2))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWorkItemDetailReplyV2)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_ConfirmWorkFlowMain0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConfirmWorkFlowMainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemConfirmWorkFlowMain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConfirmWorkFlowMain(ctx, req.(*ConfirmWorkFlowMainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConfirmWorkFlowMainReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_ConfirmStateFlowMain0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConfirmStateFlowMainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemConfirmStateFlowMain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConfirmStateFlowMain(ctx, req.(*ConfirmStateFlowMainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConfirmStateFlowMainReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_ConfirmSub0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConfirmSubRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemConfirmSub)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConfirmSub(ctx, req.(*ConfirmSubRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConfirmSubReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_SetFlowMainDirector0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetFlowMainDirectorRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemSetFlowMainDirector)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetFlowMainDirector(ctx, req.(*SetFlowMainDirectorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetFlowMainDirectorReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_SetSubDirector0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSubDirectorRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemSetSubDirector)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSubDirector(ctx, req.(*SetSubDirectorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSubDirectorReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_SetWorkItemToNewWorkObjectV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetWorkItemToNewWorkObjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemSetWorkItemToNewWorkObjectV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetWorkItemToNewWorkObjectV2(ctx, req.(*SetWorkItemToNewWorkObjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetWorkItemToNewWorkObjectReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_ModifyWorkItemPlanTimeV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyWorkItemPlanTimeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemModifyWorkItemPlanTimeV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyWorkItemPlanTimeV2(ctx, req.(*ModifyWorkItemPlanTimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyWorkItemPlanTimeReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_ModifyWorkItemProcessRateV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyWorkItemProcessRateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemModifyWorkItemProcessRateV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyWorkItemProcessRateV2(ctx, req.(*ModifyWorkItemProcessRateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyWorkItemProcessRateReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_ModifyWorkItemPriorityV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyWorkItemPriorityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemModifyWorkItemPriorityV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyWorkItemPriorityV2(ctx, req.(*ModifyWorkItemPriorityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyWorkItemPriorityReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_ModifyWorkItemDescribeV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyWorkItemDescribeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemModifyWorkItemDescribeV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyWorkItemDescribeV2(ctx, req.(*ModifyWorkItemDescribeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyWorkItemDescribeReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_ModifyWorkItemNameV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyWorkItemNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemModifyWorkItemNameV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyWorkItemNameV2(ctx, req.(*ModifyWorkItemNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyWorkItemNameReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_SetWorkItemTagV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetWorkItemTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemSetWorkItemTagV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetWorkItemTagV2(ctx, req.(*SetWorkItemTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetWorkItemTagReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_SetSpaceWorkItemFileInfoV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSpaceWorkItemFileInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemSetSpaceWorkItemFileInfoV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceWorkItemFileInfoV2(ctx, req.(*SetSpaceWorkItemFileInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSpaceWorkItemFileInfoReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_DelSpaceWorkItemV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelSpaceWorkItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemDelSpaceWorkItemV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelSpaceWorkItemV2(ctx, req.(*DelSpaceWorkItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelSpaceWorkItemReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_TerminateSpaceWorkItemV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TerminateSpaceWorkItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemTerminateSpaceWorkItemV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TerminateSpaceWorkItemV2(ctx, req.(*TerminateSpaceWorkItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TerminateSpaceWorkItemReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_RestartSpaceWorkItemV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RestartSpaceWorkItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemRestartSpaceWorkItemV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RestartSpaceWorkItemV2(ctx, req.(*RestartSpaceWorkItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RestartSpaceWorkItemReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_CloseSpaceWorkItemV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CloseSpaceWorkItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemCloseSpaceWorkItemV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CloseSpaceWorkItemV2(ctx, req.(*CloseSpaceWorkItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CloseSpaceWorkItemReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_RollbackWorkItemNodeStateV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RollbackSpaceWorkItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemRollbackWorkItemNodeStateV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RollbackWorkItemNodeStateV2(ctx, req.(*RollbackSpaceWorkItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RollbackSpaceWorkItemReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_ResumeWorkItemV20_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResumeSpaceWorkItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemResumeWorkItemV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResumeWorkItemV2(ctx, req.(*ResumeSpaceWorkItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResumeSpaceWorkItemReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_AddWorkItemComment0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddWorkItemCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemAddWorkItemComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddWorkItemComment(ctx, req.(*AddWorkItemCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddWorkItemCommentReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_UpdateWorkItemComment0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWorkItemCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemUpdateWorkItemComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateWorkItemComment(ctx, req.(*UpdateWorkItemCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWorkItemCommentReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_DeleteWorkItemComment0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteWorkItemCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemDeleteWorkItemComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteWorkItemComment(ctx, req.(*DeleteWorkItemCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteWorkItemCommentReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_WorkItemCommentList0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WorkItemCommentListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemWorkItemCommentList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WorkItemCommentList(ctx, req.(*WorkItemCommentListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WorkItemCommentListReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_CommentEmojiAdd0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CommentEmojiAddRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemCommentEmojiAdd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CommentEmojiAdd(ctx, req.(*CommentEmojiAddRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentEmojiAddReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_CommentEmojiRemove0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CommentEmojiRemoveRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemCommentEmojiRemove)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CommentEmojiRemove(ctx, req.(*CommentEmojiRemoveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentEmojiRemoveReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_ChangeWorkItemType0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangeWorkItemTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemChangeWorkItemType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeWorkItemType(ctx, req.(*ChangeWorkItemTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChangeWorkItemTypeReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_Follow0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemFollow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Follow(ctx, req.(*FollowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_ChangeWorkItemVersion0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangeWorkItemVersionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemChangeWorkItemVersion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeWorkItemVersion(ctx, req.(*ChangeWorkItemVersionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChangeWorkItemVersionReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_ModifyWorkItemRemark0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyWorkItemRemarkRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemModifyWorkItemRemark)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyWorkItemRemark(ctx, req.(*ModifyWorkItemRemarkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyWorkItemRemarkReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_RemindWork0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemindWorkRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemRemindWork)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemindWork(ctx, req.(*RemindWorkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemindWorkReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_OperationPermissions0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OperationPermissionsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemOperationPermissions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OperationPermissions(ctx, req.(*OperationPermissionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OperationPermissionsReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkItem_SetWorkItemFollower0_HTTP_Handler(srv SpaceWorkItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetWorkItemFollowerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkItemSetWorkItemFollower)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetWorkItemFollower(ctx, req.(*SetWorkItemFollowerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetWorkItemFollowerReply)
		return ctx.Result(200, reply)
	}
}

type SpaceWorkItemHTTPClient interface {
	AddWorkItemComment(ctx context.Context, req *AddWorkItemCommentRequest, opts ...http.CallOption) (rsp *AddWorkItemCommentReply, err error)
	ChangeWorkItemType(ctx context.Context, req *ChangeWorkItemTypeRequest, opts ...http.CallOption) (rsp *ChangeWorkItemTypeReply, err error)
	ChangeWorkItemVersion(ctx context.Context, req *ChangeWorkItemVersionRequest, opts ...http.CallOption) (rsp *ChangeWorkItemVersionReply, err error)
	CloseSpaceWorkItemV2(ctx context.Context, req *CloseSpaceWorkItemRequest, opts ...http.CallOption) (rsp *CloseSpaceWorkItemReply, err error)
	CommentEmojiAdd(ctx context.Context, req *CommentEmojiAddRequest, opts ...http.CallOption) (rsp *CommentEmojiAddReply, err error)
	CommentEmojiRemove(ctx context.Context, req *CommentEmojiRemoveRequest, opts ...http.CallOption) (rsp *CommentEmojiRemoveReply, err error)
	ConfirmStateFlowMain(ctx context.Context, req *ConfirmStateFlowMainRequest, opts ...http.CallOption) (rsp *ConfirmStateFlowMainReply, err error)
	ConfirmSub(ctx context.Context, req *ConfirmSubRequest, opts ...http.CallOption) (rsp *ConfirmSubReply, err error)
	ConfirmWorkFlowMain(ctx context.Context, req *ConfirmWorkFlowMainRequest, opts ...http.CallOption) (rsp *ConfirmWorkFlowMainReply, err error)
	CreateWorkItemSubTask(ctx context.Context, req *CreateWorkItemSubTaskRequest, opts ...http.CallOption) (rsp *CreateWorkItemSubTaskReply, err error)
	CreateWorkItemV2(ctx context.Context, req *CreateWorkItemRequestV2, opts ...http.CallOption) (rsp *CreateWorkItemReplyV2, err error)
	DelSpaceWorkItemV2(ctx context.Context, req *DelSpaceWorkItemRequest, opts ...http.CallOption) (rsp *DelSpaceWorkItemReply, err error)
	DeleteWorkItemComment(ctx context.Context, req *DeleteWorkItemCommentRequest, opts ...http.CallOption) (rsp *DeleteWorkItemCommentReply, err error)
	Follow(ctx context.Context, req *FollowRequest, opts ...http.CallOption) (rsp *FollowReply, err error)
	GetWorkItemDetailV2(ctx context.Context, req *GetWorkItemDetailRequestV2, opts ...http.CallOption) (rsp *GetWorkItemDetailReplyV2, err error)
	ModifyWorkItemDescribeV2(ctx context.Context, req *ModifyWorkItemDescribeRequest, opts ...http.CallOption) (rsp *ModifyWorkItemDescribeReply, err error)
	ModifyWorkItemNameV2(ctx context.Context, req *ModifyWorkItemNameRequest, opts ...http.CallOption) (rsp *ModifyWorkItemNameReply, err error)
	ModifyWorkItemPlanTimeV2(ctx context.Context, req *ModifyWorkItemPlanTimeRequest, opts ...http.CallOption) (rsp *ModifyWorkItemPlanTimeReply, err error)
	ModifyWorkItemPriorityV2(ctx context.Context, req *ModifyWorkItemPriorityRequest, opts ...http.CallOption) (rsp *ModifyWorkItemPriorityReply, err error)
	ModifyWorkItemProcessRateV2(ctx context.Context, req *ModifyWorkItemProcessRateRequest, opts ...http.CallOption) (rsp *ModifyWorkItemProcessRateReply, err error)
	ModifyWorkItemRemark(ctx context.Context, req *ModifyWorkItemRemarkRequest, opts ...http.CallOption) (rsp *ModifyWorkItemRemarkReply, err error)
	OperationPermissions(ctx context.Context, req *OperationPermissionsRequest, opts ...http.CallOption) (rsp *OperationPermissionsReply, err error)
	RemindWork(ctx context.Context, req *RemindWorkRequest, opts ...http.CallOption) (rsp *RemindWorkReply, err error)
	RestartSpaceWorkItemV2(ctx context.Context, req *RestartSpaceWorkItemRequest, opts ...http.CallOption) (rsp *RestartSpaceWorkItemReply, err error)
	ResumeWorkItemV2(ctx context.Context, req *ResumeSpaceWorkItemRequest, opts ...http.CallOption) (rsp *ResumeSpaceWorkItemReply, err error)
	RollbackWorkItemNodeStateV2(ctx context.Context, req *RollbackSpaceWorkItemRequest, opts ...http.CallOption) (rsp *RollbackSpaceWorkItemReply, err error)
	SetFlowMainDirector(ctx context.Context, req *SetFlowMainDirectorRequest, opts ...http.CallOption) (rsp *SetFlowMainDirectorReply, err error)
	SetSpaceWorkItemFileInfoV2(ctx context.Context, req *SetSpaceWorkItemFileInfoRequest, opts ...http.CallOption) (rsp *SetSpaceWorkItemFileInfoReply, err error)
	SetSubDirector(ctx context.Context, req *SetSubDirectorRequest, opts ...http.CallOption) (rsp *SetSubDirectorReply, err error)
	SetWorkItemFollower(ctx context.Context, req *SetWorkItemFollowerRequest, opts ...http.CallOption) (rsp *SetWorkItemFollowerReply, err error)
	SetWorkItemTagV2(ctx context.Context, req *SetWorkItemTagRequest, opts ...http.CallOption) (rsp *SetWorkItemTagReply, err error)
	SetWorkItemToNewWorkObjectV2(ctx context.Context, req *SetWorkItemToNewWorkObjectRequest, opts ...http.CallOption) (rsp *SetWorkItemToNewWorkObjectReply, err error)
	TerminateSpaceWorkItemV2(ctx context.Context, req *TerminateSpaceWorkItemRequest, opts ...http.CallOption) (rsp *TerminateSpaceWorkItemReply, err error)
	UpdateWorkItemComment(ctx context.Context, req *UpdateWorkItemCommentRequest, opts ...http.CallOption) (rsp *UpdateWorkItemCommentReply, err error)
	WorkItemCommentList(ctx context.Context, req *WorkItemCommentListRequest, opts ...http.CallOption) (rsp *WorkItemCommentListReply, err error)
}

type SpaceWorkItemHTTPClientImpl struct {
	cc *http.Client
}

func NewSpaceWorkItemHTTPClient(client *http.Client) SpaceWorkItemHTTPClient {
	return &SpaceWorkItemHTTPClientImpl{client}
}

func (c *SpaceWorkItemHTTPClientImpl) AddWorkItemComment(ctx context.Context, in *AddWorkItemCommentRequest, opts ...http.CallOption) (*AddWorkItemCommentReply, error) {
	var out AddWorkItemCommentReply
	pattern := "/my/space/work_item/comment/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemAddWorkItemComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) ChangeWorkItemType(ctx context.Context, in *ChangeWorkItemTypeRequest, opts ...http.CallOption) (*ChangeWorkItemTypeReply, error) {
	var out ChangeWorkItemTypeReply
	pattern := "/my/space/work_item/change_type"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemChangeWorkItemType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) ChangeWorkItemVersion(ctx context.Context, in *ChangeWorkItemVersionRequest, opts ...http.CallOption) (*ChangeWorkItemVersionReply, error) {
	var out ChangeWorkItemVersionReply
	pattern := "/v2/my/space/work_item/version/change"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemChangeWorkItemVersion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) CloseSpaceWorkItemV2(ctx context.Context, in *CloseSpaceWorkItemRequest, opts ...http.CallOption) (*CloseSpaceWorkItemReply, error) {
	var out CloseSpaceWorkItemReply
	pattern := "/v2/my/space/work_item/close"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemCloseSpaceWorkItemV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) CommentEmojiAdd(ctx context.Context, in *CommentEmojiAddRequest, opts ...http.CallOption) (*CommentEmojiAddReply, error) {
	var out CommentEmojiAddReply
	pattern := "/my/space/work_item/comment/emoji_add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemCommentEmojiAdd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) CommentEmojiRemove(ctx context.Context, in *CommentEmojiRemoveRequest, opts ...http.CallOption) (*CommentEmojiRemoveReply, error) {
	var out CommentEmojiRemoveReply
	pattern := "/my/space/work_item/comment/emoji_remove"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemCommentEmojiRemove))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) ConfirmStateFlowMain(ctx context.Context, in *ConfirmStateFlowMainRequest, opts ...http.CallOption) (*ConfirmStateFlowMainReply, error) {
	var out ConfirmStateFlowMainReply
	pattern := "/v2/my/space/work_item/state/confirm"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemConfirmStateFlowMain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) ConfirmSub(ctx context.Context, in *ConfirmSubRequest, opts ...http.CallOption) (*ConfirmSubReply, error) {
	var out ConfirmSubReply
	pattern := "/v2/my/space/work_item/task/state/confirm"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemConfirmSub))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) ConfirmWorkFlowMain(ctx context.Context, in *ConfirmWorkFlowMainRequest, opts ...http.CallOption) (*ConfirmWorkFlowMainReply, error) {
	var out ConfirmWorkFlowMainReply
	pattern := "/v2/my/space/work_item/nodes/state/confirm"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemConfirmWorkFlowMain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) CreateWorkItemSubTask(ctx context.Context, in *CreateWorkItemSubTaskRequest, opts ...http.CallOption) (*CreateWorkItemSubTaskReply, error) {
	var out CreateWorkItemSubTaskReply
	pattern := "/v2/my/space/work_item/task/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemCreateWorkItemSubTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) CreateWorkItemV2(ctx context.Context, in *CreateWorkItemRequestV2, opts ...http.CallOption) (*CreateWorkItemReplyV2, error) {
	var out CreateWorkItemReplyV2
	pattern := "/v2/my/space/work_item/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemCreateWorkItemV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) DelSpaceWorkItemV2(ctx context.Context, in *DelSpaceWorkItemRequest, opts ...http.CallOption) (*DelSpaceWorkItemReply, error) {
	var out DelSpaceWorkItemReply
	pattern := "/v2/my/space/work_item/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemDelSpaceWorkItemV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) DeleteWorkItemComment(ctx context.Context, in *DeleteWorkItemCommentRequest, opts ...http.CallOption) (*DeleteWorkItemCommentReply, error) {
	var out DeleteWorkItemCommentReply
	pattern := "/my/space/work_item/comment/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemDeleteWorkItemComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) Follow(ctx context.Context, in *FollowRequest, opts ...http.CallOption) (*FollowReply, error) {
	var out FollowReply
	pattern := "/my/space/work_item/follow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemFollow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) GetWorkItemDetailV2(ctx context.Context, in *GetWorkItemDetailRequestV2, opts ...http.CallOption) (*GetWorkItemDetailReplyV2, error) {
	var out GetWorkItemDetailReplyV2
	pattern := "/v2/my/space/work_item/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemGetWorkItemDetailV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) ModifyWorkItemDescribeV2(ctx context.Context, in *ModifyWorkItemDescribeRequest, opts ...http.CallOption) (*ModifyWorkItemDescribeReply, error) {
	var out ModifyWorkItemDescribeReply
	pattern := "/v2/my/space/work_item/describe/modify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemModifyWorkItemDescribeV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) ModifyWorkItemNameV2(ctx context.Context, in *ModifyWorkItemNameRequest, opts ...http.CallOption) (*ModifyWorkItemNameReply, error) {
	var out ModifyWorkItemNameReply
	pattern := "/v2/my/space/work_item/name/modify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemModifyWorkItemNameV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) ModifyWorkItemPlanTimeV2(ctx context.Context, in *ModifyWorkItemPlanTimeRequest, opts ...http.CallOption) (*ModifyWorkItemPlanTimeReply, error) {
	var out ModifyWorkItemPlanTimeReply
	pattern := "/v2/my/space/work_item/plantime/modify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemModifyWorkItemPlanTimeV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) ModifyWorkItemPriorityV2(ctx context.Context, in *ModifyWorkItemPriorityRequest, opts ...http.CallOption) (*ModifyWorkItemPriorityReply, error) {
	var out ModifyWorkItemPriorityReply
	pattern := "/v2/my/space/work_item/priority/modify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemModifyWorkItemPriorityV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) ModifyWorkItemProcessRateV2(ctx context.Context, in *ModifyWorkItemProcessRateRequest, opts ...http.CallOption) (*ModifyWorkItemProcessRateReply, error) {
	var out ModifyWorkItemProcessRateReply
	pattern := "/v2/my/space/work_item/process_rate/modify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemModifyWorkItemProcessRateV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) ModifyWorkItemRemark(ctx context.Context, in *ModifyWorkItemRemarkRequest, opts ...http.CallOption) (*ModifyWorkItemRemarkReply, error) {
	var out ModifyWorkItemRemarkReply
	pattern := "/my/space/work_item/remark/modify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemModifyWorkItemRemark))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) OperationPermissions(ctx context.Context, in *OperationPermissionsRequest, opts ...http.CallOption) (*OperationPermissionsReply, error) {
	var out OperationPermissionsReply
	pattern := "/my/space/work_item/operation_permissions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemOperationPermissions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) RemindWork(ctx context.Context, in *RemindWorkRequest, opts ...http.CallOption) (*RemindWorkReply, error) {
	var out RemindWorkReply
	pattern := "/my/space/work_item/remind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemRemindWork))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) RestartSpaceWorkItemV2(ctx context.Context, in *RestartSpaceWorkItemRequest, opts ...http.CallOption) (*RestartSpaceWorkItemReply, error) {
	var out RestartSpaceWorkItemReply
	pattern := "/v2/my/space/work_item/restart"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemRestartSpaceWorkItemV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) ResumeWorkItemV2(ctx context.Context, in *ResumeSpaceWorkItemRequest, opts ...http.CallOption) (*ResumeSpaceWorkItemReply, error) {
	var out ResumeSpaceWorkItemReply
	pattern := "/v2/my/space/work_item/resume"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemResumeWorkItemV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) RollbackWorkItemNodeStateV2(ctx context.Context, in *RollbackSpaceWorkItemRequest, opts ...http.CallOption) (*RollbackSpaceWorkItemReply, error) {
	var out RollbackSpaceWorkItemReply
	pattern := "/v2/my/space/work_item/nodes/state/rollback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemRollbackWorkItemNodeStateV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) SetFlowMainDirector(ctx context.Context, in *SetFlowMainDirectorRequest, opts ...http.CallOption) (*SetFlowMainDirectorReply, error) {
	var out SetFlowMainDirectorReply
	pattern := "/v2/my/space/work_item/director/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemSetFlowMainDirector))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) SetSpaceWorkItemFileInfoV2(ctx context.Context, in *SetSpaceWorkItemFileInfoRequest, opts ...http.CallOption) (*SetSpaceWorkItemFileInfoReply, error) {
	var out SetSpaceWorkItemFileInfoReply
	pattern := "/v2/my/space/work_item/files/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemSetSpaceWorkItemFileInfoV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) SetSubDirector(ctx context.Context, in *SetSubDirectorRequest, opts ...http.CallOption) (*SetSubDirectorReply, error) {
	var out SetSubDirectorReply
	pattern := "/v2/my/space/work_item/task/director/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemSetSubDirector))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) SetWorkItemFollower(ctx context.Context, in *SetWorkItemFollowerRequest, opts ...http.CallOption) (*SetWorkItemFollowerReply, error) {
	var out SetWorkItemFollowerReply
	pattern := "/v2/my/space/work_item/follower_set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemSetWorkItemFollower))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) SetWorkItemTagV2(ctx context.Context, in *SetWorkItemTagRequest, opts ...http.CallOption) (*SetWorkItemTagReply, error) {
	var out SetWorkItemTagReply
	pattern := "/v2/my/space/work_item/tag/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemSetWorkItemTagV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) SetWorkItemToNewWorkObjectV2(ctx context.Context, in *SetWorkItemToNewWorkObjectRequest, opts ...http.CallOption) (*SetWorkItemToNewWorkObjectReply, error) {
	var out SetWorkItemToNewWorkObjectReply
	pattern := "/v2/my/space/work_item/work_object/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemSetWorkItemToNewWorkObjectV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) TerminateSpaceWorkItemV2(ctx context.Context, in *TerminateSpaceWorkItemRequest, opts ...http.CallOption) (*TerminateSpaceWorkItemReply, error) {
	var out TerminateSpaceWorkItemReply
	pattern := "/v2/my/space/work_item/terminate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemTerminateSpaceWorkItemV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) UpdateWorkItemComment(ctx context.Context, in *UpdateWorkItemCommentRequest, opts ...http.CallOption) (*UpdateWorkItemCommentReply, error) {
	var out UpdateWorkItemCommentReply
	pattern := "/my/space/work_item/comment/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemUpdateWorkItemComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkItemHTTPClientImpl) WorkItemCommentList(ctx context.Context, in *WorkItemCommentListRequest, opts ...http.CallOption) (*WorkItemCommentListReply, error) {
	var out WorkItemCommentListReply
	pattern := "/my/space/work_item/comment/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkItemWorkItemCommentList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
