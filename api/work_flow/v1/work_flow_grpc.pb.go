// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: work_flow/v1/work_flow.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkFlow_SpaceWorkFlowPageList_FullMethodName        = "/api.work_flow.v1.work_flow/SpaceWorkFlowPageList"
	WorkFlow_SpaceWorkFlowList_FullMethodName            = "/api.work_flow.v1.work_flow/SpaceWorkFlowList"
	WorkFlow_SpaceWorkFlowById_FullMethodName            = "/api.work_flow.v1.work_flow/SpaceWorkFlowById"
	WorkFlow_SetWorkFlowRanking_FullMethodName           = "/api.work_flow.v1.work_flow/SetWorkFlowRanking"
	WorkFlow_SaveWorkFlowTemplateConfig_FullMethodName   = "/api.work_flow.v1.work_flow/SaveWorkFlowTemplateConfig"
	WorkFlow_CreateWorkFlow_FullMethodName               = "/api.work_flow.v1.work_flow/CreateWorkFlow"
	WorkFlow_GetWorkFlow_FullMethodName                  = "/api.work_flow.v1.work_flow/GetWorkFlow"
	WorkFlow_DelWorkFlow_FullMethodName                  = "/api.work_flow.v1.work_flow/DelWorkFlow"
	WorkFlow_SetWorkFlowStatus_FullMethodName            = "/api.work_flow.v1.work_flow/SetWorkFlowStatus"
	WorkFlow_CopyWorkFlow_FullMethodName                 = "/api.work_flow.v1.work_flow/CopyWorkFlow"
	WorkFlow_SetWorkFlowName_FullMethodName              = "/api.work_flow.v1.work_flow/SetWorkFlowName"
	WorkFlow_GetWorkFlowTemplate_FullMethodName          = "/api.work_flow.v1.work_flow/GetWorkFlowTemplate"
	WorkFlow_GetWorkItemRelationCount_FullMethodName     = "/api.work_flow.v1.work_flow/GetWorkItemRelationCount"
	WorkFlow_GetOwnerRuleRelationTemplate_FullMethodName = "/api.work_flow.v1.work_flow/GetOwnerRuleRelationTemplate"
)

// WorkFlowClient is the client API for WorkFlow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkFlowClient interface {
	SpaceWorkFlowPageList(ctx context.Context, in *SpaceWorkFlowPageListRequest, opts ...grpc.CallOption) (*SpaceWorkFlowPageListReply, error)
	SpaceWorkFlowList(ctx context.Context, in *SpaceWorkFlowListRequest, opts ...grpc.CallOption) (*SpaceWorkFlowListReply, error)
	SpaceWorkFlowById(ctx context.Context, in *SpaceWorkFlowByIdRequest, opts ...grpc.CallOption) (*SpaceWorkFlowByIdReply, error)
	SetWorkFlowRanking(ctx context.Context, in *SetWorkFlowRankingRequest, opts ...grpc.CallOption) (*SetWorkFlowRankingReply, error)
	SaveWorkFlowTemplateConfig(ctx context.Context, in *SaveWorkFlowTemplateConfigRequest, opts ...grpc.CallOption) (*SaveWorkFlowTemplateConfigReply, error)
	CreateWorkFlow(ctx context.Context, in *CreateWorkFlowRequest, opts ...grpc.CallOption) (*CreateWorkFlowReply, error)
	GetWorkFlow(ctx context.Context, in *GetWorkFlowRequest, opts ...grpc.CallOption) (*GetWorkFlowReply, error)
	DelWorkFlow(ctx context.Context, in *DelWorkFlowRequest, opts ...grpc.CallOption) (*DelWorkFlowReply, error)
	SetWorkFlowStatus(ctx context.Context, in *SetWorkFlowStatusRequest, opts ...grpc.CallOption) (*SetWorkFlowStatusReply, error)
	CopyWorkFlow(ctx context.Context, in *CopyWorkFlowRequest, opts ...grpc.CallOption) (*CopyWorkFlowReply, error)
	SetWorkFlowName(ctx context.Context, in *SetWorkFlowNameRequest, opts ...grpc.CallOption) (*SetWorkFlowNameReply, error)
	GetWorkFlowTemplate(ctx context.Context, in *GetWorkFlowTemplateRequest, opts ...grpc.CallOption) (*GetWorkFlowTemplateReply, error)
	GetWorkItemRelationCount(ctx context.Context, in *GetWorkItemRelationCountRequest, opts ...grpc.CallOption) (*GetWorkItemRelationCountReply, error)
	GetOwnerRuleRelationTemplate(ctx context.Context, in *GetOwnerRuleRelationTemplateRequest, opts ...grpc.CallOption) (*GetOwnerRuleRelationTemplateReply, error)
}

type workFlowClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkFlowClient(cc grpc.ClientConnInterface) WorkFlowClient {
	return &workFlowClient{cc}
}

func (c *workFlowClient) SpaceWorkFlowPageList(ctx context.Context, in *SpaceWorkFlowPageListRequest, opts ...grpc.CallOption) (*SpaceWorkFlowPageListReply, error) {
	out := new(SpaceWorkFlowPageListReply)
	err := c.cc.Invoke(ctx, WorkFlow_SpaceWorkFlowPageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) SpaceWorkFlowList(ctx context.Context, in *SpaceWorkFlowListRequest, opts ...grpc.CallOption) (*SpaceWorkFlowListReply, error) {
	out := new(SpaceWorkFlowListReply)
	err := c.cc.Invoke(ctx, WorkFlow_SpaceWorkFlowList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) SpaceWorkFlowById(ctx context.Context, in *SpaceWorkFlowByIdRequest, opts ...grpc.CallOption) (*SpaceWorkFlowByIdReply, error) {
	out := new(SpaceWorkFlowByIdReply)
	err := c.cc.Invoke(ctx, WorkFlow_SpaceWorkFlowById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) SetWorkFlowRanking(ctx context.Context, in *SetWorkFlowRankingRequest, opts ...grpc.CallOption) (*SetWorkFlowRankingReply, error) {
	out := new(SetWorkFlowRankingReply)
	err := c.cc.Invoke(ctx, WorkFlow_SetWorkFlowRanking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) SaveWorkFlowTemplateConfig(ctx context.Context, in *SaveWorkFlowTemplateConfigRequest, opts ...grpc.CallOption) (*SaveWorkFlowTemplateConfigReply, error) {
	out := new(SaveWorkFlowTemplateConfigReply)
	err := c.cc.Invoke(ctx, WorkFlow_SaveWorkFlowTemplateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) CreateWorkFlow(ctx context.Context, in *CreateWorkFlowRequest, opts ...grpc.CallOption) (*CreateWorkFlowReply, error) {
	out := new(CreateWorkFlowReply)
	err := c.cc.Invoke(ctx, WorkFlow_CreateWorkFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) GetWorkFlow(ctx context.Context, in *GetWorkFlowRequest, opts ...grpc.CallOption) (*GetWorkFlowReply, error) {
	out := new(GetWorkFlowReply)
	err := c.cc.Invoke(ctx, WorkFlow_GetWorkFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) DelWorkFlow(ctx context.Context, in *DelWorkFlowRequest, opts ...grpc.CallOption) (*DelWorkFlowReply, error) {
	out := new(DelWorkFlowReply)
	err := c.cc.Invoke(ctx, WorkFlow_DelWorkFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) SetWorkFlowStatus(ctx context.Context, in *SetWorkFlowStatusRequest, opts ...grpc.CallOption) (*SetWorkFlowStatusReply, error) {
	out := new(SetWorkFlowStatusReply)
	err := c.cc.Invoke(ctx, WorkFlow_SetWorkFlowStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) CopyWorkFlow(ctx context.Context, in *CopyWorkFlowRequest, opts ...grpc.CallOption) (*CopyWorkFlowReply, error) {
	out := new(CopyWorkFlowReply)
	err := c.cc.Invoke(ctx, WorkFlow_CopyWorkFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) SetWorkFlowName(ctx context.Context, in *SetWorkFlowNameRequest, opts ...grpc.CallOption) (*SetWorkFlowNameReply, error) {
	out := new(SetWorkFlowNameReply)
	err := c.cc.Invoke(ctx, WorkFlow_SetWorkFlowName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) GetWorkFlowTemplate(ctx context.Context, in *GetWorkFlowTemplateRequest, opts ...grpc.CallOption) (*GetWorkFlowTemplateReply, error) {
	out := new(GetWorkFlowTemplateReply)
	err := c.cc.Invoke(ctx, WorkFlow_GetWorkFlowTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) GetWorkItemRelationCount(ctx context.Context, in *GetWorkItemRelationCountRequest, opts ...grpc.CallOption) (*GetWorkItemRelationCountReply, error) {
	out := new(GetWorkItemRelationCountReply)
	err := c.cc.Invoke(ctx, WorkFlow_GetWorkItemRelationCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) GetOwnerRuleRelationTemplate(ctx context.Context, in *GetOwnerRuleRelationTemplateRequest, opts ...grpc.CallOption) (*GetOwnerRuleRelationTemplateReply, error) {
	out := new(GetOwnerRuleRelationTemplateReply)
	err := c.cc.Invoke(ctx, WorkFlow_GetOwnerRuleRelationTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkFlowServer is the server API for WorkFlow service.
// All implementations must embed UnimplementedWorkFlowServer
// for forward compatibility
type WorkFlowServer interface {
	SpaceWorkFlowPageList(context.Context, *SpaceWorkFlowPageListRequest) (*SpaceWorkFlowPageListReply, error)
	SpaceWorkFlowList(context.Context, *SpaceWorkFlowListRequest) (*SpaceWorkFlowListReply, error)
	SpaceWorkFlowById(context.Context, *SpaceWorkFlowByIdRequest) (*SpaceWorkFlowByIdReply, error)
	SetWorkFlowRanking(context.Context, *SetWorkFlowRankingRequest) (*SetWorkFlowRankingReply, error)
	SaveWorkFlowTemplateConfig(context.Context, *SaveWorkFlowTemplateConfigRequest) (*SaveWorkFlowTemplateConfigReply, error)
	CreateWorkFlow(context.Context, *CreateWorkFlowRequest) (*CreateWorkFlowReply, error)
	GetWorkFlow(context.Context, *GetWorkFlowRequest) (*GetWorkFlowReply, error)
	DelWorkFlow(context.Context, *DelWorkFlowRequest) (*DelWorkFlowReply, error)
	SetWorkFlowStatus(context.Context, *SetWorkFlowStatusRequest) (*SetWorkFlowStatusReply, error)
	CopyWorkFlow(context.Context, *CopyWorkFlowRequest) (*CopyWorkFlowReply, error)
	SetWorkFlowName(context.Context, *SetWorkFlowNameRequest) (*SetWorkFlowNameReply, error)
	GetWorkFlowTemplate(context.Context, *GetWorkFlowTemplateRequest) (*GetWorkFlowTemplateReply, error)
	GetWorkItemRelationCount(context.Context, *GetWorkItemRelationCountRequest) (*GetWorkItemRelationCountReply, error)
	GetOwnerRuleRelationTemplate(context.Context, *GetOwnerRuleRelationTemplateRequest) (*GetOwnerRuleRelationTemplateReply, error)
	mustEmbedUnimplementedWorkFlowServer()
}

// UnimplementedWorkFlowServer must be embedded to have forward compatible implementations.
type UnimplementedWorkFlowServer struct {
}

func (UnimplementedWorkFlowServer) SpaceWorkFlowPageList(context.Context, *SpaceWorkFlowPageListRequest) (*SpaceWorkFlowPageListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceWorkFlowPageList not implemented")
}
func (UnimplementedWorkFlowServer) SpaceWorkFlowList(context.Context, *SpaceWorkFlowListRequest) (*SpaceWorkFlowListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceWorkFlowList not implemented")
}
func (UnimplementedWorkFlowServer) SpaceWorkFlowById(context.Context, *SpaceWorkFlowByIdRequest) (*SpaceWorkFlowByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceWorkFlowById not implemented")
}
func (UnimplementedWorkFlowServer) SetWorkFlowRanking(context.Context, *SetWorkFlowRankingRequest) (*SetWorkFlowRankingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWorkFlowRanking not implemented")
}
func (UnimplementedWorkFlowServer) SaveWorkFlowTemplateConfig(context.Context, *SaveWorkFlowTemplateConfigRequest) (*SaveWorkFlowTemplateConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveWorkFlowTemplateConfig not implemented")
}
func (UnimplementedWorkFlowServer) CreateWorkFlow(context.Context, *CreateWorkFlowRequest) (*CreateWorkFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkFlow not implemented")
}
func (UnimplementedWorkFlowServer) GetWorkFlow(context.Context, *GetWorkFlowRequest) (*GetWorkFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkFlow not implemented")
}
func (UnimplementedWorkFlowServer) DelWorkFlow(context.Context, *DelWorkFlowRequest) (*DelWorkFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelWorkFlow not implemented")
}
func (UnimplementedWorkFlowServer) SetWorkFlowStatus(context.Context, *SetWorkFlowStatusRequest) (*SetWorkFlowStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWorkFlowStatus not implemented")
}
func (UnimplementedWorkFlowServer) CopyWorkFlow(context.Context, *CopyWorkFlowRequest) (*CopyWorkFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyWorkFlow not implemented")
}
func (UnimplementedWorkFlowServer) SetWorkFlowName(context.Context, *SetWorkFlowNameRequest) (*SetWorkFlowNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWorkFlowName not implemented")
}
func (UnimplementedWorkFlowServer) GetWorkFlowTemplate(context.Context, *GetWorkFlowTemplateRequest) (*GetWorkFlowTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkFlowTemplate not implemented")
}
func (UnimplementedWorkFlowServer) GetWorkItemRelationCount(context.Context, *GetWorkItemRelationCountRequest) (*GetWorkItemRelationCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkItemRelationCount not implemented")
}
func (UnimplementedWorkFlowServer) GetOwnerRuleRelationTemplate(context.Context, *GetOwnerRuleRelationTemplateRequest) (*GetOwnerRuleRelationTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnerRuleRelationTemplate not implemented")
}
func (UnimplementedWorkFlowServer) mustEmbedUnimplementedWorkFlowServer() {}

// UnsafeWorkFlowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkFlowServer will
// result in compilation errors.
type UnsafeWorkFlowServer interface {
	mustEmbedUnimplementedWorkFlowServer()
}

func RegisterWorkFlowServer(s grpc.ServiceRegistrar, srv WorkFlowServer) {
	s.RegisterService(&WorkFlow_ServiceDesc, srv)
}

func _WorkFlow_SpaceWorkFlowPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceWorkFlowPageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).SpaceWorkFlowPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_SpaceWorkFlowPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).SpaceWorkFlowPageList(ctx, req.(*SpaceWorkFlowPageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_SpaceWorkFlowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceWorkFlowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).SpaceWorkFlowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_SpaceWorkFlowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).SpaceWorkFlowList(ctx, req.(*SpaceWorkFlowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_SpaceWorkFlowById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceWorkFlowByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).SpaceWorkFlowById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_SpaceWorkFlowById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).SpaceWorkFlowById(ctx, req.(*SpaceWorkFlowByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_SetWorkFlowRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWorkFlowRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).SetWorkFlowRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_SetWorkFlowRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).SetWorkFlowRanking(ctx, req.(*SetWorkFlowRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_SaveWorkFlowTemplateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveWorkFlowTemplateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).SaveWorkFlowTemplateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_SaveWorkFlowTemplateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).SaveWorkFlowTemplateConfig(ctx, req.(*SaveWorkFlowTemplateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_CreateWorkFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).CreateWorkFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_CreateWorkFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).CreateWorkFlow(ctx, req.(*CreateWorkFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_GetWorkFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).GetWorkFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_GetWorkFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).GetWorkFlow(ctx, req.(*GetWorkFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_DelWorkFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelWorkFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).DelWorkFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_DelWorkFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).DelWorkFlow(ctx, req.(*DelWorkFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_SetWorkFlowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWorkFlowStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).SetWorkFlowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_SetWorkFlowStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).SetWorkFlowStatus(ctx, req.(*SetWorkFlowStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_CopyWorkFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyWorkFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).CopyWorkFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_CopyWorkFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).CopyWorkFlow(ctx, req.(*CopyWorkFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_SetWorkFlowName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWorkFlowNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).SetWorkFlowName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_SetWorkFlowName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).SetWorkFlowName(ctx, req.(*SetWorkFlowNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_GetWorkFlowTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkFlowTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).GetWorkFlowTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_GetWorkFlowTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).GetWorkFlowTemplate(ctx, req.(*GetWorkFlowTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_GetWorkItemRelationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkItemRelationCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).GetWorkItemRelationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_GetWorkItemRelationCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).GetWorkItemRelationCount(ctx, req.(*GetWorkItemRelationCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_GetOwnerRuleRelationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnerRuleRelationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).GetOwnerRuleRelationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkFlow_GetOwnerRuleRelationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).GetOwnerRuleRelationTemplate(ctx, req.(*GetOwnerRuleRelationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkFlow_ServiceDesc is the grpc.ServiceDesc for WorkFlow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkFlow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.work_flow.v1.work_flow",
	HandlerType: (*WorkFlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SpaceWorkFlowPageList",
			Handler:    _WorkFlow_SpaceWorkFlowPageList_Handler,
		},
		{
			MethodName: "SpaceWorkFlowList",
			Handler:    _WorkFlow_SpaceWorkFlowList_Handler,
		},
		{
			MethodName: "SpaceWorkFlowById",
			Handler:    _WorkFlow_SpaceWorkFlowById_Handler,
		},
		{
			MethodName: "SetWorkFlowRanking",
			Handler:    _WorkFlow_SetWorkFlowRanking_Handler,
		},
		{
			MethodName: "SaveWorkFlowTemplateConfig",
			Handler:    _WorkFlow_SaveWorkFlowTemplateConfig_Handler,
		},
		{
			MethodName: "CreateWorkFlow",
			Handler:    _WorkFlow_CreateWorkFlow_Handler,
		},
		{
			MethodName: "GetWorkFlow",
			Handler:    _WorkFlow_GetWorkFlow_Handler,
		},
		{
			MethodName: "DelWorkFlow",
			Handler:    _WorkFlow_DelWorkFlow_Handler,
		},
		{
			MethodName: "SetWorkFlowStatus",
			Handler:    _WorkFlow_SetWorkFlowStatus_Handler,
		},
		{
			MethodName: "CopyWorkFlow",
			Handler:    _WorkFlow_CopyWorkFlow_Handler,
		},
		{
			MethodName: "SetWorkFlowName",
			Handler:    _WorkFlow_SetWorkFlowName_Handler,
		},
		{
			MethodName: "GetWorkFlowTemplate",
			Handler:    _WorkFlow_GetWorkFlowTemplate_Handler,
		},
		{
			MethodName: "GetWorkItemRelationCount",
			Handler:    _WorkFlow_GetWorkItemRelationCount_Handler,
		},
		{
			MethodName: "GetOwnerRuleRelationTemplate",
			Handler:    _WorkFlow_GetOwnerRuleRelationTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "work_flow/v1/work_flow.proto",
}
