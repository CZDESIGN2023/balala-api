// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: work_flow/v1/work_flow.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWorkFlowCopyWorkFlow = "/api.work_flow.v1.work_flow/CopyWorkFlow"
const OperationWorkFlowCreateWorkFlow = "/api.work_flow.v1.work_flow/CreateWorkFlow"
const OperationWorkFlowDelWorkFlow = "/api.work_flow.v1.work_flow/DelWorkFlow"
const OperationWorkFlowGetOwnerRuleRelationTemplate = "/api.work_flow.v1.work_flow/GetOwnerRuleRelationTemplate"
const OperationWorkFlowGetWorkFlow = "/api.work_flow.v1.work_flow/GetWorkFlow"
const OperationWorkFlowGetWorkFlowTemplate = "/api.work_flow.v1.work_flow/GetWorkFlowTemplate"
const OperationWorkFlowGetWorkItemRelationCount = "/api.work_flow.v1.work_flow/GetWorkItemRelationCount"
const OperationWorkFlowSaveWorkFlowTemplateConfig = "/api.work_flow.v1.work_flow/SaveWorkFlowTemplateConfig"
const OperationWorkFlowSetWorkFlowName = "/api.work_flow.v1.work_flow/SetWorkFlowName"
const OperationWorkFlowSetWorkFlowRanking = "/api.work_flow.v1.work_flow/SetWorkFlowRanking"
const OperationWorkFlowSetWorkFlowStatus = "/api.work_flow.v1.work_flow/SetWorkFlowStatus"
const OperationWorkFlowSpaceWorkFlowById = "/api.work_flow.v1.work_flow/SpaceWorkFlowById"
const OperationWorkFlowSpaceWorkFlowList = "/api.work_flow.v1.work_flow/SpaceWorkFlowList"
const OperationWorkFlowSpaceWorkFlowPageList = "/api.work_flow.v1.work_flow/SpaceWorkFlowPageList"

type WorkFlowHTTPServer interface {
	CopyWorkFlow(context.Context, *CopyWorkFlowRequest) (*CopyWorkFlowReply, error)
	CreateWorkFlow(context.Context, *CreateWorkFlowRequest) (*CreateWorkFlowReply, error)
	DelWorkFlow(context.Context, *DelWorkFlowRequest) (*DelWorkFlowReply, error)
	GetOwnerRuleRelationTemplate(context.Context, *GetOwnerRuleRelationTemplateRequest) (*GetOwnerRuleRelationTemplateReply, error)
	GetWorkFlow(context.Context, *GetWorkFlowRequest) (*GetWorkFlowReply, error)
	GetWorkFlowTemplate(context.Context, *GetWorkFlowTemplateRequest) (*GetWorkFlowTemplateReply, error)
	GetWorkItemRelationCount(context.Context, *GetWorkItemRelationCountRequest) (*GetWorkItemRelationCountReply, error)
	SaveWorkFlowTemplateConfig(context.Context, *SaveWorkFlowTemplateConfigRequest) (*SaveWorkFlowTemplateConfigReply, error)
	SetWorkFlowName(context.Context, *SetWorkFlowNameRequest) (*SetWorkFlowNameReply, error)
	SetWorkFlowRanking(context.Context, *SetWorkFlowRankingRequest) (*SetWorkFlowRankingReply, error)
	SetWorkFlowStatus(context.Context, *SetWorkFlowStatusRequest) (*SetWorkFlowStatusReply, error)
	SpaceWorkFlowById(context.Context, *SpaceWorkFlowByIdRequest) (*SpaceWorkFlowByIdReply, error)
	SpaceWorkFlowList(context.Context, *SpaceWorkFlowListRequest) (*SpaceWorkFlowListReply, error)
	SpaceWorkFlowPageList(context.Context, *SpaceWorkFlowPageListRequest) (*SpaceWorkFlowPageListReply, error)
}

func RegisterWorkFlowHTTPServer(s *http.Server, srv WorkFlowHTTPServer) {
	r := s.Route("/")
	r.POST("/my/space/work_flow/page_list", _WorkFlow_SpaceWorkFlowPageList0_HTTP_Handler(srv))
	r.POST("/my/space/work_flow/list", _WorkFlow_SpaceWorkFlowList0_HTTP_Handler(srv))
	r.POST("/my/space/work_flow/by_id", _WorkFlow_SpaceWorkFlowById0_HTTP_Handler(srv))
	r.POST("/my/space/work_flow/ranking/set", _WorkFlow_SetWorkFlowRanking0_HTTP_Handler(srv))
	r.POST("/my/space/work_flow/template_config/save", _WorkFlow_SaveWorkFlowTemplateConfig0_HTTP_Handler(srv))
	r.POST("/my/space/work_flow/create", _WorkFlow_CreateWorkFlow0_HTTP_Handler(srv))
	r.POST("/my/space/work_flow", _WorkFlow_GetWorkFlow0_HTTP_Handler(srv))
	r.POST("/my/space/work_flow/del", _WorkFlow_DelWorkFlow0_HTTP_Handler(srv))
	r.POST("/my/space/work_flow/status/set", _WorkFlow_SetWorkFlowStatus0_HTTP_Handler(srv))
	r.POST("/my/space/work_flow/copy", _WorkFlow_CopyWorkFlow0_HTTP_Handler(srv))
	r.POST("/my/space/work_flow/name/set", _WorkFlow_SetWorkFlowName0_HTTP_Handler(srv))
	r.POST("/my/space/work_flow/template", _WorkFlow_GetWorkFlowTemplate0_HTTP_Handler(srv))
	r.POST("/my/space/work_flow/work_item_relation_count", _WorkFlow_GetWorkItemRelationCount1_HTTP_Handler(srv))
	r.POST("/my/space/work_flow/template/owner_rule_relation", _WorkFlow_GetOwnerRuleRelationTemplate0_HTTP_Handler(srv))
}

func _WorkFlow_SpaceWorkFlowPageList0_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceWorkFlowPageListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowSpaceWorkFlowPageList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpaceWorkFlowPageList(ctx, req.(*SpaceWorkFlowPageListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceWorkFlowPageListReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlow_SpaceWorkFlowList0_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceWorkFlowListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowSpaceWorkFlowList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpaceWorkFlowList(ctx, req.(*SpaceWorkFlowListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceWorkFlowListReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlow_SpaceWorkFlowById0_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceWorkFlowByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowSpaceWorkFlowById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpaceWorkFlowById(ctx, req.(*SpaceWorkFlowByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceWorkFlowByIdReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlow_SetWorkFlowRanking0_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetWorkFlowRankingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowSetWorkFlowRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetWorkFlowRanking(ctx, req.(*SetWorkFlowRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetWorkFlowRankingReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlow_SaveWorkFlowTemplateConfig0_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveWorkFlowTemplateConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowSaveWorkFlowTemplateConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveWorkFlowTemplateConfig(ctx, req.(*SaveWorkFlowTemplateConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveWorkFlowTemplateConfigReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlow_CreateWorkFlow0_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWorkFlowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowCreateWorkFlow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWorkFlow(ctx, req.(*CreateWorkFlowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWorkFlowReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlow_GetWorkFlow0_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWorkFlowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowGetWorkFlow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWorkFlow(ctx, req.(*GetWorkFlowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWorkFlowReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlow_DelWorkFlow0_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelWorkFlowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowDelWorkFlow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelWorkFlow(ctx, req.(*DelWorkFlowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelWorkFlowReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlow_SetWorkFlowStatus0_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetWorkFlowStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowSetWorkFlowStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetWorkFlowStatus(ctx, req.(*SetWorkFlowStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetWorkFlowStatusReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlow_CopyWorkFlow0_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CopyWorkFlowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowCopyWorkFlow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CopyWorkFlow(ctx, req.(*CopyWorkFlowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CopyWorkFlowReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlow_SetWorkFlowName0_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetWorkFlowNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowSetWorkFlowName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetWorkFlowName(ctx, req.(*SetWorkFlowNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetWorkFlowNameReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlow_GetWorkFlowTemplate0_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWorkFlowTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowGetWorkFlowTemplate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWorkFlowTemplate(ctx, req.(*GetWorkFlowTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWorkFlowTemplateReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlow_GetWorkItemRelationCount1_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWorkItemRelationCountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowGetWorkItemRelationCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWorkItemRelationCount(ctx, req.(*GetWorkItemRelationCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWorkItemRelationCountReply)
		return ctx.Result(200, reply)
	}
}

func _WorkFlow_GetOwnerRuleRelationTemplate0_HTTP_Handler(srv WorkFlowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOwnerRuleRelationTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWorkFlowGetOwnerRuleRelationTemplate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOwnerRuleRelationTemplate(ctx, req.(*GetOwnerRuleRelationTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOwnerRuleRelationTemplateReply)
		return ctx.Result(200, reply)
	}
}

type WorkFlowHTTPClient interface {
	CopyWorkFlow(ctx context.Context, req *CopyWorkFlowRequest, opts ...http.CallOption) (rsp *CopyWorkFlowReply, err error)
	CreateWorkFlow(ctx context.Context, req *CreateWorkFlowRequest, opts ...http.CallOption) (rsp *CreateWorkFlowReply, err error)
	DelWorkFlow(ctx context.Context, req *DelWorkFlowRequest, opts ...http.CallOption) (rsp *DelWorkFlowReply, err error)
	GetOwnerRuleRelationTemplate(ctx context.Context, req *GetOwnerRuleRelationTemplateRequest, opts ...http.CallOption) (rsp *GetOwnerRuleRelationTemplateReply, err error)
	GetWorkFlow(ctx context.Context, req *GetWorkFlowRequest, opts ...http.CallOption) (rsp *GetWorkFlowReply, err error)
	GetWorkFlowTemplate(ctx context.Context, req *GetWorkFlowTemplateRequest, opts ...http.CallOption) (rsp *GetWorkFlowTemplateReply, err error)
	GetWorkItemRelationCount(ctx context.Context, req *GetWorkItemRelationCountRequest, opts ...http.CallOption) (rsp *GetWorkItemRelationCountReply, err error)
	SaveWorkFlowTemplateConfig(ctx context.Context, req *SaveWorkFlowTemplateConfigRequest, opts ...http.CallOption) (rsp *SaveWorkFlowTemplateConfigReply, err error)
	SetWorkFlowName(ctx context.Context, req *SetWorkFlowNameRequest, opts ...http.CallOption) (rsp *SetWorkFlowNameReply, err error)
	SetWorkFlowRanking(ctx context.Context, req *SetWorkFlowRankingRequest, opts ...http.CallOption) (rsp *SetWorkFlowRankingReply, err error)
	SetWorkFlowStatus(ctx context.Context, req *SetWorkFlowStatusRequest, opts ...http.CallOption) (rsp *SetWorkFlowStatusReply, err error)
	SpaceWorkFlowById(ctx context.Context, req *SpaceWorkFlowByIdRequest, opts ...http.CallOption) (rsp *SpaceWorkFlowByIdReply, err error)
	SpaceWorkFlowList(ctx context.Context, req *SpaceWorkFlowListRequest, opts ...http.CallOption) (rsp *SpaceWorkFlowListReply, err error)
	SpaceWorkFlowPageList(ctx context.Context, req *SpaceWorkFlowPageListRequest, opts ...http.CallOption) (rsp *SpaceWorkFlowPageListReply, err error)
}

type WorkFlowHTTPClientImpl struct {
	cc *http.Client
}

func NewWorkFlowHTTPClient(client *http.Client) WorkFlowHTTPClient {
	return &WorkFlowHTTPClientImpl{client}
}

func (c *WorkFlowHTTPClientImpl) CopyWorkFlow(ctx context.Context, in *CopyWorkFlowRequest, opts ...http.CallOption) (*CopyWorkFlowReply, error) {
	var out CopyWorkFlowReply
	pattern := "/my/space/work_flow/copy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowCopyWorkFlow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowHTTPClientImpl) CreateWorkFlow(ctx context.Context, in *CreateWorkFlowRequest, opts ...http.CallOption) (*CreateWorkFlowReply, error) {
	var out CreateWorkFlowReply
	pattern := "/my/space/work_flow/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowCreateWorkFlow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowHTTPClientImpl) DelWorkFlow(ctx context.Context, in *DelWorkFlowRequest, opts ...http.CallOption) (*DelWorkFlowReply, error) {
	var out DelWorkFlowReply
	pattern := "/my/space/work_flow/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowDelWorkFlow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowHTTPClientImpl) GetOwnerRuleRelationTemplate(ctx context.Context, in *GetOwnerRuleRelationTemplateRequest, opts ...http.CallOption) (*GetOwnerRuleRelationTemplateReply, error) {
	var out GetOwnerRuleRelationTemplateReply
	pattern := "/my/space/work_flow/template/owner_rule_relation"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowGetOwnerRuleRelationTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowHTTPClientImpl) GetWorkFlow(ctx context.Context, in *GetWorkFlowRequest, opts ...http.CallOption) (*GetWorkFlowReply, error) {
	var out GetWorkFlowReply
	pattern := "/my/space/work_flow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowGetWorkFlow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowHTTPClientImpl) GetWorkFlowTemplate(ctx context.Context, in *GetWorkFlowTemplateRequest, opts ...http.CallOption) (*GetWorkFlowTemplateReply, error) {
	var out GetWorkFlowTemplateReply
	pattern := "/my/space/work_flow/template"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowGetWorkFlowTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowHTTPClientImpl) GetWorkItemRelationCount(ctx context.Context, in *GetWorkItemRelationCountRequest, opts ...http.CallOption) (*GetWorkItemRelationCountReply, error) {
	var out GetWorkItemRelationCountReply
	pattern := "/my/space/work_flow/work_item_relation_count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowGetWorkItemRelationCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowHTTPClientImpl) SaveWorkFlowTemplateConfig(ctx context.Context, in *SaveWorkFlowTemplateConfigRequest, opts ...http.CallOption) (*SaveWorkFlowTemplateConfigReply, error) {
	var out SaveWorkFlowTemplateConfigReply
	pattern := "/my/space/work_flow/template_config/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowSaveWorkFlowTemplateConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowHTTPClientImpl) SetWorkFlowName(ctx context.Context, in *SetWorkFlowNameRequest, opts ...http.CallOption) (*SetWorkFlowNameReply, error) {
	var out SetWorkFlowNameReply
	pattern := "/my/space/work_flow/name/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowSetWorkFlowName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowHTTPClientImpl) SetWorkFlowRanking(ctx context.Context, in *SetWorkFlowRankingRequest, opts ...http.CallOption) (*SetWorkFlowRankingReply, error) {
	var out SetWorkFlowRankingReply
	pattern := "/my/space/work_flow/ranking/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowSetWorkFlowRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowHTTPClientImpl) SetWorkFlowStatus(ctx context.Context, in *SetWorkFlowStatusRequest, opts ...http.CallOption) (*SetWorkFlowStatusReply, error) {
	var out SetWorkFlowStatusReply
	pattern := "/my/space/work_flow/status/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowSetWorkFlowStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowHTTPClientImpl) SpaceWorkFlowById(ctx context.Context, in *SpaceWorkFlowByIdRequest, opts ...http.CallOption) (*SpaceWorkFlowByIdReply, error) {
	var out SpaceWorkFlowByIdReply
	pattern := "/my/space/work_flow/by_id"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowSpaceWorkFlowById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowHTTPClientImpl) SpaceWorkFlowList(ctx context.Context, in *SpaceWorkFlowListRequest, opts ...http.CallOption) (*SpaceWorkFlowListReply, error) {
	var out SpaceWorkFlowListReply
	pattern := "/my/space/work_flow/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowSpaceWorkFlowList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WorkFlowHTTPClientImpl) SpaceWorkFlowPageList(ctx context.Context, in *SpaceWorkFlowPageListRequest, opts ...http.CallOption) (*SpaceWorkFlowPageListReply, error) {
	var out SpaceWorkFlowPageListReply
	pattern := "/my/space/work_flow/page_list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWorkFlowSpaceWorkFlowPageList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
