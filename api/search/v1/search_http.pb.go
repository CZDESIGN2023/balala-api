// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: search/v1/search.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSearchSearchMySpaceWorkItemGroupInfoV2 = "/api.search.v1.search/SearchMySpaceWorkItemGroupInfoV2"
const OperationSearchSearchMySpaceWorkItemsByIdV2 = "/api.search.v1.search/SearchMySpaceWorkItemsByIdV2"

type SearchHTTPServer interface {
	SearchMySpaceWorkItemGroupInfoV2(context.Context, *SearchSpaceWorkItemGroupInfoRequestV2) (*SearchSpaceWorkItemGroupInfoReplyV2, error)
	SearchMySpaceWorkItemsByIdV2(context.Context, *SearchMySpaceWorkItemsByIdRequest) (*SearchMySpaceWorkItemsByIdReplyV2, error)
}

func RegisterSearchHTTPServer(s *http.Server, srv SearchHTTPServer) {
	r := s.Route("/")
	r.POST("/v2/my/search/space/work_item/group_info", _Search_SearchMySpaceWorkItemGroupInfoV20_HTTP_Handler(srv))
	r.POST("/v2/my/search/space/work_items/by_id", _Search_SearchMySpaceWorkItemsByIdV20_HTTP_Handler(srv))
}

func _Search_SearchMySpaceWorkItemGroupInfoV20_HTTP_Handler(srv SearchHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchSpaceWorkItemGroupInfoRequestV2
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSearchSearchMySpaceWorkItemGroupInfoV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchMySpaceWorkItemGroupInfoV2(ctx, req.(*SearchSpaceWorkItemGroupInfoRequestV2))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchSpaceWorkItemGroupInfoReplyV2)
		return ctx.Result(200, reply)
	}
}

func _Search_SearchMySpaceWorkItemsByIdV20_HTTP_Handler(srv SearchHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchMySpaceWorkItemsByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSearchSearchMySpaceWorkItemsByIdV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchMySpaceWorkItemsByIdV2(ctx, req.(*SearchMySpaceWorkItemsByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchMySpaceWorkItemsByIdReplyV2)
		return ctx.Result(200, reply)
	}
}

type SearchHTTPClient interface {
	SearchMySpaceWorkItemGroupInfoV2(ctx context.Context, req *SearchSpaceWorkItemGroupInfoRequestV2, opts ...http.CallOption) (rsp *SearchSpaceWorkItemGroupInfoReplyV2, err error)
	SearchMySpaceWorkItemsByIdV2(ctx context.Context, req *SearchMySpaceWorkItemsByIdRequest, opts ...http.CallOption) (rsp *SearchMySpaceWorkItemsByIdReplyV2, err error)
}

type SearchHTTPClientImpl struct {
	cc *http.Client
}

func NewSearchHTTPClient(client *http.Client) SearchHTTPClient {
	return &SearchHTTPClientImpl{client}
}

func (c *SearchHTTPClientImpl) SearchMySpaceWorkItemGroupInfoV2(ctx context.Context, in *SearchSpaceWorkItemGroupInfoRequestV2, opts ...http.CallOption) (*SearchSpaceWorkItemGroupInfoReplyV2, error) {
	var out SearchSpaceWorkItemGroupInfoReplyV2
	pattern := "/v2/my/search/space/work_item/group_info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSearchSearchMySpaceWorkItemGroupInfoV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SearchHTTPClientImpl) SearchMySpaceWorkItemsByIdV2(ctx context.Context, in *SearchMySpaceWorkItemsByIdRequest, opts ...http.CallOption) (*SearchMySpaceWorkItemsByIdReplyV2, error) {
	var out SearchMySpaceWorkItemsByIdReplyV2
	pattern := "/v2/my/search/space/work_items/by_id"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSearchSearchMySpaceWorkItemsByIdV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
