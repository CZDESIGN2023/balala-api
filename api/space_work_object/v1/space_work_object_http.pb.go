// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: space_work_object/v1/space_work_object.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSpaceWorkObjectCreateSpaceWorkObject = "/api.space_work_object.v1.space_work_object/CreateSpaceWorkObject"
const OperationSpaceWorkObjectDelSpaceWorkObject = "/api.space_work_object.v1.space_work_object/DelSpaceWorkObject"
const OperationSpaceWorkObjectDelSpaceWorkObject2 = "/api.space_work_object.v1.space_work_object/DelSpaceWorkObject2"
const OperationSpaceWorkObjectModifySpaceWorkObjectName = "/api.space_work_object.v1.space_work_object/ModifySpaceWorkObjectName"
const OperationSpaceWorkObjectSetOrder = "/api.space_work_object.v1.space_work_object/SetOrder"
const OperationSpaceWorkObjectSetSpaceWorkObjectRanking = "/api.space_work_object.v1.space_work_object/SetSpaceWorkObjectRanking"
const OperationSpaceWorkObjectSpaceWorkObjectById = "/api.space_work_object.v1.space_work_object/SpaceWorkObjectById"
const OperationSpaceWorkObjectSpaceWorkObjectList = "/api.space_work_object.v1.space_work_object/SpaceWorkObjectList"

type SpaceWorkObjectHTTPServer interface {
	CreateSpaceWorkObject(context.Context, *CreateSpaceWorkObjectRequest) (*CreateSpaceWorkObjectReply, error)
	DelSpaceWorkObject(context.Context, *DelSpaceWorkObjectRequest) (*DelSpaceWorkObjectReply, error)
	DelSpaceWorkObject2(context.Context, *DelSpaceWorkObjectRequest2) (*DelSpaceWorkObjectReply, error)
	ModifySpaceWorkObjectName(context.Context, *ModifySpaceWorkObjectNameRequest) (*ModifySpaceWorkObjectNameReply, error)
	SetOrder(context.Context, *SetWorkObjectOrderRequest) (*SetWorkObjectOrderReply, error)
	SetSpaceWorkObjectRanking(context.Context, *SetSpaceWorkObjectRankingRequest) (*SetSpaceWorkObjectRankingReply, error)
	SpaceWorkObjectById(context.Context, *SpaceWorkObjectByIdRequest) (*SpaceWorkObjectByIdReply, error)
	SpaceWorkObjectList(context.Context, *SpaceWorkObjectListRequest) (*SpaceWorkObjectListReply, error)
}

func RegisterSpaceWorkObjectHTTPServer(s *http.Server, srv SpaceWorkObjectHTTPServer) {
	r := s.Route("/")
	r.POST("/my/space/work_object/create", _SpaceWorkObject_CreateSpaceWorkObject0_HTTP_Handler(srv))
	r.POST("/my/space/work_object/list", _SpaceWorkObject_SpaceWorkObjectList0_HTTP_Handler(srv))
	r.POST("/my/space/work_object/by_id", _SpaceWorkObject_SpaceWorkObjectById0_HTTP_Handler(srv))
	r.POST("/my/space/work_object/modify/name", _SpaceWorkObject_ModifySpaceWorkObjectName0_HTTP_Handler(srv))
	r.POST("/my/space/work_object/del", _SpaceWorkObject_DelSpaceWorkObject0_HTTP_Handler(srv))
	r.POST("/my/space/work_object/del2", _SpaceWorkObject_DelSpaceWorkObject20_HTTP_Handler(srv))
	r.POST("/my/space/work_object/set_order", _SpaceWorkObject_SetOrder0_HTTP_Handler(srv))
	r.POST("/my/space/work_object/ranking/set", _SpaceWorkObject_SetSpaceWorkObjectRanking0_HTTP_Handler(srv))
}

func _SpaceWorkObject_CreateSpaceWorkObject0_HTTP_Handler(srv SpaceWorkObjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSpaceWorkObjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkObjectCreateSpaceWorkObject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSpaceWorkObject(ctx, req.(*CreateSpaceWorkObjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSpaceWorkObjectReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkObject_SpaceWorkObjectList0_HTTP_Handler(srv SpaceWorkObjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceWorkObjectListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkObjectSpaceWorkObjectList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpaceWorkObjectList(ctx, req.(*SpaceWorkObjectListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceWorkObjectListReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkObject_SpaceWorkObjectById0_HTTP_Handler(srv SpaceWorkObjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpaceWorkObjectByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkObjectSpaceWorkObjectById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpaceWorkObjectById(ctx, req.(*SpaceWorkObjectByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpaceWorkObjectByIdReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkObject_ModifySpaceWorkObjectName0_HTTP_Handler(srv SpaceWorkObjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifySpaceWorkObjectNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkObjectModifySpaceWorkObjectName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifySpaceWorkObjectName(ctx, req.(*ModifySpaceWorkObjectNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifySpaceWorkObjectNameReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkObject_DelSpaceWorkObject0_HTTP_Handler(srv SpaceWorkObjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelSpaceWorkObjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkObjectDelSpaceWorkObject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelSpaceWorkObject(ctx, req.(*DelSpaceWorkObjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelSpaceWorkObjectReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkObject_DelSpaceWorkObject20_HTTP_Handler(srv SpaceWorkObjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelSpaceWorkObjectRequest2
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkObjectDelSpaceWorkObject2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelSpaceWorkObject2(ctx, req.(*DelSpaceWorkObjectRequest2))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelSpaceWorkObjectReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkObject_SetOrder0_HTTP_Handler(srv SpaceWorkObjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetWorkObjectOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkObjectSetOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetOrder(ctx, req.(*SetWorkObjectOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetWorkObjectOrderReply)
		return ctx.Result(200, reply)
	}
}

func _SpaceWorkObject_SetSpaceWorkObjectRanking0_HTTP_Handler(srv SpaceWorkObjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSpaceWorkObjectRankingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSpaceWorkObjectSetSpaceWorkObjectRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSpaceWorkObjectRanking(ctx, req.(*SetSpaceWorkObjectRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetSpaceWorkObjectRankingReply)
		return ctx.Result(200, reply)
	}
}

type SpaceWorkObjectHTTPClient interface {
	CreateSpaceWorkObject(ctx context.Context, req *CreateSpaceWorkObjectRequest, opts ...http.CallOption) (rsp *CreateSpaceWorkObjectReply, err error)
	DelSpaceWorkObject(ctx context.Context, req *DelSpaceWorkObjectRequest, opts ...http.CallOption) (rsp *DelSpaceWorkObjectReply, err error)
	DelSpaceWorkObject2(ctx context.Context, req *DelSpaceWorkObjectRequest2, opts ...http.CallOption) (rsp *DelSpaceWorkObjectReply, err error)
	ModifySpaceWorkObjectName(ctx context.Context, req *ModifySpaceWorkObjectNameRequest, opts ...http.CallOption) (rsp *ModifySpaceWorkObjectNameReply, err error)
	SetOrder(ctx context.Context, req *SetWorkObjectOrderRequest, opts ...http.CallOption) (rsp *SetWorkObjectOrderReply, err error)
	SetSpaceWorkObjectRanking(ctx context.Context, req *SetSpaceWorkObjectRankingRequest, opts ...http.CallOption) (rsp *SetSpaceWorkObjectRankingReply, err error)
	SpaceWorkObjectById(ctx context.Context, req *SpaceWorkObjectByIdRequest, opts ...http.CallOption) (rsp *SpaceWorkObjectByIdReply, err error)
	SpaceWorkObjectList(ctx context.Context, req *SpaceWorkObjectListRequest, opts ...http.CallOption) (rsp *SpaceWorkObjectListReply, err error)
}

type SpaceWorkObjectHTTPClientImpl struct {
	cc *http.Client
}

func NewSpaceWorkObjectHTTPClient(client *http.Client) SpaceWorkObjectHTTPClient {
	return &SpaceWorkObjectHTTPClientImpl{client}
}

func (c *SpaceWorkObjectHTTPClientImpl) CreateSpaceWorkObject(ctx context.Context, in *CreateSpaceWorkObjectRequest, opts ...http.CallOption) (*CreateSpaceWorkObjectReply, error) {
	var out CreateSpaceWorkObjectReply
	pattern := "/my/space/work_object/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkObjectCreateSpaceWorkObject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkObjectHTTPClientImpl) DelSpaceWorkObject(ctx context.Context, in *DelSpaceWorkObjectRequest, opts ...http.CallOption) (*DelSpaceWorkObjectReply, error) {
	var out DelSpaceWorkObjectReply
	pattern := "/my/space/work_object/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkObjectDelSpaceWorkObject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkObjectHTTPClientImpl) DelSpaceWorkObject2(ctx context.Context, in *DelSpaceWorkObjectRequest2, opts ...http.CallOption) (*DelSpaceWorkObjectReply, error) {
	var out DelSpaceWorkObjectReply
	pattern := "/my/space/work_object/del2"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkObjectDelSpaceWorkObject2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkObjectHTTPClientImpl) ModifySpaceWorkObjectName(ctx context.Context, in *ModifySpaceWorkObjectNameRequest, opts ...http.CallOption) (*ModifySpaceWorkObjectNameReply, error) {
	var out ModifySpaceWorkObjectNameReply
	pattern := "/my/space/work_object/modify/name"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkObjectModifySpaceWorkObjectName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkObjectHTTPClientImpl) SetOrder(ctx context.Context, in *SetWorkObjectOrderRequest, opts ...http.CallOption) (*SetWorkObjectOrderReply, error) {
	var out SetWorkObjectOrderReply
	pattern := "/my/space/work_object/set_order"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkObjectSetOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkObjectHTTPClientImpl) SetSpaceWorkObjectRanking(ctx context.Context, in *SetSpaceWorkObjectRankingRequest, opts ...http.CallOption) (*SetSpaceWorkObjectRankingReply, error) {
	var out SetSpaceWorkObjectRankingReply
	pattern := "/my/space/work_object/ranking/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkObjectSetSpaceWorkObjectRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkObjectHTTPClientImpl) SpaceWorkObjectById(ctx context.Context, in *SpaceWorkObjectByIdRequest, opts ...http.CallOption) (*SpaceWorkObjectByIdReply, error) {
	var out SpaceWorkObjectByIdReply
	pattern := "/my/space/work_object/by_id"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkObjectSpaceWorkObjectById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SpaceWorkObjectHTTPClientImpl) SpaceWorkObjectList(ctx context.Context, in *SpaceWorkObjectListRequest, opts ...http.CallOption) (*SpaceWorkObjectListReply, error) {
	var out SpaceWorkObjectListReply
	pattern := "/my/space/work_object/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSpaceWorkObjectSpaceWorkObjectList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
