// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2/log"
	"go-cs/internal/biz"
	"go-cs/internal/biz/command"
	"go-cs/internal/biz/event_handlers"
	"go-cs/internal/biz/event_handlers/comment"
	"go-cs/internal/biz/event_handlers/notify"
	"go-cs/internal/biz/event_handlers/ops_log"
	"go-cs/internal/biz/query"
	"go-cs/internal/conf"
	"go-cs/internal/data"
	service2 "go-cs/internal/domain/file_info/service"
	task3 "go-cs/internal/domain/file_info/task"
	service20 "go-cs/internal/domain/notify_snapshot/service"
	service10 "go-cs/internal/domain/perm/service"
	"go-cs/internal/domain/pkg/message"
	service9 "go-cs/internal/domain/space/service"
	"go-cs/internal/domain/space/task"
	service18 "go-cs/internal/domain/space_file_info/service"
	service11 "go-cs/internal/domain/space_member/service"
	service16 "go-cs/internal/domain/space_tag/service"
	service15 "go-cs/internal/domain/space_view/service"
	service19 "go-cs/internal/domain/space_work_item_comment/service"
	service14 "go-cs/internal/domain/space_work_object/service"
	service13 "go-cs/internal/domain/space_work_version/service"
	service3 "go-cs/internal/domain/user/service"
	service4 "go-cs/internal/domain/user_login_log/service"
	service6 "go-cs/internal/domain/work_flow/service"
	service17 "go-cs/internal/domain/work_item/service"
	task2 "go-cs/internal/domain/work_item/task"
	service8 "go-cs/internal/domain/work_item_role/service"
	service7 "go-cs/internal/domain/work_item_status/service"
	service12 "go-cs/internal/domain/work_item_type/service"
	"go-cs/internal/dwh"
	"go-cs/internal/dwh/service"
	"go-cs/internal/pkg/biz_id"
	"go-cs/internal/server"
	"go-cs/internal/server/auth/server3auth"
	"go-cs/internal/server/file"
	task4 "go-cs/internal/server/file/task"
	"go-cs/internal/server/job"
	"go-cs/internal/server/river"
	"go-cs/internal/server/websock"
	service5 "go-cs/internal/service"
	"go-cs/internal/utils"
	"go-cs/internal/utils/cache"
	"go-cs/internal/utils/es/v8"
	"go-cs/internal/utils/orm"
	"go-cs/internal/utils/third_platform"
	"go-cs/migrate"
	"go-cs/migrate/migrations"
	"go-cs/migrate/migrations/v1_3_6_1"
	"go-cs/migrate/migrations/v1_3_6_4"
	"go-cs/migrate/migrations/v1_3_7_0"
	"go-cs/migrate/migrations/v1_3_7_2"
	"go-cs/migrate/migrations/v1_3_8_0"
	"go-cs/migrate/migrations/v1_3_8_1"
	"go-cs/migrate/migrations/v1_3_8_12"
	"go-cs/migrate/migrations/v1_3_9_0"
	"go-cs/migrate/migrations/v1_3_9_1"
	"go-cs/migrate/migrations/v1_4_10_0"
	"go-cs/migrate/migrations/v1_4_11_0"
	"go-cs/migrate/migrations/v1_4_12_0"
	"go-cs/migrate/migrations/v1_4_13_0"
	"go-cs/migrate/migrations/v1_4_14_0"
	"go-cs/migrate/migrations/v1_4_14_1"
	"go-cs/migrate/migrations/v1_4_1_0"
	"go-cs/migrate/migrations/v1_4_6_0"
	"go-cs/migrate/migrations/v1_4_7_0"
	"go-cs/migrate/migrations/v1_4_7_1"
	"go-cs/migrate/migrations/v1_4_8_0"
	"go-cs/migrate/migrations/v1_4_9_0"
	"go.uber.org/zap"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, confServer *conf.Server, confData *conf.Data, jwt *conf.Jwt, fileConfig *conf.FileConfig, confDwh *conf.Dwh, dwhApp *dwh.DwhApp, dwhService *service.DwhService, client *third_platform.Client, logLogger log.Logger, zapLogger *zap.Logger) (*server.App, func(), error) {
	db, cleanup, err := orm.NewOrm(confData, logLogger, zapLogger)
	if err != nil {
		return nil, nil, err
	}
	readonlyGormDB, cleanup2, err := data.NewReadonlyGormDB(confData, logLogger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	cacheConfig := cache.NewConfig(confData)
	redisClient, cleanup3, err := cache.NewRedis(cacheConfig, logLogger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	v8Config := v8.NewConfig(confData)
	elasticsearchClient, cleanup4, err := v8.NewEsClient(v8Config, logLogger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	store, cleanup5, err := utils.NewSessionStore(confData, logLogger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dataData, cleanup6, err := data.NewData(db, readonlyGormDB, redisClient, elasticsearchClient, store, confData, logLogger)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	spaceRepo := data.NewSpaceRepo(dataData, logLogger)
	spaceTask := task.NewSpaceTask(logLogger, dataData, spaceRepo)
	workFlowRepo := data.NewWorkFlowRepo(dataData, logLogger)
	workItemTask := task2.NewWorkItemTask(logLogger, dataData, spaceRepo, workFlowRepo)
	fileInfoTask := task3.NewFileInfoTask(logLogger, fileConfig, dataData)
	taskTask := task4.New(fileConfig, logLogger)
	cron, err := job.NewCron(logLogger, spaceTask, workItemTask, fileInfoTask, taskTask)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	riverRiver := river.New(confData, logLogger)
	authServer := server3auth.InitAuthServer(redisClient, jwt, logLogger)
	websockServer := websock.NewServer(redisClient, jwt, logLogger)
	transaction := data.NewTransaction(dataData)
	fileInfoRepo := data.NewFileInfoRepo(dataData, logLogger)
	businessIdService := biz_id.NewBusinessIdService(db, logLogger)
	fileInfoService := service2.NewFileInfoService(fileInfoRepo, businessIdService)
	uploadUsecase := biz.NewUploadUsecase(transaction, logLogger, fileInfoRepo, fileInfoService)
	spaceMemberRepo := data.NewSpaceMemberRepo(dataData, logLogger)
	userRepo := data.NewUserRepo(dataData, logLogger)
	spaceFileInfoRepo := data.NewSpaceFileInfoRepo(dataData, logLogger)
	spaceFileInfoUsecase := biz.NewSpaceFileInfoUsecase(logLogger, transaction, spaceMemberRepo, userRepo, spaceFileInfoRepo, fileInfoRepo)
	workItemRepo := data.NewSpaceWorkItemRepo(dataData, logLogger)
	configRepo := data.NewConfigRepo(dataData, logLogger)
	fileServer := file.NewServer(logLogger, uploadUsecase, spaceFileInfoUsecase, userRepo, spaceMemberRepo, workItemRepo, configRepo, fileInfoRepo, jwt, fileConfig, confServer, redisClient)
	loginRepo := data.NewLoginRepo(jwt, dataData, logLogger)
	searchRepo := data.NewSearchRepo(dataData, bootstrap, logLogger)
	notifySnapshotRepo := data.NewNotifyRepo(dataData, logLogger)
	adminRepo := data.NewAdminRepo(dataData, logLogger)
	userService := service3.NewUserService(userRepo, businessIdService)
	domainMessageProducer := message.NewDomainMessageProducer()
	userUsecase := biz.NewUserUsecase(client, logLogger, transaction, userRepo, loginRepo, spaceMemberRepo, searchRepo, spaceRepo, notifySnapshotRepo, adminRepo, configRepo, workItemRepo, userService, domainMessageProducer)
	userLoginLogRepo := data.NewUserLoginLogRepo(dataData, logLogger)
	userLgoinLogService := service4.NewUserLoginLogService(userLoginLogRepo)
	addUserLoginLogCmd := command.NewAddUserLoginLogCommand(userRepo, userLoginLogRepo, userLgoinLogService)
	loginUsecase := biz.NewLoginUsecase(loginRepo, transaction, userRepo, adminRepo, client, addUserLoginLogCmd, domainMessageProducer, logLogger)
	serviceUserService := service5.NewUserService(fileConfig, logLogger, userUsecase, uploadUsecase, loginUsecase)
	loginService := service5.NewLoginService(loginUsecase, confData, logLogger)
	configUsecase := biz.NewConfigUsecase(transaction, bootstrap, logLogger, configRepo, userRepo, domainMessageProducer)
	configService := service5.NewConfigService(configUsecase, logLogger)
	spaceWorkVersionRepo := data.NewSpaceWorkVersionRepo(dataData, logLogger)
	spaceWorkObjectRepo := data.NewSpaceWorkObjectRepo(dataData, logLogger)
	spaceTagRepo := data.NewSpaceTagRepo(dataData, logLogger)
	workItemTypeRepo := data.NewWorkItemTypeRepo(dataData, logLogger)
	workItemRoleRepo := data.NewWorkItemRoleRepo(dataData, logLogger)
	workItemStatusRepo := data.NewWorkItemStatusRepo(dataData, logLogger)
	spaceViewRepo := data.NewSpaceViewRepo(dataData, logLogger)
	workFlowService := service6.NewWorkFlowService(workFlowRepo, businessIdService, logLogger)
	workItemStatusService := service7.NewWorkItemStatusService(workItemStatusRepo, businessIdService, logLogger)
	workItemRoleService := service8.NewWorkItemRoleService(businessIdService, workItemRoleRepo, logLogger)
	spaceService := service9.NewSpaceService(spaceRepo, businessIdService)
	permService := service10.NewPermService(userRepo)
	spaceMemberService := service11.NewSpaceMemberService(spaceMemberRepo, businessIdService)
	workItemTypeService := service12.NewWorkItemTypeService(businessIdService, workItemTypeRepo, logLogger)
	spaceWorkVersionService := service13.NewSpaceWorkVersionService(spaceWorkVersionRepo, businessIdService)
	spaceWorkObjectService := service14.NewSpaceWorkObjectService(spaceWorkObjectRepo, businessIdService)
	spaceViewService := service15.NewSpaceViewService(spaceViewRepo, spaceMemberRepo)
	spaceUsecase := biz.NewSpaceUsecase(transaction, logLogger, spaceRepo, spaceWorkVersionRepo, spaceMemberRepo, spaceWorkObjectRepo, userRepo, workItemRepo, spaceFileInfoRepo, spaceTagRepo, workItemTypeRepo, workFlowRepo, workItemRoleRepo, workItemStatusRepo, searchRepo, spaceViewRepo, workFlowService, businessIdService, workItemStatusService, workItemRoleService, spaceService, permService, spaceMemberService, workItemTypeService, spaceWorkVersionService, spaceWorkObjectService, spaceViewService, domainMessageProducer)
	spaceWorkItemCommentRepo := data.NewSpaceWorkItemCommentRepo(dataData, logLogger)
	spaceMemberUsecase := biz.NewSpaceMemberUsecase(spaceMemberRepo, spaceRepo, userRepo, workItemRepo, spaceWorkItemCommentRepo, workFlowRepo, spaceViewRepo, permService, spaceMemberService, workFlowService, spaceViewService, domainMessageProducer, transaction, logLogger)
	serviceSpaceService := service5.NewSpaceService(spaceUsecase, spaceMemberUsecase, logLogger)
	serviceSpaceMemberService := service5.NewSpaceMemberService(spaceMemberUsecase, logLogger)
	staticsRepo := data.NewStaticsEsRepo(dataData, workItemStatusRepo, logLogger)
	spaceTagService := service16.NewSpaceTagService(spaceTagRepo, businessIdService)
	spaceTagUsecase := biz.NewSpaceTagUsecase(spaceTagRepo, transaction, staticsRepo, workItemRepo, userRepo, spaceRepo, spaceMemberRepo, permService, spaceTagService, domainMessageProducer, logLogger)
	serviceSpaceTagService := service5.NewSpaceTagService(spaceTagUsecase, logLogger)
	workItemEsRepo := data.NewSpaceWorkItemEsRepo(dataData, logLogger)
	workItemService := service17.NewWorkItemService(workItemRepo, businessIdService)
	spaceFileInfoService := service18.NewSpaceFileInfoService(spaceFileInfoRepo, businessIdService)
	spaceWorkItemCommentService := service19.NewSpaceWorkItemCommentService(spaceWorkItemCommentRepo)
	createSpaceTaskCmd := command.NewCreateSpaceTaskCmd(workItemRepo, workItemEsRepo, spaceRepo, spaceMemberRepo, spaceWorkObjectRepo, workItemRoleRepo, spaceWorkVersionRepo, workItemStatusRepo, workItemTypeRepo, workFlowRepo, fileInfoRepo, permService, spaceMemberService, spaceTagService, workItemService, spaceFileInfoService, fileInfoService, domainMessageProducer, logLogger, transaction)
	createSpaceSubTaskCmd := command.NewCreateSpaceSubTaskCmd(workItemRepo, workItemEsRepo, spaceRepo, spaceMemberRepo, spaceWorkObjectRepo, workItemRoleRepo, spaceWorkVersionRepo, workItemStatusRepo, workItemTypeRepo, workFlowRepo, fileInfoRepo, permService, spaceMemberService, spaceTagService, workItemService, spaceFileInfoService, domainMessageProducer, logLogger, transaction)
	addWorkItemCommentCmd := command.NewAddWorkItemCommentCommand(transaction, spaceWorkItemCommentService, workItemRepo, spaceMemberRepo, spaceWorkItemCommentRepo)
	workItemDetailQuery := query.NewWorkItemDetailQuery(workItemRepo, spaceRepo, spaceMemberRepo, spaceWorkObjectRepo, workItemRoleRepo, spaceWorkVersionRepo, workItemStatusRepo, workItemTypeRepo, workFlowRepo, fileInfoRepo, staticsRepo, spaceTagRepo, userRepo, spaceWorkItemCommentRepo, spaceFileInfoRepo, permService, spaceMemberService, spaceTagService, workItemService, spaceFileInfoService, logLogger, transaction)
	spaceWorkItemUsecase := biz.NewSpaceWorkItemUsecase(workItemRepo, workItemEsRepo, spaceWorkVersionRepo, staticsRepo, transaction, spaceFileInfoRepo, fileInfoRepo, spaceWorkObjectRepo, spaceTagRepo, workItemStatusRepo, workItemTypeRepo, workFlowRepo, userRepo, spaceRepo, spaceMemberRepo, spaceWorkItemCommentRepo, workItemRoleRepo, permService, workItemService, spaceMemberService, spaceTagService, spaceFileInfoService, spaceWorkItemCommentService, fileInfoService, workItemStatusService, createSpaceTaskCmd, createSpaceSubTaskCmd, addWorkItemCommentCmd, workItemDetailQuery, domainMessageProducer, logLogger)
	spaceWorkItemService := service5.NewSpaceWorkItemService(spaceWorkItemUsecase, logLogger)
	spaceWorkObjectUsecase := biz.NewSpaceWorkObjectUsecase(spaceWorkObjectRepo, workItemRepo, transaction, userRepo, spaceRepo, spaceMemberRepo, permService, spaceWorkObjectService, domainMessageProducer, logLogger)
	serviceSpaceWorkObjectService := service5.NewSpaceWorkObjectService(spaceWorkObjectUsecase, logLogger)
	searchUsecase := biz.NewSearchUsecase(transaction, logLogger, searchRepo, userRepo, spaceRepo, spaceMemberRepo, workItemRepo, spaceWorkObjectRepo, spaceTagRepo, spaceWorkItemCommentRepo, spaceWorkVersionRepo, workFlowRepo, workItemTypeRepo, workItemStatusRepo, permService)
	searchService := service5.NewSearchService(searchUsecase, logLogger)
	adminUsecase := biz.NewAdminUsecase(adminRepo, transaction, userRepo, userService, domainMessageProducer, logLogger)
	adminService := service5.NewAdminService(adminUsecase, logLogger)
	workFlowUsecase := biz.NewWorkFlowUsecase(workFlowRepo, spaceMemberRepo, spaceRepo, workItemTypeRepo, workItemStatusRepo, workItemRoleRepo, staticsRepo, workItemRepo, workFlowService, permService, businessIdService, domainMessageProducer, transaction, logLogger)
	serviceWorkFlowService := service5.NewWorkFlowService(logLogger, workFlowUsecase)
	staticsUsecase := biz.NewStaticsUsecase(staticsRepo, transaction, spaceMemberRepo, workItemStatusRepo, logLogger)
	workbenchService := service5.NewWorkbenchService(staticsUsecase, logLogger)
	spaceWorkItemFlowUsecase := biz.NewSpaceWorkItemFlowUsecase(transaction, logLogger, workItemRepo, workItemStatusRepo, workFlowRepo, userRepo, spaceRepo, spaceMemberRepo, permService, workItemService, workFlowService, workItemStatusService, domainMessageProducer)
	spaceWorkItemFlowService := service5.NewSpaceWorkItemFlowService(spaceWorkItemFlowUsecase, logLogger)
	logRepo := data.NewLogRepo(dataData, logLogger)
	logUsecase := biz.NewLogUsecase(logRepo, transaction, spaceRepo, userRepo, workItemRepo, logLogger)
	logService := service5.NewLogService(logUsecase, logLogger)
	middleareUsecase := biz.NewMiddlearesecase(userUsecase, logLogger)
	spaceWorkVersionUsecase := biz.NewSpaceWorkVersionUsecase(logLogger, transaction, spaceWorkVersionRepo, workItemRepo, userRepo, spaceRepo, spaceMemberRepo, permService, spaceWorkVersionService, domainMessageProducer)
	serviceSpaceWorkVersionService := service5.NewSpaceWorkVersionService(spaceWorkVersionUsecase, logLogger)
	workItemRoleUsecase := biz.NewWorkItemRoleUsecase(workItemRoleRepo, spaceMemberRepo, workItemTypeRepo, workItemRepo, workFlowRepo, workItemRoleService, permService, domainMessageProducer, transaction, logLogger)
	serviceWorkItemRoleService := service5.NewWorkItemRoleService(workItemRoleUsecase, logLogger)
	workItemStatusUsecase := biz.NewWorkItemStatusUsecase(workItemStatusRepo, spaceMemberRepo, workItemRepo, workFlowRepo, workItemStatusService, permService, domainMessageProducer, transaction, logLogger)
	serviceWorkItemStatusService := service5.NewWorkItemStatusService(workItemStatusUsecase, logLogger)
	rptUsecase := biz.NewRptUsecase(dwhService, logLogger, userRepo, spaceRepo, spaceMemberRepo, userLoginLogRepo)
	rptService := service5.NewRptService(rptUsecase, logLogger)
	spaceViewUsecase := biz.NewSpaceViewUsecase(logLogger, transaction, spaceViewRepo, userRepo, spaceRepo, spaceMemberRepo, permService, spaceViewService, domainMessageProducer)
	serviceSpaceViewService := service5.NewSpaceViewService(spaceViewUsecase, logLogger)
	httpServer := server.NewHTTPServer(authServer, confServer, websockServer, fileServer, serviceUserService, loginService, configService, serviceSpaceService, serviceSpaceMemberService, serviceSpaceTagService, spaceWorkItemService, serviceSpaceWorkObjectService, searchService, adminService, serviceWorkFlowService, redisClient, workbenchService, logLogger, spaceWorkItemFlowService, logService, middleareUsecase, serviceSpaceWorkVersionService, serviceWorkItemRoleService, serviceWorkItemStatusService, rptService, serviceSpaceViewService)
	app := newApp(logLogger, zapLogger, httpServer)
	operLogRepo := data.NewOperLogRepo(dataData, logLogger)
	domainMessageConsumer := message.NewDomainMessageConsumer(logLogger)
	opsLogEventHandlers := ops_log.NewOpsLogEventHandlers(logLogger, userRepo, operLogRepo, spaceRepo, workItemRoleRepo, workItemStatusRepo, spaceWorkObjectRepo, spaceWorkVersionRepo, workItemRepo, spaceTagRepo, workFlowRepo, spaceWorkItemCommentRepo, spaceViewRepo, domainMessageConsumer)
	notifySnapShotService := service20.NewNotifySnapShotService(notifySnapshotRepo)
	notifyNotify := notify.NewNotify(spaceRepo, userRepo, spaceWorkVersionRepo, workItemRepo, spaceMemberRepo, spaceTagRepo, notifySnapshotRepo, spaceWorkObjectRepo, configRepo, workItemStatusRepo, workFlowRepo, spaceWorkItemCommentRepo, notifySnapShotService, domainMessageConsumer, websockServer, client, logLogger)
	commentHandler := comment.NewCommentHandler(logLogger, workItemStatusRepo, addWorkItemCommentCmd, domainMessageConsumer)
	appEventHandlers := event_handlers.NewAppEventHandlers(logLogger, opsLogEventHandlers, notifyNotify, commentHandler)
	v1_3_6_1Migrate := v1_3_6_1.NewMigrate(logLogger)
	v1_3_6_4Migrate := v1_3_6_4.NewMigrate(logLogger)
	v1_3_7_0Migrate := v1_3_7_0.NewMigrate(logLogger)
	dml := v1_3_7_2.NewDML(logLogger, confDwh)
	v1_3_7_2Migrate := v1_3_7_2.NewMigrate(logLogger, dml)
	v1_3_8_0Migrate := v1_3_8_0.NewMigrate(logLogger)
	v1_3_8_1Migrate := v1_3_8_1.NewMigrate(logLogger)
	v1_3_8_12Migrate := v1_3_8_12.NewMigrate(logLogger)
	v1_3_9_0Migrate := v1_3_9_0.NewMigrate(logLogger)
	v1_3_9_1Migrate := v1_3_9_1.NewMigrate(logLogger)
	v1_4_1_0Migrate := v1_4_1_0.NewMigrate(logLogger)
	v1_4_6_0Migrate := v1_4_6_0.NewMigrate(logLogger)
	v1_4_7_0DML := v1_4_7_0.NewDML(spaceRepo, workItemStatusRepo, workItemRoleRepo, workItemTypeRepo, workFlowRepo, workItemTypeService, workItemRoleService, workItemStatusService, workFlowService, transaction)
	v1_4_7_0Migrate := v1_4_7_0.NewMigrate(logLogger, v1_4_7_0DML)
	v1_4_7_1Migrate := v1_4_7_1.NewMigrate(logLogger)
	v1_4_8_0Migrate := v1_4_8_0.NewMigrate(logLogger)
	v1_4_9_0DML := v1_4_9_0.NewDML(spaceRepo, workItemStatusRepo, workItemRoleRepo, workItemTypeRepo, workFlowRepo, spaceViewRepo, spaceMemberRepo, workItemTypeService, workItemRoleService, workItemStatusService, workFlowService, spaceViewService, redisClient, transaction)
	v1_4_9_0Migrate := v1_4_9_0.NewMigrate(logLogger, v1_4_9_0DML)
	v1_4_10_0Migrate := v1_4_10_0.NewMigrate(logLogger)
	v1_4_11_0DML := v1_4_11_0.NewDML(db, spaceRepo, spaceWorkVersionRepo, spaceMemberRepo)
	v1_4_11_0Migrate := v1_4_11_0.NewMigrate(logLogger, v1_4_11_0DML)
	v1_4_12_0Migrate := v1_4_12_0.NewMigrate(logLogger)
	v1_4_13_0DML := v1_4_13_0.NewDML(db, spaceRepo, spaceWorkVersionRepo, spaceMemberRepo, spaceViewRepo, workItemStatusRepo, spaceViewService)
	v1_4_13_0Migrate := v1_4_13_0.NewMigrate(logLogger, v1_4_13_0DML)
	v1_4_14_0Migrate := v1_4_14_0.NewMigrate(logLogger)
	v1_4_14_1Migrate := v1_4_14_1.NewMigrate(logLogger)
	migrationsMigrations := migrations.NewMigrations(v1_3_6_1Migrate, v1_3_6_4Migrate, v1_3_7_0Migrate, v1_3_7_2Migrate, v1_3_8_0Migrate, v1_3_8_1Migrate, v1_3_8_12Migrate, v1_3_9_0Migrate, v1_3_9_1Migrate, v1_4_1_0Migrate, v1_4_6_0Migrate, v1_4_7_0Migrate, v1_4_7_1Migrate, v1_4_8_0Migrate, v1_4_9_0Migrate, v1_4_10_0Migrate, v1_4_11_0Migrate, v1_4_12_0Migrate, v1_4_13_0Migrate, v1_4_14_0Migrate, v1_4_14_1Migrate)
	global, err := migrate.NewGlobal(logLogger, db, migrationsMigrations)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	serverApp := server.NewApp(logLogger, db, cron, riverRiver, app, appEventHandlers, global, dwhApp)
	return serverApp, func() {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
