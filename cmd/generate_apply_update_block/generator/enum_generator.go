package generator

import (
	parser2 "go-cs/pkg/parser"
	"os"
	"text/template"
)

const enumTemplate = `syntax = "proto3";
package server_go_base.bean;
option go_package = "server_go_base/internal/bean;bean";

// This file was automatically generated by enum generator
// Input file: {{.InputFilePath}}

{{range .Messages}}
{{ $messageName := .Name }}
enum {{$messageName}}Field {
	{{- range .Fields}}
	{{ToUpperWithUnderscores $messageName}}_{{ToUpperWithUnderscores .Name}} = {{.EnumValue}};
	{{- end}}
}
{{end}}
`

func GenerateEnumFile(tmplParams *parser2.TemplateParams, outputFilePath string) error {
	funcMap := template.FuncMap{
		"FormatEnumName": parser2.FormatEnumName,
		// ToUpperWithUnderscores 将字符串转换为大写，并使用下划线分隔单词
		"ToUpperWithUnderscores": parser2.ToUpperWithUnderscores,
	}

	tmpl, err := template.New("enum").Funcs(funcMap).Parse(enumTemplate)
	if err != nil {
		return err
	}

	outputFile, err := os.Create(outputFilePath)
	if err != nil {
		return err
	}
	defer outputFile.Close()

	err = tmpl.Execute(outputFile, tmplParams)
	if err != nil {
		return err
	}

	return nil
}
