package generator

import (
	parser2 "go-cs/pkg/parser"
	"os"
	"text/template"
)

const applyChangeTemplate = `// Code generated by protoc-gen-go. DO NOT EDIT.
// source: {{.InputFilePath}}

package {{.GoPackageName}}

import (
	"fmt"
	"errors"
)

var ErrInvalidIndex = errors.New("invalid index")
var ErrRepeatedFieldNotImplemented = errors.New("setting repeated field is not implemented")

// This file was automatically generated by apply change generator
// Input file: {{.InputFilePath}}

type FieldUpdater interface {
	ApplyFieldChange(fieldIndex int, fieldValue *FieldValue) error
}

{{range .Messages}}
{{ $messageName := .Name }}

type ApplyChange{{.Name}} {{.Name}}

func (m *ApplyChange{{.Name}}) ApplyFieldChange(fieldIndex int, fieldValue *FieldValue) error {
	// Set the appropriate field based on the field index
	switch fieldIndex {
		{{range .Fields}}
		{{- if ne .Name "id"}}
		case int({{$messageName}}Field_{{ToUpperWithUnderscores $messageName}}_{{ToUpperWithUnderscores .Name}}):
			{{- if .IsRepeated}}
			return ErrRepeatedFieldNotImplemented
			{{- else if or (eq .FieldType "TYPE_INT64") (eq .FieldType "TYPE_SINT64") }}
			m.{{ToPascalCase .Name}} = fieldValue.GetInt64Value()
			{{- else if eq .FieldType "TYPE_UINT64" }}
			m.{{ToPascalCase .Name}} = fieldValue.GetUint64Value()
			{{- else if or (eq .FieldType "TYPE_INT32") (eq .FieldType "TYPE_SINT32") }}
			m.{{ToPascalCase .Name}} = int32(fieldValue.GetInt32Value())
			{{- else if eq .FieldType "TYPE_UINT32" }}
			m.{{ToPascalCase .Name}} = uint32(fieldValue.GetUint32Value())
			{{- else if eq .FieldType "TYPE_FLOAT" }}
			m.{{ToPascalCase .Name}} = float32(fieldValue.GetFloatValue())
			{{- else if eq .FieldType "TYPE_DOUBLE" }}
			m.{{ToPascalCase .Name}} = fieldValue.GetDoubleValue()
			{{- else if eq .FieldType "TYPE_BOOL" }}
			m.{{ToPascalCase .Name}} = fieldValue.GetBoolValue()
			{{- else if eq .FieldType "TYPE_STRING" }}
			m.{{ToPascalCase .Name}} = fieldValue.GetStr()
			{{- else }}
			return fmt.Errorf("unknown type [{{.FieldType}}] for field {{$messageName}}FieldEnum_{{ToUpperWithUnderscores $messageName}}_FIELD_{{ToUpperWithUnderscores .Name}}: %s",  fieldValue)
			{{- end }}
		{{- end}}
		{{end}}
		default:
			return fmt.Errorf("unknown field index: %d", fieldIndex)
	}

	return nil
}
{{end}}
`

func GenerateApplyChangeFile(tmplParams *parser2.TemplateParams, outputFilePath string) error {
	funcMap := template.FuncMap{
		"ToUpperWithUnderscores": parser2.ToUpperWithUnderscores,
		"ToPascalCase":           parser2.ToPascalCase,
	}

	tmpl, err := template.New("applyChange").Funcs(funcMap).Parse(applyChangeTemplate)
	if err != nil {
		return err
	}

	// 计算 EnumTypePrefix
	tmplParams.EnumTypePrefix = parser2.ComputeEnumTypePrefix(tmplParams.Messages)

	outputFile, err := os.Create(outputFilePath)
	if err != nil {
		return err
	}
	defer outputFile.Close()

	err = tmpl.Execute(outputFile, tmplParams)
	if err != nil {
		return err
	}

	return nil
}
