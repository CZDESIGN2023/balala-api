package generator

import (
	parser2 "go-cs/pkg/parser"
	"os"
	"text/template"
)

const makeChangeTemplate = `// Code generated by protoc-gen-go. DO NOT EDIT.
// source: {{.InputFilePath}}

package {{.GoPackageName}}

import _ "errors"

// This file was automatically generated by make change generator
// Input file: {{.InputFilePath}}

{{range .Messages}}
{{ $messageName := .Name }}

type Change{{.Name}} struct {
	{{.Name}}
	Fields map[int]*FieldValue
	UD UpdateData
}

// NewChange{{.Name}} creates a new instance of Change{{.Name}}
func NewChange{{.Name}}(id int64) *Change{{.Name}} {
	return &Change{{.Name}}{
		{{.Name}}: {{.Name}}{
			Id: id,
		},
		UD: UpdateData{
			Id: id,
			ObjType:  uint32(Table_{{ToUpperWithUnderscores .Name}}),
			Masks: make([]byte, 0),
			Values: make([]*FieldValue, 0),
		},
		Fields: make(map[int]*FieldValue),
	}
}

{{range .Fields}}
{{- if ne .Name "id"}}
{{- if .IsRepeated}}
func (pb *Change{{$messageName}}) Set{{ToPascalCase .Name}}(newVal {{GoType .FieldType}}) error {
	return errors.New("setting repeated field is not implemented")
}
{{- else}}
func (pb *Change{{$messageName}}) Set{{ToPascalCase .Name}}(newVal {{GoType .FieldType}}) *Change{{$messageName}} {
	pb.{{ToPascalCase .Name}} = newVal
	fieldKey := int({{$messageName}}Field_{{ToUpperWithUnderscores $messageName}}_{{ToUpperWithUnderscores .Name}})
	{{- $fieldValueTypeStructName := FieldValueStructName .FieldType}}
	fvStr := {{$fieldValueTypeStructName}}{ {{FieldValueName .FieldType}}: newVal }
	fv := FieldValue{Value: &fvStr}
	pb.Fields[fieldKey] = &fv
	return pb
}
{{- end}}
{{- end}}
{{end}}

func (pb *Change{{$messageName}}) Finish() *UpdateData {
	SyncFieldsToUpdateDate(pb.Fields, &pb.UD)
	return &pb.UD
}

{{end}}
`

func GenerateCreateChangeFile(tmplParams *parser2.TemplateParams, outputFilePath string) error {
	funcMap := template.FuncMap{
		"ToPascalCase":           parser2.ToPascalCase,
		"ToUpperWithUnderscores": parser2.ToUpperWithUnderscores,
		"GoType":                 parser2.GoType,
		"FieldValueName":         parser2.FieldValueName,
		"FieldValueStructName":   parser2.FieldValueStructName,
	}

	tmpl, err := template.New("createChange").Funcs(funcMap).Parse(makeChangeTemplate)
	if err != nil {
		return err
	}

	outputFile, err := os.Create(outputFilePath)
	if err != nil {
		return err
	}
	defer outputFile.Close()

	err = tmpl.Execute(outputFile, tmplParams)
	if err != nil {
		return err
	}

	return nil
}
