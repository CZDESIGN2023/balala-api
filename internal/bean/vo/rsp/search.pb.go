// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: bean/vo/rsp/search.proto

package rsp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlowNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowNodeName string             `protobuf:"bytes,1,opt,name=flow_node_name,json=flowNodeName,proto3" json:"flow_node_name,omitempty"`
	FlowNodeCode string             `protobuf:"bytes,2,opt,name=flow_node_code,json=flowNodeCode,proto3" json:"flow_node_code,omitempty"` //节点编码
	Directors    []string           `protobuf:"bytes,3,rep,name=directors,proto3" json:"directors,omitempty"`                             //节点负责人
	PlanTime     *FlowNode_PlanTime `protobuf:"bytes,4,opt,name=plan_time,json=planTime,proto3" json:"plan_time,omitempty"`
}

func (x *FlowNode) Reset() {
	*x = FlowNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bean_vo_rsp_search_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowNode) ProtoMessage() {}

func (x *FlowNode) ProtoReflect() protoreflect.Message {
	mi := &file_bean_vo_rsp_search_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowNode.ProtoReflect.Descriptor instead.
func (*FlowNode) Descriptor() ([]byte, []int) {
	return file_bean_vo_rsp_search_proto_rawDescGZIP(), []int{0}
}

func (x *FlowNode) GetFlowNodeName() string {
	if x != nil {
		return x.FlowNodeName
	}
	return ""
}

func (x *FlowNode) GetFlowNodeCode() string {
	if x != nil {
		return x.FlowNodeCode
	}
	return ""
}

func (x *FlowNode) GetDirectors() []string {
	if x != nil {
		return x.Directors
	}
	return nil
}

func (x *FlowNode) GetPlanTime() *FlowNode_PlanTime {
	if x != nil {
		return x.PlanTime
	}
	return nil
}

type SearchWorkItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64                          `protobuf:"zigzag64,1,opt,name=id,proto3" json:"id,omitempty"`
	SpaceId              int64                          `protobuf:"zigzag64,2,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`                      //空间id
	UserId               int64                          `protobuf:"zigzag64,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         //创建用户id
	WorkObjectId         int64                          `protobuf:"zigzag64,4,opt,name=work_object_id,json=workObjectId,proto3" json:"work_object_id,omitempty"`     //工作项id
	WorkObjectName       string                         `protobuf:"bytes,38,opt,name=work_object_name,json=workObjectName,proto3" json:"work_object_name,omitempty"` //工作项id
	WorkItemGuid         string                         `protobuf:"bytes,5,opt,name=work_item_guid,json=workItemGuid,proto3" json:"work_item_guid,omitempty"`        //空间Guid
	WorkItemName         string                         `protobuf:"bytes,6,opt,name=work_item_name,json=workItemName,proto3" json:"work_item_name,omitempty"`        //空间名称
	PlanTime             *SearchWorkItemInfo_PlanTime   `protobuf:"bytes,8,opt,name=plan_time,json=planTime,proto3" json:"plan_time,omitempty"`                      //  排期
	ProcessRate          int32                          `protobuf:"varint,10,opt,name=process_rate,json=processRate,proto3" json:"process_rate,omitempty"`           //完成进度比例
	CreatedAt            int64                          `protobuf:"zigzag64,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`               //创建时间
	UpdatedAt            int64                          `protobuf:"zigzag64,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`               //更新时间
	DeletedAt            int64                          `protobuf:"zigzag64,15,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`               //删除时间
	Priority             string                         `protobuf:"bytes,16,opt,name=priority,proto3" json:"priority,omitempty"`                                     //优先级
	Pid                  int64                          `protobuf:"zigzag64,17,opt,name=pid,proto3" json:"pid,omitempty"`                                            //上级任务id, >0 表示当前为子任务
	SpaceName            string                         `protobuf:"bytes,18,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	LastStatusAt         int64                          `protobuf:"zigzag64,25,opt,name=last_status_at,json=lastStatusAt,proto3" json:"last_status_at,omitempty"` //历史状态更新时间
	IsRestart            int32                          `protobuf:"varint,27,opt,name=is_restart,json=isRestart,proto3" json:"is_restart,omitempty"`              //是否为重启任务
	RestartAt            int64                          `protobuf:"varint,28,opt,name=restart_at,json=restartAt,proto3" json:"restart_at,omitempty"`              //重启时间
	IconFlags            []uint32                       `protobuf:"varint,29,rep,packed,name=iconFlags,proto3" json:"iconFlags,omitempty"`                        //图标标记
	SpaceRoleId          int64                          `protobuf:"varint,30,opt,name=space_role_id,json=spaceRoleId,proto3" json:"space_role_id,omitempty"`
	RestartUserId        int64                          `protobuf:"varint,31,opt,name=restart_user_id,json=restartUserId,proto3" json:"restart_user_id,omitempty"`
	UnreadCommentNum     int32                          `protobuf:"varint,32,opt,name=unread_comment_num,json=unreadCommentNum,proto3" json:"unread_comment_num,omitempty"`         //参与人未读评论数
	ResumeAt             int64                          `protobuf:"varint,33,opt,name=resume_at,json=resumeAt,proto3" json:"resume_at,omitempty"`                                   //恢复时间
	ParentStatus         *SearchWorkItemInfo_StatusInfo `protobuf:"bytes,34,opt,name=parentStatus,proto3" json:"parentStatus,omitempty"`                                            //父级任务状态
	Followed             bool                           `protobuf:"varint,35,opt,name=followed,proto3" json:"followed,omitempty"`                                                   //是否已关注
	VersionId            int64                          `protobuf:"varint,36,opt,name=versionId,proto3" json:"versionId,omitempty"`                                                 //版本id -> 版本表
	VersionName          string                         `protobuf:"bytes,37,opt,name=versionName,proto3" json:"versionName,omitempty"`                                              //版本名称 -> 版本表
	CommentNum           int32                          `protobuf:"varint,39,opt,name=commentNum,proto3" json:"commentNum,omitempty"`                                               //评论数
	FlowId               int64                          `protobuf:"varint,40,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`                                         // 流程id
	WorkFlowTemplateId   int64                          `protobuf:"varint,41,opt,name=work_flow_template_id,json=workFlowTemplateId,proto3" json:"work_flow_template_id,omitempty"` // 流程模版id
	FlowName             string                         `protobuf:"bytes,42,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`                                    // 流程名
	FlowMode             string                         `protobuf:"bytes,43,opt,name=flow_mode,json=flowMode,proto3" json:"flow_mode,omitempty"`                                    // 流程
	WorkItemTypeKey      string                         `protobuf:"bytes,44,opt,name=work_item_type_key,json=workItemTypeKey,proto3" json:"work_item_type_key,omitempty"`
	Directors            []*SimpleUserInfo              `protobuf:"bytes,50,rep,name=directors,proto3" json:"directors,omitempty"`
	Creator              *SimpleUserInfo                `protobuf:"bytes,51,opt,name=creator,proto3" json:"creator,omitempty"`
	FlowNode             *anypb.Any                     `protobuf:"bytes,49,opt,name=flowNode,proto3" json:"flowNode,omitempty"`
	RestartUser          *SimpleUserInfo                `protobuf:"bytes,53,opt,name=restartUser,proto3" json:"restartUser,omitempty"`
	Participators        []*SimpleUserInfo              `protobuf:"bytes,54,rep,name=participators,proto3" json:"participators,omitempty"`                                           //任务参与人
	OperationPermissions string                         `protobuf:"bytes,55,opt,name=operation_permissions,json=operationPermissions,proto3" json:"operation_permissions,omitempty"` //任务功能操作权限角色
	WorkItemStatus       *SearchWorkItemInfo_StatusInfo `protobuf:"bytes,56,opt,name=work_item_status,json=workItemStatus,proto3" json:"work_item_status,omitempty"`
	NodePlanTime         *SearchWorkItemInfo_PlanTime   `protobuf:"bytes,9,opt,name=node_plan_time,json=nodePlanTime,proto3" json:"node_plan_time,omitempty"` //  当前节点排期
	Nodes                []*FlowNode                    `protobuf:"bytes,57,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *SearchWorkItemInfo) Reset() {
	*x = SearchWorkItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bean_vo_rsp_search_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWorkItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWorkItemInfo) ProtoMessage() {}

func (x *SearchWorkItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bean_vo_rsp_search_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWorkItemInfo.ProtoReflect.Descriptor instead.
func (*SearchWorkItemInfo) Descriptor() ([]byte, []int) {
	return file_bean_vo_rsp_search_proto_rawDescGZIP(), []int{1}
}

func (x *SearchWorkItemInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchWorkItemInfo) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *SearchWorkItemInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchWorkItemInfo) GetWorkObjectId() int64 {
	if x != nil {
		return x.WorkObjectId
	}
	return 0
}

func (x *SearchWorkItemInfo) GetWorkObjectName() string {
	if x != nil {
		return x.WorkObjectName
	}
	return ""
}

func (x *SearchWorkItemInfo) GetWorkItemGuid() string {
	if x != nil {
		return x.WorkItemGuid
	}
	return ""
}

func (x *SearchWorkItemInfo) GetWorkItemName() string {
	if x != nil {
		return x.WorkItemName
	}
	return ""
}

func (x *SearchWorkItemInfo) GetPlanTime() *SearchWorkItemInfo_PlanTime {
	if x != nil {
		return x.PlanTime
	}
	return nil
}

func (x *SearchWorkItemInfo) GetProcessRate() int32 {
	if x != nil {
		return x.ProcessRate
	}
	return 0
}

func (x *SearchWorkItemInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SearchWorkItemInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SearchWorkItemInfo) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *SearchWorkItemInfo) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *SearchWorkItemInfo) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *SearchWorkItemInfo) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *SearchWorkItemInfo) GetLastStatusAt() int64 {
	if x != nil {
		return x.LastStatusAt
	}
	return 0
}

func (x *SearchWorkItemInfo) GetIsRestart() int32 {
	if x != nil {
		return x.IsRestart
	}
	return 0
}

func (x *SearchWorkItemInfo) GetRestartAt() int64 {
	if x != nil {
		return x.RestartAt
	}
	return 0
}

func (x *SearchWorkItemInfo) GetIconFlags() []uint32 {
	if x != nil {
		return x.IconFlags
	}
	return nil
}

func (x *SearchWorkItemInfo) GetSpaceRoleId() int64 {
	if x != nil {
		return x.SpaceRoleId
	}
	return 0
}

func (x *SearchWorkItemInfo) GetRestartUserId() int64 {
	if x != nil {
		return x.RestartUserId
	}
	return 0
}

func (x *SearchWorkItemInfo) GetUnreadCommentNum() int32 {
	if x != nil {
		return x.UnreadCommentNum
	}
	return 0
}

func (x *SearchWorkItemInfo) GetResumeAt() int64 {
	if x != nil {
		return x.ResumeAt
	}
	return 0
}

func (x *SearchWorkItemInfo) GetParentStatus() *SearchWorkItemInfo_StatusInfo {
	if x != nil {
		return x.ParentStatus
	}
	return nil
}

func (x *SearchWorkItemInfo) GetFollowed() bool {
	if x != nil {
		return x.Followed
	}
	return false
}

func (x *SearchWorkItemInfo) GetVersionId() int64 {
	if x != nil {
		return x.VersionId
	}
	return 0
}

func (x *SearchWorkItemInfo) GetVersionName() string {
	if x != nil {
		return x.VersionName
	}
	return ""
}

func (x *SearchWorkItemInfo) GetCommentNum() int32 {
	if x != nil {
		return x.CommentNum
	}
	return 0
}

func (x *SearchWorkItemInfo) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *SearchWorkItemInfo) GetWorkFlowTemplateId() int64 {
	if x != nil {
		return x.WorkFlowTemplateId
	}
	return 0
}

func (x *SearchWorkItemInfo) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *SearchWorkItemInfo) GetFlowMode() string {
	if x != nil {
		return x.FlowMode
	}
	return ""
}

func (x *SearchWorkItemInfo) GetWorkItemTypeKey() string {
	if x != nil {
		return x.WorkItemTypeKey
	}
	return ""
}

func (x *SearchWorkItemInfo) GetDirectors() []*SimpleUserInfo {
	if x != nil {
		return x.Directors
	}
	return nil
}

func (x *SearchWorkItemInfo) GetCreator() *SimpleUserInfo {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *SearchWorkItemInfo) GetFlowNode() *anypb.Any {
	if x != nil {
		return x.FlowNode
	}
	return nil
}

func (x *SearchWorkItemInfo) GetRestartUser() *SimpleUserInfo {
	if x != nil {
		return x.RestartUser
	}
	return nil
}

func (x *SearchWorkItemInfo) GetParticipators() []*SimpleUserInfo {
	if x != nil {
		return x.Participators
	}
	return nil
}

func (x *SearchWorkItemInfo) GetOperationPermissions() string {
	if x != nil {
		return x.OperationPermissions
	}
	return ""
}

func (x *SearchWorkItemInfo) GetWorkItemStatus() *SearchWorkItemInfo_StatusInfo {
	if x != nil {
		return x.WorkItemStatus
	}
	return nil
}

func (x *SearchWorkItemInfo) GetNodePlanTime() *SearchWorkItemInfo_PlanTime {
	if x != nil {
		return x.NodePlanTime
	}
	return nil
}

func (x *SearchWorkItemInfo) GetNodes() []*FlowNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type QSpaceWorkItemByPidResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*QSpaceWorkItemByPidResult_Item `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QSpaceWorkItemByPidResult) Reset() {
	*x = QSpaceWorkItemByPidResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bean_vo_rsp_search_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QSpaceWorkItemByPidResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QSpaceWorkItemByPidResult) ProtoMessage() {}

func (x *QSpaceWorkItemByPidResult) ProtoReflect() protoreflect.Message {
	mi := &file_bean_vo_rsp_search_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QSpaceWorkItemByPidResult.ProtoReflect.Descriptor instead.
func (*QSpaceWorkItemByPidResult) Descriptor() ([]byte, []int) {
	return file_bean_vo_rsp_search_proto_rawDescGZIP(), []int{2}
}

func (x *QSpaceWorkItemByPidResult) GetList() []*QSpaceWorkItemByPidResult_Item {
	if x != nil {
		return x.List
	}
	return nil
}

type FlowNode_PlanTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAt    int64 `protobuf:"zigzag64,1,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`          //计划任务开始时间
	CompleteAt int64 `protobuf:"zigzag64,2,opt,name=complete_at,json=completeAt,proto3" json:"complete_at,omitempty"` //计划任务完成时间
}

func (x *FlowNode_PlanTime) Reset() {
	*x = FlowNode_PlanTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bean_vo_rsp_search_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowNode_PlanTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowNode_PlanTime) ProtoMessage() {}

func (x *FlowNode_PlanTime) ProtoReflect() protoreflect.Message {
	mi := &file_bean_vo_rsp_search_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowNode_PlanTime.ProtoReflect.Descriptor instead.
func (*FlowNode_PlanTime) Descriptor() ([]byte, []int) {
	return file_bean_vo_rsp_search_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FlowNode_PlanTime) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *FlowNode_PlanTime) GetCompleteAt() int64 {
	if x != nil {
		return x.CompleteAt
	}
	return 0
}

type SearchWorkItemInfo_StatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`     //工作项状态id
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`    //工作项状态key
	Val  string `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty"`    //任务状态
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`  //状态名称
	Type int64  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"` //状态类型
}

func (x *SearchWorkItemInfo_StatusInfo) Reset() {
	*x = SearchWorkItemInfo_StatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bean_vo_rsp_search_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWorkItemInfo_StatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWorkItemInfo_StatusInfo) ProtoMessage() {}

func (x *SearchWorkItemInfo_StatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bean_vo_rsp_search_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWorkItemInfo_StatusInfo.ProtoReflect.Descriptor instead.
func (*SearchWorkItemInfo_StatusInfo) Descriptor() ([]byte, []int) {
	return file_bean_vo_rsp_search_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SearchWorkItemInfo_StatusInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchWorkItemInfo_StatusInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SearchWorkItemInfo_StatusInfo) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

func (x *SearchWorkItemInfo_StatusInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchWorkItemInfo_StatusInfo) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

type SearchWorkItemInfo_PlanTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAt    int64 `protobuf:"zigzag64,1,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`          //计划任务开始时间
	CompleteAt int64 `protobuf:"zigzag64,2,opt,name=complete_at,json=completeAt,proto3" json:"complete_at,omitempty"` //计划任务完成时间
}

func (x *SearchWorkItemInfo_PlanTime) Reset() {
	*x = SearchWorkItemInfo_PlanTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bean_vo_rsp_search_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWorkItemInfo_PlanTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWorkItemInfo_PlanTime) ProtoMessage() {}

func (x *SearchWorkItemInfo_PlanTime) ProtoReflect() protoreflect.Message {
	mi := &file_bean_vo_rsp_search_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWorkItemInfo_PlanTime.ProtoReflect.Descriptor instead.
func (*SearchWorkItemInfo_PlanTime) Descriptor() ([]byte, []int) {
	return file_bean_vo_rsp_search_proto_rawDescGZIP(), []int{1, 1}
}

func (x *SearchWorkItemInfo_PlanTime) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *SearchWorkItemInfo_PlanTime) GetCompleteAt() int64 {
	if x != nil {
		return x.CompleteAt
	}
	return 0
}

type QSpaceWorkItemByPidResult_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SpaceId        int64  `protobuf:"zigzag64,2,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`                        //空间id
	UserId         int64  `protobuf:"zigzag64,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           //创建用户id
	WorkItemName   string `protobuf:"bytes,6,opt,name=work_item_name,json=workItemName,proto3" json:"work_item_name,omitempty"`          //空间名称
	WorkItemStatus int32  `protobuf:"zigzag32,7,opt,name=work_item_status,json=workItemStatus,proto3" json:"work_item_status,omitempty"` //空间状态;0:禁用,1:正常
}

func (x *QSpaceWorkItemByPidResult_Item) Reset() {
	*x = QSpaceWorkItemByPidResult_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bean_vo_rsp_search_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QSpaceWorkItemByPidResult_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QSpaceWorkItemByPidResult_Item) ProtoMessage() {}

func (x *QSpaceWorkItemByPidResult_Item) ProtoReflect() protoreflect.Message {
	mi := &file_bean_vo_rsp_search_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QSpaceWorkItemByPidResult_Item.ProtoReflect.Descriptor instead.
func (*QSpaceWorkItemByPidResult_Item) Descriptor() ([]byte, []int) {
	return file_bean_vo_rsp_search_proto_rawDescGZIP(), []int{2, 0}
}

func (x *QSpaceWorkItemByPidResult_Item) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QSpaceWorkItemByPidResult_Item) GetSpaceId() int64 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *QSpaceWorkItemByPidResult_Item) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QSpaceWorkItemByPidResult_Item) GetWorkItemName() string {
	if x != nil {
		return x.WorkItemName
	}
	return ""
}

func (x *QSpaceWorkItemByPidResult_Item) GetWorkItemStatus() int32 {
	if x != nil {
		return x.WorkItemStatus
	}
	return 0
}

var File_bean_vo_rsp_search_proto protoreflect.FileDescriptor

var file_bean_vo_rsp_search_proto_rawDesc = []byte{
	0x0a, 0x18, 0x62, 0x65, 0x61, 0x6e, 0x2f, 0x76, 0x6f, 0x2f, 0x72, 0x73, 0x70, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x73, 0x70, 0x1a,
	0x16, 0x62, 0x65, 0x61, 0x6e, 0x2f, 0x76, 0x6f, 0x2f, 0x72, 0x73, 0x70, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x65, 0x61, 0x6e, 0x2f, 0x76, 0x6f,
	0x2f, 0x72, 0x73, 0x70, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf1, 0x01, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x73, 0x70, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x46, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x74, 0x22, 0xb8, 0x0e, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f,
	0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x47, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x72, 0x73, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x69,
	0x63, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x12,
	0x46, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x73, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x77, 0x6f, 0x72,
	0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x73, 0x70, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x73, 0x70,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x77,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x72, 0x73, 0x70, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x73, 0x70, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x15,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4c, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x73,
	0x70, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x46, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x73, 0x70, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x39, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x73, 0x70, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x68, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x46, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x22, 0xf1,
	0x01, 0x0a, 0x19, 0x51, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x79, 0x50, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x73, 0x70,
	0x2e, 0x51, 0x53, 0x70, 0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x79, 0x50, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x9a, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x6f, 0x2d, 0x63, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x62, 0x65, 0x61, 0x6e, 0x2f, 0x76, 0x6f, 0x2f, 0x72, 0x73, 0x70,
	0x3b, 0x72, 0x73, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bean_vo_rsp_search_proto_rawDescOnce sync.Once
	file_bean_vo_rsp_search_proto_rawDescData = file_bean_vo_rsp_search_proto_rawDesc
)

func file_bean_vo_rsp_search_proto_rawDescGZIP() []byte {
	file_bean_vo_rsp_search_proto_rawDescOnce.Do(func() {
		file_bean_vo_rsp_search_proto_rawDescData = protoimpl.X.CompressGZIP(file_bean_vo_rsp_search_proto_rawDescData)
	})
	return file_bean_vo_rsp_search_proto_rawDescData
}

var file_bean_vo_rsp_search_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_bean_vo_rsp_search_proto_goTypes = []interface{}{
	(*FlowNode)(nil),                       // 0: rsp.FlowNode
	(*SearchWorkItemInfo)(nil),             // 1: rsp.SearchWorkItemInfo
	(*QSpaceWorkItemByPidResult)(nil),      // 2: rsp.QSpaceWorkItemByPidResult
	(*FlowNode_PlanTime)(nil),              // 3: rsp.FlowNode.PlanTime
	(*SearchWorkItemInfo_StatusInfo)(nil),  // 4: rsp.SearchWorkItemInfo.StatusInfo
	(*SearchWorkItemInfo_PlanTime)(nil),    // 5: rsp.SearchWorkItemInfo.PlanTime
	(*QSpaceWorkItemByPidResult_Item)(nil), // 6: rsp.QSpaceWorkItemByPidResult.Item
	(*SimpleUserInfo)(nil),                 // 7: rsp.SimpleUserInfo
	(*anypb.Any)(nil),                      // 8: google.protobuf.Any
}
var file_bean_vo_rsp_search_proto_depIdxs = []int32{
	3,  // 0: rsp.FlowNode.plan_time:type_name -> rsp.FlowNode.PlanTime
	5,  // 1: rsp.SearchWorkItemInfo.plan_time:type_name -> rsp.SearchWorkItemInfo.PlanTime
	4,  // 2: rsp.SearchWorkItemInfo.parentStatus:type_name -> rsp.SearchWorkItemInfo.StatusInfo
	7,  // 3: rsp.SearchWorkItemInfo.directors:type_name -> rsp.SimpleUserInfo
	7,  // 4: rsp.SearchWorkItemInfo.creator:type_name -> rsp.SimpleUserInfo
	8,  // 5: rsp.SearchWorkItemInfo.flowNode:type_name -> google.protobuf.Any
	7,  // 6: rsp.SearchWorkItemInfo.restartUser:type_name -> rsp.SimpleUserInfo
	7,  // 7: rsp.SearchWorkItemInfo.participators:type_name -> rsp.SimpleUserInfo
	4,  // 8: rsp.SearchWorkItemInfo.work_item_status:type_name -> rsp.SearchWorkItemInfo.StatusInfo
	5,  // 9: rsp.SearchWorkItemInfo.node_plan_time:type_name -> rsp.SearchWorkItemInfo.PlanTime
	0,  // 10: rsp.SearchWorkItemInfo.nodes:type_name -> rsp.FlowNode
	6,  // 11: rsp.QSpaceWorkItemByPidResult.list:type_name -> rsp.QSpaceWorkItemByPidResult.Item
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_bean_vo_rsp_search_proto_init() }
func file_bean_vo_rsp_search_proto_init() {
	if File_bean_vo_rsp_search_proto != nil {
		return
	}
	file_bean_vo_rsp_user_proto_init()
	file_bean_vo_rsp_work_flow_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bean_vo_rsp_search_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bean_vo_rsp_search_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWorkItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bean_vo_rsp_search_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QSpaceWorkItemByPidResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bean_vo_rsp_search_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowNode_PlanTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bean_vo_rsp_search_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWorkItemInfo_StatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bean_vo_rsp_search_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWorkItemInfo_PlanTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bean_vo_rsp_search_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QSpaceWorkItemByPidResult_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bean_vo_rsp_search_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bean_vo_rsp_search_proto_goTypes,
		DependencyIndexes: file_bean_vo_rsp_search_proto_depIdxs,
		MessageInfos:      file_bean_vo_rsp_search_proto_msgTypes,
	}.Build()
	File_bean_vo_rsp_search_proto = out.File
	file_bean_vo_rsp_search_proto_rawDesc = nil
	file_bean_vo_rsp_search_proto_goTypes = nil
	file_bean_vo_rsp_search_proto_depIdxs = nil
}
