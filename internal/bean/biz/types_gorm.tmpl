// Code generated by protoc-gen-go. DO NOT EDIT.
// source: {{.InputFilePath}}

package db

import (
	"google.golang.org/protobuf/proto"
	"go-cs/internal/bean"
)

const TableNamePrefix = ""

// This file was automatically generated by the types generator
// Input file: {{.InputFilePath}}

{{range .Messages}}
// -----------------------------------------------------------------------------
// {{.Name}} 表结构
// 对应的 Proto 消息类型: {{.Name}}
// 数据库表名: {{.Name | ToSnakeCase}}
type {{.Name}} struct {
	{{range .Fields}}
	{{.CamelName}} {{if eq .IsRepeated true}}[]{{end}}{{.GoType}} `{{if eq .Name "id"}}gorm:"primaryKey" bson:"_id" json:"id"{{else if eq .Name "create_at"}}gorm:"<-:create" bson:"{{.Name}}" json:"{{.Name}}"{{else}}gorm:"column:{{.Name}}" bson:"{{.Name}}" json:"{{.Name}}"{{end}}`{{end}}
}

func (m *{{.Name}}) TableName() string {
	return TableNamePrefix + "{{.Name | ToSnakeCase}}"
}

func (m *{{.Name}}) Cloumns() *{{.Name | ToHump}}Cloumns {
	return _{{.Name | ToHump}}Cloumns
}

func (m *{{.Name}}) ToProto() *bean.{{.Name}} {
	return &bean.{{.Name}}{
		{{range .Fields}}{{.CamelName}}: {{if eq .IsRepeated true}}[]{{.GoType}}{{else}}{{.GoType}}{{end}}(m.{{.CamelName}}),
		{{end}}
	}
}

func (m *{{.Name}}) FromProto(proto *bean.{{.Name}}) {
	{{range .Fields}}m.{{.CamelName}} = {{if eq .IsRepeated true}}[]{{.GoType}}{{else}}{{.GoType}}{{end}}(proto.{{.CamelName}})
	{{end}}
}

func (m *{{.Name}}) ToAnyObj() (*bean.AnyObj, error) {
	pbObj := m.ToProto()
	bytes, err := proto.Marshal(pbObj)
	if err != nil {
		return nil, err
	}
	body := bean.AnyObj{
		ObjType: uint32(bean.Table_{{.Name | ToUpperWithUnderscores}}),
		Obj: bytes,
	}
	return &body, nil
}

func (m *{{.Name}}) FromAnyObj(anyObj *bean.AnyObj) error {
	pbObj := &bean.{{.Name}}{}
	err := proto.Unmarshal(anyObj.Obj, pbObj)
	if err != nil {
		return err
	}
	m.FromProto(pbObj)
	return nil
}

type {{.Name | ToHump}}Cloumns struct {
	ALL string
	{{range .Fields}}
	{{.CamelName}} {{if eq .IsRepeated true}}[]{{end}} string{{end}}
	raw []string
}

var _{{.Name | ToHump}}Cloumns *{{.Name | ToHump}}Cloumns = &{{.Name | ToHump}}Cloumns{
	raw : []string{
	{{range .Fields}}"{{.Name}}",{{end}}
	},
	ALL: "*",
	{{range .Fields}}{{.CamelName}} : "{{.Name}}",
	{{end}}
}


func (c *{{.Name | ToHump}}Cloumns) Select(includes ...string) []string {
	if len(includes) == 0 {
		return c.raw
	}

	m := make(map[string]bool)
	for _, i := range c.raw {
	    m[i] = true
	}

	clounms := make([]string, 0)
	for _, v := range includes {
		if _, isOk := m[v]; isOk {
			clounms = append(clounms, v)
		}
	}
	
	if len(clounms) == 0 {
		return c.raw
	}
	return clounms
}


func (c *{{.Name | ToHump}}Cloumns) SelectEx(excludes ...string) []string {
	if len(excludes) == 0 {
		return c.raw
	}

	m := make(map[string]bool)
	for _, i := range excludes {
	    m[i] = true
	}

	clounms := make([]string, 0)
	for _, v := range c.raw {
		if _, isOk := m[v]; !isOk {
			clounms = append(clounms, v)
		}
	}

	if len(clounms) == 0 {
		return c.raw
	}
	return clounms
}

{{end}}
