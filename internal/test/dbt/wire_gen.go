// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dbt

import (
	"github.com/go-kratos/kratos/v2/log"
	"go-cs/internal/biz"
	"go-cs/internal/biz/command"
	"go-cs/internal/biz/query"
	"go-cs/internal/conf"
	"go-cs/internal/data"
	service4 "go-cs/internal/domain/file_info/service"
	service9 "go-cs/internal/domain/perm/service"
	"go-cs/internal/domain/pkg/message"
	service8 "go-cs/internal/domain/space/service"
	service17 "go-cs/internal/domain/space_file_info/service"
	service10 "go-cs/internal/domain/space_member/service"
	service15 "go-cs/internal/domain/space_tag/service"
	service14 "go-cs/internal/domain/space_view/service"
	service18 "go-cs/internal/domain/space_work_item_comment/service"
	service13 "go-cs/internal/domain/space_work_object/service"
	service12 "go-cs/internal/domain/space_work_version/service"
	service3 "go-cs/internal/domain/user/service"
	"go-cs/internal/domain/user_login_log/service"
	service5 "go-cs/internal/domain/work_flow/service"
	service16 "go-cs/internal/domain/work_item/service"
	service7 "go-cs/internal/domain/work_item_role/service"
	service6 "go-cs/internal/domain/work_item_status/service"
	service11 "go-cs/internal/domain/work_item_type/service"
	data2 "go-cs/internal/dwh/data"
	service19 "go-cs/internal/dwh/service"
	"go-cs/internal/pkg/biz_id"
	service2 "go-cs/internal/service"
	"go-cs/internal/utils"
	"go-cs/internal/utils/cache"
	"go-cs/internal/utils/es/v8"
	"go-cs/internal/utils/orm"
	"go-cs/internal/utils/third_platform"
	"go.uber.org/zap"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, confData *conf.Data, jwt *conf.Jwt, fileConfig *conf.FileConfig, dwh *conf.Dwh, logger log.Logger, zapLogger *zap.Logger, client *third_platform.Client) (*All, func(), error) {
	db, cleanup, err := orm.NewOrm(confData, logger, zapLogger)
	if err != nil {
		return nil, nil, err
	}
	readonlyGormDB, cleanup2, err := data.NewReadonlyGormDB(confData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	config := cache.NewConfig(confData)
	redisClient, cleanup3, err := cache.NewRedis(config, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	v8Config := v8.NewConfig(confData)
	elasticsearchClient, cleanup4, err := v8.NewEsClient(v8Config, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	store, cleanup5, err := utils.NewSessionStore(confData, logger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dataData, cleanup6, err := data.NewData(db, readonlyGormDB, redisClient, elasticsearchClient, store, confData, logger)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	loginRepo := data.NewLoginRepo(jwt, dataData, logger)
	transaction := data.NewTransaction(dataData)
	userRepo := data.NewUserRepo(dataData, logger)
	adminRepo := data.NewAdminRepo(dataData, logger)
	userLoginLogRepo := data.NewUserLoginLogRepo(dataData, logger)
	userLgoinLogService := service.NewUserLoginLogService(userLoginLogRepo)
	addUserLoginLogCmd := command.NewAddUserLoginLogCommand(userRepo, userLoginLogRepo, userLgoinLogService)
	domainMessageProducer := message.NewDomainMessageProducer()
	loginUsecase := biz.NewLoginUsecase(loginRepo, transaction, userRepo, adminRepo, client, addUserLoginLogCmd, domainMessageProducer, logger)
	loginService := service2.NewLoginService(loginUsecase, confData, logger)
	spaceMemberRepo := data.NewSpaceMemberRepo(dataData, logger)
	searchRepo := data.NewSearchRepo(dataData, bootstrap, logger)
	spaceRepo := data.NewSpaceRepo(dataData, logger)
	notifySnapshotRepo := data.NewNotifyRepo(dataData, logger)
	configRepo := data.NewConfigRepo(dataData, logger)
	workItemRepo := data.NewSpaceWorkItemRepo(dataData, logger)
	businessIdService := biz_id.NewBusinessIdService(db, logger)
	userService := service3.NewUserService(userRepo, businessIdService)
	userUsecase := biz.NewUserUsecase(client, logger, transaction, userRepo, loginRepo, spaceMemberRepo, searchRepo, spaceRepo, notifySnapshotRepo, adminRepo, configRepo, workItemRepo, userService, domainMessageProducer)
	fileInfoRepo := data.NewFileInfoRepo(dataData, logger)
	fileInfoService := service4.NewFileInfoService(fileInfoRepo, businessIdService)
	uploadUsecase := biz.NewUploadUsecase(transaction, logger, fileInfoRepo, fileInfoService)
	serviceUserService := service2.NewUserService(fileConfig, logger, userUsecase, uploadUsecase, loginUsecase)
	configUsecase := biz.NewConfigUsecase(transaction, bootstrap, logger, configRepo, userRepo, domainMessageProducer)
	configService := service2.NewConfigService(configUsecase, logger)
	spaceWorkVersionRepo := data.NewSpaceWorkVersionRepo(dataData, logger)
	spaceWorkObjectRepo := data.NewSpaceWorkObjectRepo(dataData, logger)
	spaceFileInfoRepo := data.NewSpaceFileInfoRepo(dataData, logger)
	spaceTagRepo := data.NewSpaceTagRepo(dataData, logger)
	workItemTypeRepo := data.NewWorkItemTypeRepo(dataData, logger)
	workFlowRepo := data.NewWorkFlowRepo(dataData, logger)
	workItemRoleRepo := data.NewWorkItemRoleRepo(dataData, logger)
	workItemStatusRepo := data.NewWorkItemStatusRepo(dataData, logger)
	spaceViewRepo := data.NewSpaceViewRepo(dataData, logger)
	workFlowService := service5.NewWorkFlowService(workFlowRepo, businessIdService, logger)
	workItemStatusService := service6.NewWorkItemStatusService(workItemStatusRepo, businessIdService, logger)
	workItemRoleService := service7.NewWorkItemRoleService(businessIdService, workItemRoleRepo, logger)
	spaceService := service8.NewSpaceService(spaceRepo, businessIdService)
	permService := service9.NewPermService(userRepo)
	spaceMemberService := service10.NewSpaceMemberService(spaceMemberRepo, businessIdService)
	workItemTypeService := service11.NewWorkItemTypeService(businessIdService, workItemTypeRepo, logger)
	spaceWorkVersionService := service12.NewSpaceWorkVersionService(spaceWorkVersionRepo, businessIdService)
	spaceWorkObjectService := service13.NewSpaceWorkObjectService(spaceWorkObjectRepo, businessIdService)
	spaceViewService := service14.NewSpaceViewService(spaceViewRepo, spaceMemberRepo)
	spaceUsecase := biz.NewSpaceUsecase(transaction, logger, spaceRepo, spaceWorkVersionRepo, spaceMemberRepo, spaceWorkObjectRepo, userRepo, workItemRepo, spaceFileInfoRepo, spaceTagRepo, workItemTypeRepo, workFlowRepo, workItemRoleRepo, workItemStatusRepo, searchRepo, spaceViewRepo, workFlowService, businessIdService, workItemStatusService, workItemRoleService, spaceService, permService, spaceMemberService, workItemTypeService, spaceWorkVersionService, spaceWorkObjectService, spaceViewService, domainMessageProducer)
	spaceWorkItemCommentRepo := data.NewSpaceWorkItemCommentRepo(dataData, logger)
	spaceMemberUsecase := biz.NewSpaceMemberUsecase(spaceMemberRepo, spaceRepo, userRepo, workItemRepo, spaceWorkItemCommentRepo, workFlowRepo, spaceViewRepo, permService, spaceMemberService, workFlowService, spaceViewService, domainMessageProducer, transaction, logger)
	serviceSpaceService := service2.NewSpaceService(spaceUsecase, spaceMemberUsecase, logger)
	serviceSpaceMemberService := service2.NewSpaceMemberService(spaceMemberUsecase, logger)
	staticsRepo := data.NewStaticsEsRepo(dataData, workItemStatusRepo, logger)
	spaceTagService := service15.NewSpaceTagService(spaceTagRepo, businessIdService)
	spaceTagUsecase := biz.NewSpaceTagUsecase(spaceTagRepo, transaction, staticsRepo, workItemRepo, userRepo, spaceRepo, spaceMemberRepo, permService, spaceTagService, domainMessageProducer, logger)
	serviceSpaceTagService := service2.NewSpaceTagService(spaceTagUsecase, logger)
	workItemEsRepo := data.NewSpaceWorkItemEsRepo(dataData, logger)
	workItemService := service16.NewWorkItemService(workItemRepo, businessIdService)
	spaceFileInfoService := service17.NewSpaceFileInfoService(spaceFileInfoRepo, businessIdService)
	spaceWorkItemCommentService := service18.NewSpaceWorkItemCommentService(spaceWorkItemCommentRepo)
	createSpaceTaskCmd := command.NewCreateSpaceTaskCmd(workItemRepo, workItemEsRepo, spaceRepo, spaceMemberRepo, spaceWorkObjectRepo, workItemRoleRepo, spaceWorkVersionRepo, workItemStatusRepo, workItemTypeRepo, workFlowRepo, fileInfoRepo, permService, spaceMemberService, spaceTagService, workItemService, spaceFileInfoService, fileInfoService, domainMessageProducer, logger, transaction)
	createSpaceSubTaskCmd := command.NewCreateSpaceSubTaskCmd(workItemRepo, workItemEsRepo, spaceRepo, spaceMemberRepo, spaceWorkObjectRepo, workItemRoleRepo, spaceWorkVersionRepo, workItemStatusRepo, workItemTypeRepo, workFlowRepo, fileInfoRepo, permService, spaceMemberService, spaceTagService, workItemService, spaceFileInfoService, domainMessageProducer, logger, transaction)
	addWorkItemCommentCmd := command.NewAddWorkItemCommentCommand(transaction, spaceWorkItemCommentService, workItemRepo, spaceMemberRepo, spaceWorkItemCommentRepo)
	workItemDetailQuery := query.NewWorkItemDetailQuery(workItemRepo, spaceRepo, spaceMemberRepo, spaceWorkObjectRepo, workItemRoleRepo, spaceWorkVersionRepo, workItemStatusRepo, workItemTypeRepo, workFlowRepo, fileInfoRepo, staticsRepo, spaceTagRepo, userRepo, spaceWorkItemCommentRepo, spaceFileInfoRepo, permService, spaceMemberService, spaceTagService, workItemService, spaceFileInfoService, logger, transaction)
	spaceWorkItemUsecase := biz.NewSpaceWorkItemUsecase(workItemRepo, workItemEsRepo, spaceWorkVersionRepo, staticsRepo, transaction, spaceFileInfoRepo, fileInfoRepo, spaceWorkObjectRepo, spaceTagRepo, workItemStatusRepo, workItemTypeRepo, workFlowRepo, userRepo, spaceRepo, spaceMemberRepo, spaceWorkItemCommentRepo, workItemRoleRepo, permService, workItemService, spaceMemberService, spaceTagService, spaceFileInfoService, spaceWorkItemCommentService, fileInfoService, workItemStatusService, createSpaceTaskCmd, createSpaceSubTaskCmd, addWorkItemCommentCmd, workItemDetailQuery, domainMessageProducer, logger)
	spaceWorkItemService := service2.NewSpaceWorkItemService(spaceWorkItemUsecase, logger)
	spaceWorkObjectUsecase := biz.NewSpaceWorkObjectUsecase(spaceWorkObjectRepo, workItemRepo, transaction, userRepo, spaceRepo, spaceMemberRepo, permService, spaceWorkObjectService, domainMessageProducer, logger)
	serviceSpaceWorkObjectService := service2.NewSpaceWorkObjectService(spaceWorkObjectUsecase, logger)
	searchUsecase := biz.NewSearchUsecase(transaction, logger, searchRepo, userRepo, spaceRepo, spaceMemberRepo, workItemRepo, spaceWorkObjectRepo, spaceTagRepo, spaceWorkItemCommentRepo, spaceWorkVersionRepo, workFlowRepo, workItemTypeRepo, workItemStatusRepo, permService)
	searchService := service2.NewSearchService(searchUsecase, logger)
	staticsUsecase := biz.NewStaticsUsecase(staticsRepo, transaction, spaceMemberRepo, workItemStatusRepo, logger)
	workbenchService := service2.NewWorkbenchService(staticsUsecase, logger)
	dbtService := NewService(loginService, serviceUserService, configService, serviceSpaceService, serviceSpaceMemberService, serviceSpaceTagService, spaceWorkItemService, serviceSpaceWorkObjectService, searchService, workbenchService)
	spaceWorkItemFlowUsecase := biz.NewSpaceWorkItemFlowUsecase(transaction, logger, workItemRepo, workItemStatusRepo, workFlowRepo, userRepo, spaceRepo, spaceMemberRepo, permService, workItemService, workFlowService, workItemStatusService, domainMessageProducer)
	workFlowUsecase := biz.NewWorkFlowUsecase(workFlowRepo, spaceMemberRepo, spaceRepo, workItemTypeRepo, workItemStatusRepo, workItemRoleRepo, staticsRepo, workItemRepo, workFlowService, permService, businessIdService, domainMessageProducer, transaction, logger)
	spaceViewUsecase := biz.NewSpaceViewUsecase(logger, transaction, spaceViewRepo, userRepo, spaceRepo, spaceMemberRepo, permService, spaceViewService, domainMessageProducer)
	dwhData := data2.NewDwhData(dwh)
	rptRepo := data2.NewRptRepo(dwhData)
	dwhAds := service19.NewDwhAds(rptRepo)
	dwhService := service19.NewDwhService(dwhAds)
	rptUsecase := biz.NewRptUsecase(dwhService, logger, userRepo, spaceRepo, spaceMemberRepo, userLoginLogRepo)
	usecase := NewUsecase(loginUsecase, userUsecase, uploadUsecase, configUsecase, spaceUsecase, spaceMemberUsecase, spaceTagUsecase, spaceWorkObjectUsecase, searchUsecase, spaceWorkItemFlowUsecase, spaceWorkItemUsecase, workFlowUsecase, staticsUsecase, spaceViewUsecase, rptUsecase)
	repo := NewRepo(loginRepo, userRepo, fileInfoRepo, spaceFileInfoRepo, workItemRepo, spaceMemberRepo, configRepo, spaceRepo, spaceWorkObjectRepo, spaceTagRepo, staticsRepo, searchRepo, workItemStatusRepo, workFlowRepo, workItemTypeRepo, spaceWorkVersionRepo, workItemRoleRepo, spaceViewRepo)
	domainService := NewDomainService(businessIdService, workFlowService, workItemRoleService, workItemStatusService, fileInfoService, spaceFileInfoService, spaceWorkObjectService, spaceTagService, spaceWorkVersionService, workItemService, spaceViewService)
	dbtAll := NewAll(dataData, dbtService, usecase, repo, domainService)
	return dbtAll, func() {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
