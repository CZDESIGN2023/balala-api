// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/http-api/http_discovery.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	registry "github.com/go-kratos/kratos/v2/registry"
	gomock "github.com/golang/mock/gomock"
)

// MockRegistryInterface is a mock of RegistryInterface interface.
type MockRegistryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryInterfaceMockRecorder
}

// MockRegistryInterfaceMockRecorder is the mock recorder for MockRegistryInterface.
type MockRegistryInterfaceMockRecorder struct {
	mock *MockRegistryInterface
}

// NewMockRegistryInterface creates a new mock instance.
func NewMockRegistryInterface(ctrl *gomock.Controller) *MockRegistryInterface {
	mock := &MockRegistryInterface{ctrl: ctrl}
	mock.recorder = &MockRegistryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryInterface) EXPECT() *MockRegistryInterfaceMockRecorder {
	return m.recorder
}

// GetService mocks base method.
func (m *MockRegistryInterface) GetService(ctx context.Context, service string) ([]*registry.ServiceInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", ctx, service)
	ret0, _ := ret[0].([]*registry.ServiceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockRegistryInterfaceMockRecorder) GetService(ctx, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockRegistryInterface)(nil).GetService), ctx, service)
}

// MockHttpDiscoveryInterface is a mock of HttpDiscoveryInterface interface.
type MockHttpDiscoveryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHttpDiscoveryInterfaceMockRecorder
}

// MockHttpDiscoveryInterfaceMockRecorder is the mock recorder for MockHttpDiscoveryInterface.
type MockHttpDiscoveryInterfaceMockRecorder struct {
	mock *MockHttpDiscoveryInterface
}

// NewMockHttpDiscoveryInterface creates a new mock instance.
func NewMockHttpDiscoveryInterface(ctrl *gomock.Controller) *MockHttpDiscoveryInterface {
	mock := &MockHttpDiscoveryInterface{ctrl: ctrl}
	mock.recorder = &MockHttpDiscoveryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpDiscoveryInterface) EXPECT() *MockHttpDiscoveryInterfaceMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockHttpDiscoveryInterface) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockHttpDiscoveryInterfaceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockHttpDiscoveryInterface)(nil).GetName))
}

// GetServiceUrl mocks base method.
func (m *MockHttpDiscoveryInterface) GetServiceUrl(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceUrl", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceUrl indicates an expected call of GetServiceUrl.
func (mr *MockHttpDiscoveryInterfaceMockRecorder) GetServiceUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceUrl", reflect.TypeOf((*MockHttpDiscoveryInterface)(nil).GetServiceUrl), arg0, arg1)
}
